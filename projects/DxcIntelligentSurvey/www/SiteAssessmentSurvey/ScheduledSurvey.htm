<!-- Scheduled survey html will be loaded by clicking on perform survey button which is available in conducted survey html -->
<!DOCTYPE html>
<html lang="en" xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta charset="utf-8" />
    <!--<meta name="viewport" content="width=device-width">-->
    <!-- Defined iOS viewport -->
    <!-- If missing, the UIWebView control on iOS zooms out the web page and allows the pinch zoom. -->
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title></title>
    <link href="ebecssvy_progress_bar_style_mobile.css" rel="stylesheet">
    <link rel="stylesheet" href="ebecssvy_signaturepad.css">
    <link rel="stylesheet" href="bootstrap.min.css">
    <link href="https://fonts.googleapis.com/css?family=Lato" rel="stylesheet">
    <link href="bespoke.css" rel="stylesheet">
    <link rel="stylesheet" href="kendo.common-material.min.css" />
    <link rel="stylesheet" href="kendo.material.min.css" />
    <script type="text/javascript" src="jquery_1.9.1.min.js"></script>
    <script type="text/javascript" src="kendo.all.min.js"></script>
    <script type="text/javascript" src="JSBridge.js"></script>
    <script src="ebecssvy_signature_pad.js" type="text/javascript"></script>
    <script src="ebecssvy_signature_pad_app.js" type="text/javascript"></script>
    <script src="ebecssvy_progress_bar_mobile.js" type="text/javascript"></script>
    <script type="text/javascript">

        var dynamicsData = null, SurvedEntObj = null; sourceEntityName = null, sourceEntityId = null;
        var responsesRelatedToQuestion = []; var SurveyAnswersActionsArray = null; var Platform = null;
        var IsOnload = true; var firstLoad = "true"; var isFinished = false; var childSurveyCount = 0;
        var Result_Tabs = null; var Result_Ans = null; var AttributeType = null; var order = null; var j = 0; var _CurrentUserName = null; var _CurrentUserId = null;
        var _CConductedSurveyId = null; var CCSurveyStatusChanged = false; var _CConductedSurveyName = null; var SurveyType = null;
        var QuestionsArray = null; var IsPerfromAction = false; var requredQId = null; var notRequiredQId = null;
        var tabIsShowDesigner = "false"; var _htmlUrl = null; var parentConductedSurvey = null;
        var highlightQ = null; var noAnswersArray = null; var BSGLArray = null; var BSLookupArray = null; var lastSeenTabIndex = 0; var SurveyTypeName = null;
        var templateScoring = "false"; var templateScoringRule = null; var scoreValues = []; var surveyTemplate = null;
        var enableScoreTracking = false; var tabQuestions = []; var NumberOfReviews = 0; var QuestionRelatedActions = []; var SurveyResponses = [];
        var AppVersion = null; var isOnline = null; var statusChangeCaptured = 0; var SurveyId = null; var _surveyName = null; var currencySymbol = "£"; var DecimalSeperator = "."; var ThousandSeperator = ",";
        var Answer = null; var questionIndex = 0; var GLArray = null, LookupArray = null;
        var isRetake = false;
        var SignaturePadObjectArray = []; //This array contains signature canvas objects
        var SignatureDisclaimer = ""; //This contains disclaimer of the signature question
        var traversedTabList = [];
        var FilteredLookupQuestions = [] //This contains all filtered lookup questions with minimum amount of information. This will reduce query time for entire question array
        var FetchXMLQuestionArray = null;
        var CustomFilterQuestionArray = null;
        var DataPagingSize = 500; //Resco only send 500 records due to performance issue implement paging due to that reason 
        var NumberOfAnswerPages = 0; //this variable holds number of data pages need to retrieve - temporary
        var ParentSurveyIdstoCreateChildSurveys = []; // This array contains survey template ids which use to create child surveys
        var SurveyStatus = []; //This contains survey status values and display names - initialize in document on load

        var QuestionTypes = new Object();
        QuestionTypes.List = 213020000;
        QuestionTypes.Integer = 213020002;
        QuestionTypes.MultiLineText = 213020003;
        QuestionTypes.CheckBox = 100000000;
        QuestionTypes.DateTime = 213020006;
        QuestionTypes.Currency = 100000001;
        QuestionTypes.TrueFalse = 100000003;
        QuestionTypes.MultiCheckBox = 100000002;
        QuestionTypes.GraphicalList = 213020004;
        QuestionTypes.DisplayImage = 213020008;
        QuestionTypes.Label = 213020005;
        QuestionTypes.ShowChildSurvey = 213020010;
        QuestionTypes.ImageCapture = 213020009;
        QuestionTypes.Lookup = 213020007;
        QuestionTypes.CaptureScore = 213020011;
        QuestionTypes.Text = 213020001;
        QuestionTypes.Decimal = 213020012;
        QuestionTypes.Calculated = 213020013;
        QuestionTypes.Signature = 213020014;

        function writeError(text) {
            var error = document.getElementById("temp");
        }

        function HideorShowTab(_isShow, _tabName) {

            MobileCRM.UI.EntityForm.requestObject
                (function (entityForm) {
                    if (entityForm === undefined)
                        throw new MobileCrmException("Exception was thrown :\n \nentityForm undefined.");

                    // FIRST OPTION
                    for (var i in entityForm.controllers) {

                        if (entityForm.controllers[i].view !== undefined)
                            var view = entityForm.controllers[i].view;
                        else
                            continue;
                        if (view.name === _tabName) {
                            view.isVisible = _isShow;
                            return;
                        }

                    }
                    var assocViews = entityForm.associatedViews;
                    for (var i in assocViews) {
                        if (assocViews[i].listView !== undefined && assocViews[i].llistView.name === _tabName) {
                            var view = assocViews[i].listView.isVisible = _isShow;
                            return;
                        }
                        else
                            continue;

                    }
                    var detailViews = entityForm.detailViews;
                    for (var i in detailViews) {
                        if (detailViews[i] !== undefined && detailViews[i].name === _tabName) {
                            var view = detailViews[i].isVisible = _isShow;
                            return;
                        }
                        else
                            continue;
                    }
                }, MobileCRM.bridge.alert, null
                );
        }

        /*
        Description : As tab can work online as well as offline.So, we will validatte license information when user is in online mode.
        License inforamtion is stored in ebecssvy_validatelicensing entity.
        Retriving ebecssvy_validatelicensing entity records to know whether license is expired or not.
        ebecssvy_isvalidatelicense = true    indicates license is not expired.
        ebecssvy_isvalidatelicense = false    indicates license is expired.
        */
        function validateLicenseOnline() {
            var _ebecsLicense = "<fetch version='1.0' resultformat='DynamicEntities' output-format='xml-platform' mapping='logical' distinct='false'>" +
                "<entity name='ebecssvy_validatelicensing'>" +
                "<attribute name='ebecssvy_validatelicensingid' />" +
                "<attribute name='ebecssvy_isvalidatelicense' />" +
                "<order attribute='ebecssvy_name' descending='false' />" +
                "</entity>" +
                "</fetch>";

            MobileCRM.FetchXml.Fetch.executeFromXML(_ebecsLicense, function (data) {
                if (data != null && data.length > 0) {
                    //MobileCRM.bridge.alert("Inside online license code");
                    var _responseRec = new MobileCRM.DynamicEntity("ebecssvy_validatelicensing", data[0].id);
                    var _isValidateLincense = "false";
                    _isValidateLincense = data[0].properties["ebecssvy_isvalidatelicense"] != null ? data[0].properties["ebecssvy_isvalidatelicense"].toString() : "false";
                    var props = _responseRec.properties;
                    if (_isValidateLincense == "false")
                        props.ebecssvy_isvalidatelicense = true;
                    else
                        props.ebecssvy_isvalidatelicense = false;
                    _responseRec.save(
                        function (error) {
                            if (error) {
                                if (error.indexOf("License Key required for Survey Solution, Contact eBecs") != -1)
                                    MobileCRM.bridge.alert("License Key required for Survey Solution, Contact eBecs");
                                else if (error.indexOf("OrganizationId Is Not Valid.") != -1)
                                    MobileCRM.bridge.alert("OrganizationId Is Not Valid.");
                                else if (error.indexOf("License Expired, Kindly contact Publisher.") != -1)
                                    MobileCRM.bridge.alert("License Expired, Kindly contact Publisher.");
                                else if (error.indexOf("Please submit License Key.") != -1)
                                    MobileCRM.bridge.alert("Please submit License Key.");
                                else
                                    MobileCRM.bridge.alert("Please submit License Key.");
                                MobileCRM.Bridge.prototype.closeForm();
                                removePanels();
                            }
                            else {
                                // callback is called in scope of newly created MobileCRM.DynamicEntity object; thus we can access the data using "this" keyword
                                removePanels();
                                executeFurther();
                            }
                        }
                    );
                }
                else {
                    var _responseRec = MobileCRM.DynamicEntity.createNew("ebecssvy_validatelicensing");
                    _responseRec.save(
                        function (error) {
                            if (error) {
                                if (error.indexOf("License Key required for Survey Solution, Contact eBecs") != -1)
                                    MobileCRM.bridge.alert("License Key required for Survey Solution, Contact eBecs");
                                else if (error.indexOf("OrganizationId Is Not Valid.") != -1)
                                    MobileCRM.bridge.alert("OrganizationId Is Not Valid.");
                                else if (error.indexOf("License Expired, Kindly contact Publisher.") != -1)
                                    MobileCRM.bridge.alert("License Expired, Kindly contact Publisher.");
                                else if (error.indexOf("Please submit License Key.") != -1)
                                    MobileCRM.bridge.alert("Please submit License Key.");
                                else
                                    MobileCRM.bridge.alert("Please submit License Key.");
                                MobileCRM.Bridge.prototype.closeForm();
                                removePanels();
                            }
                            else {
                                // callback is called in scope of newly created MobileCRM.DynamicEntity object; thus we can access the data using "this" keyword
                                removePanels();
                                executeFurther();
                            }
                        }
                    );
                }

            }, function (error) {
                MobileCRM.bridge.alert('An error occurred: ' + error);
                MobileCRM.Bridge.prototype.closeForm();
                removePanels();
            }, null);
        }

        //Licnese validation while user in offline mode
        function validateLicenseOffline() {
            var _ebecsLicense = "<fetch version='1.0' resultformat='DynamicEntities' output-format='xml-platform' mapping='logical' distinct='false'>" +
                "<entity name='ebecssvy_validatelicensing'>" +
                "<attribute name='ebecssvy_validatelicensingid' />" +
                "<attribute name='ebecssvy_isvalidatelicense' />" +
                "<order attribute='ebecssvy_name' descending='false' />" +
                "</entity>" +
                "</fetch>";

            MobileCRM.FetchXml.Fetch.executeFromXML(_ebecsLicense, function (data) {
                if (data != null && data.length > 0) {
                    //MobileCRM.bridge.alert("Inside offline license code");
                    removePanels();
                    executeFurther();
                }
                else {
                    MobileCRM.bridge.alert("Please submit License Key.");
                    MobileCRM.Bridge.prototype.closeForm();
                    removePanels();
                }

            }, function (error) {
                MobileCRM.bridge.alert('An error occurred: ' + error);
                MobileCRM.Bridge.prototype.closeForm();
                removePanels();
            }, null);
        }

        //Accessing current user information and application version
        function executeFurther() {
            onSave();
            MobileCRM.Configuration.requestObject(
                function (config) {
                    var settings = config.settings;
                    _CurrentUserId = settings.systemUserId;
                    GetUserName(_CurrentUserId);
                    AppVersion = config.applicationVersion;
                },
                function (err) {
                    MobileCRM.bridge.alert('An error occurred: ' + err);
                },
                null
            );
            //responsesRelatedToQuestion = [];
            $("#imgServey").css("display", "none");
            getSelectedSurvey();

            //document.getElementById('nextid').disabled = true;
        }

        //Can predict whether user is accessing through online mode or offline mode.
        function OnLoad() {
            //  MobileCRM.bridge.enableDebug();
            // debugger;
            Platform = MobileCRM.bridge.platform;
            showLoadingMessage_Process("Fetching data");

            MobileCRM.Configuration.requestObject(
                function (config) {
                    isOnline = config.isOnline;
                    if (isOnline.toString() == "true")
                        executeFurther(); // validateLicenseOnline();
                    else
                        executeFurther();   //validateLicenseOffline();
                },
                function (err) {
                    MobileCRM.bridge.alert('An error occurred: ' + err);
                    removePanels();
                },
                null
            );
        }

        function ConstructSurveyStatusArray() {
            SurveyStatus = [];

            var active = new Object();
            active.value = 1;
            active.DisplayName = "Active";
            SurveyStatus.push(active);

            var scheduled = new Object();
            scheduled.value = 213020000;
            scheduled.DisplayName = "Scheduled";
            SurveyStatus.push(scheduled);

            var notStarted = new Object();
            notStarted.value = 213020002;
            notStarted.DisplayName = "Not Started";
            SurveyStatus.push(notStarted);

            var inProgress = new Object();
            inProgress.value = 213020003;
            inProgress.DisplayName = "In Progress";
            SurveyStatus.push(inProgress);

            var completed = new Object();
            completed.value = 213020001;
            completed.DisplayName = "Completed";
            SurveyStatus.push(completed);

            var inReview = new Object();
            inReview.value = 213020004;
            inReview.DisplayName = "In Review";
            SurveyStatus.push(inReview);
        }

        //Retrieves selected survey template
        function getSurveyTemplate(templateId) {
            var templateFetch = "<fetch resultformat='DynamicEntities' version='1.0' output-format='xml-platform' mapping='logical' distinct='false'>" +
                "<entity name='ebecssvy_survey'>" +
                "<attribute name='ebecssvy_surveyid' />" +
                "<attribute name='ebecssvy_name' />" +
                "<attribute name='statuscode' />" +
                "<attribute name='ebecssvy_showsignatureonsurvey' />" +
                "<attribute name='ebecssvy_scoringrule' />" +
                "<attribute name='ebecssvy_scoring' />" +
                "<attribute name='ebecssvy_decimalseperator' />" +
                "<attribute name='ebecssvy_thousandseparator' />" +
                "<order attribute='ebecssvy_name' descending='false' />" +
                "<filter type='and'>" +
                "<condition attribute='ebecssvy_surveyid' operator='eq' uiname='External Timber Door Survey' uitype='ebecssvy_survey' value='" + templateId + "' />" +
                "</filter>" +
                "</entity>" +
                "</fetch>";
            MobileCRM.FetchXml.Fetch.executeFromXML(templateFetch, function (data) {
                if (data != null && data.length > 0) {
                    surveyTemplate = data[0];
                    var status = data[0].properties["statuscode"] != null ? data[0].properties["statuscode"].toString() : "";
                    //
                    var IssignatureShow = data[0].properties["ebecssvy_showsignatureonsurvey"] != null ? data[0].properties["ebecssvy_showsignatureonsurvey"].toString() : "";
                    templateScoring = data[0].properties["ebecssvy_scoring"] != null ? data[0].properties["ebecssvy_scoring"].toString() : "false";
                    templateScoringRule = data[0].properties["ebecssvy_scoringrule"] != null ? data[0].properties["ebecssvy_scoringrule"].toString() : "";
                    var decimalSeperatorOptionSet = data[0].properties["ebecssvy_decimalseperator"] != null ? data[0].properties["ebecssvy_decimalseperator"].toString() : "0";
                    var thousandSeperatorOptionSet = data[0].properties["ebecssvy_thousandseparator"] != null ? data[0].properties["ebecssvy_thousandseparator"].toString() : "0";

                    if (decimalSeperatorOptionSet == "213020001") {
                        DecimalSeperator = ",";
                    }

                    //MobileCRM.bridge.alert('thousandSeperatorOptionSet ' + thousandSeperatorOptionSet);
                    if (thousandSeperatorOptionSet == "213020001") {
                        ThousandSeperator = ",";
                    } else if (thousandSeperatorOptionSet == "213020000") {
                        ThousandSeperator = " ";
                    } else if (thousandSeperatorOptionSet == "213020002") {
                        ThousandSeperator = ".";
                    } else {
                        ThousandSeperator = ",";
                    }
                    //MobileCRM.bridge.alert('thousandSeperator ' + ThousandSeperator);
                    if (status == "213020000" || status == "213020002") {//Published
                        GetResponsesForCS();
                        if (IssignatureShow != "" && IssignatureShow == "true")
                            HideorShowTab(true, "Signature");
                        else
                            HideorShowTab(false, "Signature");
                    }
                    else {
                        MobileCRM.bridge.alert("Selected Template is not Published or In Design");
                        MobileCRM.Bridge.prototype.closeForm();
                    }
                }
            }, function (error) {
                MobileCRM.bridge.alert('Template: An error occurred: ' + error);
                removePanels();
            }, null);
        }

        /*
        Description : Current conducted survey status code will be upated  and stores information of associated survey template
        */
        function getSelectedSurvey() {
            isRetake = false;
            //MobileCRM.bridge.enableDebug();
            var isNew = false;
            MobileCRM.UI.EntityForm.requestObject(function (entityForm) {
                var statusReason = entityForm.entity.properties["statuscode"];
                statusChangeCaptured = statusReason;
                //status update on onload
                //statusReason == 213020003 - In Progress
                //statusReason == 213020002 - Not Started
                //statusReason == 213020000 - Scheduled
                //statusReason == 213020001 - Completed
                //statusReason == 213020004 - In-Review
                if (statusReason == 213020003 || statusReason == 213020002 || statusReason == 213020000 || statusReason == 213020001 || statusReason == 213020004) {//in pr NOT ST schedu

                    if (statusReason != 213020001 && statusReason != 213020004) {
                        HideorShowTab(true, "Take Survey");
                    }

                    _CConductedSurveyId = entityForm.entity.id;
                    _CConductedSurveyName = entityForm.entity.primaryName;

                    //for retake surveys set last seen tab index to 0
                    //this avoid user retake survey from the end
                    if (statusReason == 213020001) {
                        lastSeenTabIndex = 0;
                        isRetake = true;
                        //updateConductedSurveyStatus(213020004);
                    }
                    else if (entityForm.entity.properties["ebecssvy_lastseensurveytabindex"] != null) {
                        lastSeenTabIndex = entityForm.entity.properties["ebecssvy_lastseensurveytabindex"];
                    }

                    if (entityForm.entity.properties["ebecssvy_traversedtablist"] != null) {
                        var tablist = entityForm.entity.properties["ebecssvy_traversedtablist"];
                        traversedTabList = JSON.parse(tablist);
                    }

                    if (statusReason == 213020001 || statusReason == 213020004) {
                        isRetake = true;
                        NumberOfReviews = 1;
                        if (entityForm.entity.properties["ebecssvy_numberofreviews"] != null && typeof entityForm.entity.properties["ebecssvy_numberofreviews"] != "undefined") {
                            NumberOfReviews = entityForm.entity.properties["ebecssvy_numberofreviews"] + 1;
                        }
                    }

                    if (entityForm.entity.isNew)
                        isNew = entityForm.entity.isNew;
                    if (statusChangeCaptured != 0 && statusChangeCaptured == 213020000 && statusChangeCaptured != 213020002 && statusChangeCaptured != 213020001 && statusChangeCaptured != 213020004) {//shecdule
                        if (!isNew)
                            updateConductedSurveyStatus(213020002, null);//not started
                    }

                    if (entityForm.entity.properties["ebecssvy_surveytemplateid"] != null) {
                        _surveyName = entityForm.entity.properties["ebecssvy_surveytemplateid"].primaryName;
                        SurveyId = entityForm.entity.properties["ebecssvy_surveytemplateid"].id;
                        document.getElementById("SurveyName").innerHTML = _surveyName;
                        ConstructSurveyStatusArray();
                        getSurveyTemplate(SurveyId);
                    }

                    else {
                        if (!isNew)
                            MobileCRM.bridge.alert("Survey Template is not selected on Conducted Survey\n Kindly select and take survey");
                        HideorShowTab(false, "Take Survey");
                        HideorShowTab(false, "Image Survey");
                    }
                }
                else {
                    if (AppVersion != null && parseFloat(AppVersion) < 8) {
                        HideorShowTab(false, "Take Survey");
                        HideorShowTab(false, "Image Survey");
                    }
                }
            }, function (err) {
                MobileCRM.bridge.alert('An error occurred: ' + err);
                removePanels();
            }, null);
        }

        // Retrieves and stores user name information
        function GetUserName(_userId) {

            var _userFetch = "<fetch resultformat='DynamicEntities' version='1.0' output-format='xml-platform' mapping='logical' distinct='true'>" +
                "<entity name='systemuser'>" +
                "<attribute name='fullname' />" +
                "<order attribute='fullname' descending='false' />" +
                "<filter type='and'>" +
                "<condition attribute='systemuserid' operator='eq' uitype='systemuser' value='" + _userId + "' />" +
                "</filter>" +
                "</entity>" +
                "</fetch>";
            MobileCRM.FetchXml.Fetch.executeFromXML(_userFetch, function (data) {
                if (data != null && data.length > 0) {
                    _CurrentUserName = data[0].primaryName;
                }
            }, function (error) {
                MobileCRM.bridge.alert('UserFunction: An error occurred: ' + error);
                removePanels();
            }, null);
        }

        function Views() {

            var lookupForm = new MobileCRM.UI.LookupForm()
            lookupForm.allowedViews = null; // Allow all views
            lookupForm.allowNull = true; // Allow choosing empty value
            lookupForm.entities = ["ebecssvy_survey"]; // Allow only accounts
            //lookupForm.show(onLookupFinished, MobileCRM.bridge.alert, null);

        }

        //All the survey information will be cleared and loads.
        function onLookupFinished(surveyRef) {

            SurveyId = surveyRef.id;
            _surveyName = surveyRef.primaryName != null ? surveyRef.primaryName : "";
            document.getElementById("SurveyName").innerHTML = _surveyName;
            MobileCRM.UI.EntityForm.requestObject(function (entityForm) {
                showQuestionsList = new Array();
                hideQuestionsList = new Array();
                showSectionList = new Array();
                hideSectionList = new Array();
                showTabList = new Array();
                hideTabList = new Array();
                makeRequiredList = new Array();
                sourceEntityName = entityForm.entity.entityName;
                sourceEntityId = entityForm.entity.id;
                GetTabs();
            }, function (err) {
                MobileCRM.bridge.alert('An error occurred: ' + err);
                removePanels();
            }, null);
        }

        // Gets all the survey tabs which are associated to current survey template.
        function GetTabs() {

            var FetchXml = "<fetch resultformat='DynamicEntities' version='1.0' output-format='xml-platform' mapping='logical' distinct='true'>" +
                "<entity name='ebecssvy_tabs'>" +
                "<attribute name='ebecssvy_tabsid' />" +
                "<attribute name='ebecssvy_name' />" +
                "<attribute name='createdon' />" +
                "<attribute name='ebecssvy_showdesigner' />" +
                "<attribute name='ebecssvy_order' />" +
                "<attribute name='ebecssvy_scoring'/>" +
                "<attribute name='ebecssvy_scoringrule'/>" +
                "<attribute name='ebecssvy_showtabscore'/>" +
                "<order attribute='ebecssvy_order' descending='false' />" +
                "<filter type='and'>" +
                "<condition attribute='ebecssvy_surveyid' operator='eq'  uitype='ebecssvy_survey' value='" + SurveyId + "' />" +
                "</filter>" +
                "</entity>" +
                "</fetch>";
            MobileCRM.FetchXml.Fetch.executeFromXML(FetchXml, function (data) { tabSuccessCallBack(data) }, function (error) { tabErrorCallBack(error) }, null);
        }

        function tabSuccessCallBack(data) {
            if (data != null && data.length > 0) {
                QuestionsArray = null;
                Result_Tabs = data;
                if (j >= 0) {
                    if (lastSeenTabIndex != 0) {
                        j = lastSeenTabIndex;
                    }
                    GetSurveyResponses();
                    GetQuestions(Result_Tabs[j]);
                    //MobileCRM.bridge.alert("tabSuccess StatusProgress " + j)
                    showStatusProgress(j);
                }
            }
            else {
                MobileCRM.bridge.alert("Selected Template don't have any tabs");
                MobileCRM.Bridge.prototype.closeForm();
            }
        }

        function saveTraversedTabList(tc, showTab, visited) {
            var foundIndex = traversedTabList.findIndex(tab => (tab.TabIndex == tc.toString()));
            if (foundIndex !== -1) {
                if (!visited) {
                    visited = traversedTabList[foundIndex].Visited;
                }
                if (showTab != traversedTabList[foundIndex].ShowTab || visited != traversedTabList[foundIndex].Visited) {
                    var obj = {
                        'TabIndex': tc.toString(),
                        'TabId': Result_Tabs[tc].properties["ebecssvy_tabsid"],
                        'ShowTab': showTab,
                        'Visited': visited
                    }
                    traversedTabList.splice(foundIndex, 1);
                    traversedTabList.push(obj);
                    updateTraversedTabList(JSON.stringify(traversedTabList));
                }
            }
            else {
                var obj = {
                    'TabIndex': tc.toString(),
                    'TabId': Result_Tabs[tc].properties["ebecssvy_tabsid"],
                    'ShowTab': showTab,
                    'Visited': visited
                }
                traversedTabList.push(obj);
                updateTraversedTabList(JSON.stringify(traversedTabList));
            }
        }

        function GetIndexofTabId(tabId) {
            //MobileCRM.bridge.alert("GetIndexofTabId tabId : " + tabId);
            return Result_Tabs.findIndex(t => t.properties["ebecssvy_tabsid"] == tabId.toString());
        }

        /****************************************************************
        * call progress_bar.js ShowProgressBar *
        *****************************************************************/
        function showStatusProgress(tc) {
            var currentTabId = Result_Tabs[tc].properties["ebecssvy_tabsid"];
            var tabnameList = Result_Tabs;

            //remove already skipped tabs
            var initialRemoveIdList = [];
            var traversedIndexList = [];
            var visitedTabIdList = [];
            if (traversedTabList != null && traversedTabList != undefined && traversedTabList.length > 0) {
                initialRemoveIdList = traversedTabList.filter(t => t.ShowTab == 'false').map(t => t.TabId);
                visitedTabIdList = traversedTabList.filter(t => t.Visited == 'true').map(t => t.TabId);
            } 
            if (initialRemoveIdList != null && initialRemoveIdList.length >0) {
                for (var i = 0; i <= (initialRemoveIdList.length - 1) ; i++) {
                    tabnameList = tabnameList.filter(t => t.properties["ebecssvy_tabsid"] != initialRemoveIdList[i].toString());
                }
            }
            var currentTabIndex = tabnameList.findIndex(t => t.properties["ebecssvy_tabsid"] == currentTabId.toString());
            
            if (tabnameList.length > 1 && currentTabIndex != -1) {
                var tab3list;
                if (currentTabIndex == 0) {
                    tab3list = [tabnameList[currentTabIndex], tabnameList[currentTabIndex + 1]];
                    if (tabnameList[currentTabIndex + 2] != undefined) {
                        tab3list.push(tabnameList[currentTabIndex + 2]);
                    }
                }
                else if (currentTabIndex == tabnameList.length - 1) {
                    //tab3list = [tabnameList[currentTabIndex - 1], tabnameList[currentTabIndex]];
                    if (tabnameList[currentTabIndex - 2] != undefined) {
                        tab3list = [tabnameList[currentTabIndex - 2], tabnameList[currentTabIndex - 1], tabnameList[currentTabIndex]];
                    }
                    else {
                        tab3list = [tabnameList[currentTabIndex - 1], tabnameList[currentTabIndex]];
                    }
                }
                else if (currentTabIndex > 0) {
                    tab3list = [tabnameList[currentTabIndex - 1], tabnameList[currentTabIndex], tabnameList[currentTabIndex + 1]];
                }

                if (visitedTabIdList != null && visitedTabIdList.length >0) {
                    for (var i = 0; i < tab3list.length; i++) {
                        if (visitedTabIdList.indexOf(tab3list[i].properties["ebecssvy_tabsid"]) != -1) {
                            traversedIndexList.push(i.toString());
                        }
                    }
                }
                var currentTabName = tabnameList[currentTabIndex].properties["ebecssvy_name"];
                tab3list = tab3list.map(a => a.properties["ebecssvy_name"]);

                ShowProgressBar(tab3list, currentTabName, isRetake, traversedIndexList, 'sas-progressbar-wrapper');
            }
        }

        function tabErrorCallBack(error) {
            if (typeof alert != "undefined") {
                MobileCRM.bridge.alert("Tab Error : " + error);
                removePanels();
            }
        }

        //Retrieves questions which are related to current tab
        function GetQuestions(data) {
            GLArray = [];
            BSGLArray = [];
            LookupArray = [];
            BSLookupArray = [];
            noAnswersArray = [];
            if ($('#divLoadingPanel').length > 0)
                $('#divLoadingPanel').show();
            ShowOrHideIndicator("UnSavedDiv", "none");
            ShowOrHideIndicator("SavedDiv", "none");
            MobileCRM.UI.EntityForm.requestObject(function (entityForm) {
                /// <param name='entityForm' type='MobileCRM.UI.EntityForm'>current entity form</param>
                var props = entityForm.entity.properties;
                var CSTabObject = new Object();
                CSTabObject.TabId = data.properties["ebecssvy_tabsid"];
                CSTabObject.TabName = data.properties["ebecssvy_name"];
                CSTabObject.CSId = _CConductedSurveyId;
                CSTabObject.CSName = _CConductedSurveyName;
                props.ebecssvy_responseguid = CSTabObject.CSId + "@" + CSTabObject.CSName + "@" + CSTabObject.TabId + "@" + CSTabObject.TabName;


            }, MobileCRM.bridge.alert, null);
            tabIsShowDesigner = "false";
            _actionObject = null;
            IsPerfromAction = false;
            tabIsShowDesigner = data.properties["ebecssvy_showdesigner"] != null ? data.properties["ebecssvy_showdesigner"].toString() : "false";
            var FetchXml_Qes = "<fetch resultformat='DynamicEntities' version='1.0' output-format='xml-platform' mapping='logical' distinct='false'>" +
                "<entity name='ebecssvy_questions'>" +
                "<attribute name='ebecssvy_questionsid' />" +
                "<attribute name='ebecssvy_name' />" +
                "<attribute name='ebecssvy_fetchxml' />" +
                "<attribute name='ebecssvy_entityviewname' />" +
                "<attribute name='ebecssvy_lookupentityname' />" +
                "<attribute name='ebecssvy_displayimage' />" +
                "<attribute name='createdon' />" +
                "<attribute name='ebecssvy_image' />" +
                "<attribute name='ebecssvy_mandatorywhenvisible' />" +
                "<attribute name='ebecssvy_imagewidthpx' />" +
                "<attribute name='ebecssvy_imageheightpx' />" +
                "<attribute name='ebecssvy_showasdefault' />" +
                "<attribute name='ebecssvy_attributetype' />" +
                "<attribute name='ebecssvy_inputcode' />" +
                "<attribute name='ebecssvy_disablemanualentry' />" +
                "<attribute name='ebecssvy_questionorderinsection' />" +
                "<attribute name='ebecssvy_scoring' />" +
                "<attribute name='ebecssvy_weight' />" +
                "<attribute name='ebecssvy_tabsid' />" +
                "<attribute name='ebecssvy_currency' />" +
                "<attribute name='ebecssvy_symbol' />" +
                "<attribute name='ebecssvy_numberofdecimalplaces' />" +
                "<attribute name='ebecssvy_readonlyquestion' />" +
                "<attribute name='ebecssvy_targetrelatedattribute' />" +
                "<attribute name='ebecssvy_attributename' />" +
                "<attribute name='ebecssvy_entityname' />" +
                "<attribute name='ebecssvy_calculatedformula' />" +
                "<attribute name='ebecssvy_calculatedformulareadonly' />" +
                "<attribute name='ebecssvy_relatedquestion' />" +
                "<attribute name='ebecssvy_filterdfetchxml' />" +
                "<attribute name='ebecssvy_lookupentityprimaryname' />" +
                "<attribute name='ebecssvy_textbold' />" +
                "<attribute name='ebecssvy_textitalic' />" +
                "<attribute name='ebecssvy_textsize' />" +
                "<attribute name='ebecssvy_textunderline' />" +
                "<attribute name='ebecssvy_labelquestiontext' />" +
                "<order attribute='ebecssvy_questionorder' descending='false' />" +
                "<order attribute='ebecssvy_questionorderinsection' descending='false' />" +
                "<filter type='and'>" +
                "<condition attribute='ebecssvy_tabsid' operator='eq'  uitype='ebecssvy_tabs' value='" + data.properties["ebecssvy_tabsid"] + "' />" +
                "</filter>" +
                "<link-entity name='ebecssvy_surveysections' from='ebecssvy_surveysectionsid' to='ebecssvy_sectionname' alias='ac' visible='false' link-type='outer'>" +
                "<order attribute='ebecssvy_sectionorder' descending='false' />" +
                "<attribute name='ebecssvy_sectionorder' />" +
                "<attribute name='ebecssvy_surveysectionsid' />" +
                "<attribute name='ebecssvy_name' />" +
                "<attribute name='ebecssvy_showasdefault' />" +
                "</link-entity>" +
                "</entity>" +
                "</fetch>";
            MobileCRM.FetchXml.Fetch.executeFromXML(FetchXml_Qes, function (data) { QuesSuccessCallBack(data) }, function (error) { QuesErrorCallBack(error) }, null);
        }

        function QuesSuccessCallBack(data) {
            if (data != null && data.length > 0) {
                questionIndex = 0;
                QuestionsArray = data;

                var currentTabId = Result_Tabs[j].properties["ebecssvy_tabsid"];

                $.each(data, function (e) {
                    var questionId = this.properties["ebecssvy_questionsid"];
                    //MobileCRM.bridge.alert("imageWidth : " + this.properties["ebecssvy_imagewidthpx"]);
                    var addingQuestion = true;

                    if (tabQuestions != null && tabQuestions.length > 0 && tabQuestions.filter(function (e) { return e.questionid == questionId; }).length > 0) {
                        addingQuestion = false;
                    }

                    if (addingQuestion) {
                        var qusObj = new Object();

                        qusObj.tabid = currentTabId;
                        qusObj.questionid = questionId;
                        qusObj.scoring = this.properties["ebecssvy_scoring"];

                        tabQuestions.push(qusObj);
                    }
                });

                LoadQuestionRelatedActions(currentTabId);
                //MobileCRM.bridge.alert("imageWidth : " + QuestionsArray[questionIndex].ebecssvy_imagewidthpx);
                //GetAnswers(QuestionsArray[questionIndex]);
                GetAllAnswersCountByTabsQuestions();

            } else {
                MobileCRM.bridge.alert("There are no questions in this Tab");
                showFinish();
                removePanels();
                MobileCRM.Bridge.prototype.closeForm();
            }
        }
        function QuesErrorCallBack(error) {
            if (typeof alert != "undefined") {

                if (error != undefined && error != "null" && error.includes("Failed cmd")) {
                    MobileCRM.bridge.alert("Question Error : " + error.toString().split("Failed cmd")[0]);
                } else {
                    MobileCRM.bridge.alert("Question Error : " + error);
                }
                removePanels();
            }
        }

        /************************************************************
        * GetQuestionsForSurveyScore *
        * This function used to retrieve questions for survey score *
        *************************************************************/
        function GetQuestionsForSurveyScore(tabsData, isSave) {

            var tabIdValues = "";

            $.each(tabsData, function () {
                tabIdValues = tabIdValues + "<value>" + this.properties["ebecssvy_tabsid"] + "</value>";
            });

            var FetchXml_Qes = "<fetch resultformat='DynamicEntities' version='1.0' output-format='xml-platform' mapping='logical' distinct='false'>" +
                "<entity name='ebecssvy_questions'>" +
                "<attribute name='ebecssvy_questionsid' />" +
                "<attribute name='ebecssvy_name' />" +
                "<attribute name='ebecssvy_scoring' />" +
                "<attribute name='ebecssvy_weight' />" +
                "<attribute name='ebecssvy_tabsid' />" +
                "<order attribute='ebecssvy_questionorder' descending='false' />" +
                "<order attribute='ebecssvy_questionorderinsection' descending='false' />" +
                "<filter type='and'>" +
                "<condition attribute='ebecssvy_tabsid' operator='in'  uitype='ebecssvy_tabs' >" +
                tabIdValues +
                "</condition>" +
                "</filter>" +
                "</entity>" +
                "</fetch>";
            MobileCRM.FetchXml.Fetch.executeFromXML(FetchXml_Qes,
                function (data) {
                    if (data != null && data.length > 0) {
                        $.each(data, function (e) {

                            var questionId = this.properties["ebecssvy_questionsid"];
                            var addingQuestion = true;

                            if (tabQuestions != null && tabQuestions.length > 0 && tabQuestions.filter(function (e) { return e.questionid == questionId; }).length > 0) {
                                addingQuestion = false;
                            }

                            if (addingQuestion) {
                                var qusObj = new Object();

                                qusObj.tabid = this.properties["ebecssvy_tabsid"].id;
                                qusObj.questionid = questionId;
                                qusObj.scoring = this.properties["ebecssvy_scoring"];

                                tabQuestions.push(qusObj);
                            }
                        });

                        GenerateSurveyTotalScoreByRule(isSave);
                    }
                },

                function (error) { MobileCRM.bridge.alert("Question Error : " + error); }, null);
        }

        /************************************************************
        * GetAllAnswersCountByTabsQuestions *
        * This function used to all answers count and retrieve data *
        *************************************************************/
        function GetAllAnswersCountByTabsQuestions() {
            NumberOfAnswerPages = 0;
            //MobileCRM.bridge.alert("GetAllAnswersCountByTabsQuestions ");
            Result_Ans = [];
            var FetchXml_Ans = "<fetch resultformat='DynamicEntities' version='1.0' output-format='xml-platform' mapping='logical' no-lock='true' aggregate='true' returntotalrecordcount='true' >" +
                "<entity name='ebecssvy_answers'>" +
                "<attribute name='ebecssvy_answersid' alias='recordcount' aggregate='count'  />" +
                "<filter type='and'>" +
                "<condition attribute='ebecssvy_questionsid' operator='in'>";
                for (var qIndex = 0; qIndex < QuestionsArray.length; qIndex++) {
                    FetchXml_Ans = FetchXml_Ans + "<value  uitype='ebecssvy_questions'>" + QuestionsArray[qIndex].id + "</value>";
                }
            FetchXml_Ans = FetchXml_Ans + "</condition></filter></entity></fetch>";

            MobileCRM.FetchXml.Fetch.executeFromXML(FetchXml_Ans,
                function (data) {                    

                    if (data != null && data != undefined && data.length > 0) {                        
                        var recordsCount = data[0].properties["recordcount"];

                        if (recordsCount > 0) {
                            NumberOfAnswerPages = recordsCount / DataPagingSize;
                            //MobileCRM.bridge.alert("Aggregate Answer Count : " + recordsCount + " NumberOfAnswerPages: " + NumberOfAnswerPages + " recordsCount / DataPagingSize: " + (recordsCount / DataPagingSize));
                            var questionIds = [];
                            for (var qIndex = 0; qIndex < QuestionsArray.length; qIndex++) {
                                //MobileCRM.bridge.alert("QuestionId : " + QuestionsArray[qIndex].id);
                                questionIds.push(QuestionsArray[qIndex].id);
                            }

                            var answers = new MobileCRM.FetchXml.Entity('ebecssvy_answers');
                            answers.addAttribute('ebecssvy_answersid');
                            answers.addAttribute('ebecssvy_name');
                            answers.addAttribute('createdon');
                            answers.addAttribute('ebecssvy_questionsid');
                            answers.addAttribute('ebecssvy_scorevalue');
                            answers.addAttribute('ebecssvy_min');
                            answers.addAttribute('ebecssvy_max');
                            answers.addAttribute('ebecssvy_answercrmvalue');
                            answers.orderBy("ebecssvy_order", false);

                            var filter = new MobileCRM.FetchXml.Filter();
                            filter.isIn("ebecssvy_questionsid", questionIds);
                            answers.filter = filter;

                            var fetch = new MobileCRM.FetchXml.Fetch(answers);
                            fetch.count = DataPagingSize;
                            fetch.page = 1;

                            ExecuteAnswerPaggingFetch(fetch, 1);

                        } else {
                            //MobileCRM.bridge.alert("1 : " );
                            Result_Ans = [];
                            SurveyAnswersActionsArray = Result_Ans;
                            EvaluateHideTabsWhileLoadingSurvey();
                            EvaluateQusRelatedActionsForTabShowHide();
                            SetQesAns(Result_Tabs, Result_Ans, j);
                        }

                    } else {
                        //MobileCRM.bridge.alert("2 : ");
                        Result_Ans = [];
                        SurveyAnswersActionsArray = Result_Ans;
                        EvaluateHideTabsWhileLoadingSurvey();
                        EvaluateQusRelatedActionsForTabShowHide();
                        SetQesAns(Result_Tabs, Result_Ans, j);
                    }
                },
                function (error) {
                    MobileCRM.bridge.alert("Answer Records Retrieving Error : " + error);
                    removePanels();
                }, null);
        }

        /************************************************************
        * ExecuteAnswerPaggingFetch *
        * This function used retrieve data as paging*
        *************************************************************/
        function ExecuteAnswerPaggingFetch(fetch, page, success) {
            fetch.page = page;
            fetch.execute("DynamicEntities", function (res) {
                // iterate through results
                if (res != null && typeof res != 'undefined' && res.length > 0) {
                    for (var i = 0; i < res.length; i++) {
                        Result_Ans.push(res[i]);
                    }
                }
                //MobileCRM.bridge.alert("res.length: " + res.length + " page: " + page + " NumberOfAnswerPages: " + NumberOfAnswerPages);
                if (page > NumberOfAnswerPages) {
                    //MobileCRM.bridge.alert("Answers Received: " + Result_Ans.length);
                    removePanels();
                    SurveyAnswersActionsArray = Result_Ans;
                    EvaluateHideTabsWhileLoadingSurvey();
                    EvaluateQusRelatedActionsForTabShowHide();
                    SetQesAns(Result_Tabs, Result_Ans, j);
                    return;
                }

                ExecuteAnswerPaggingFetch(fetch, page += 1);
            }, MobileCRM.bridge.alert, null);
        }        

        /*****************************************************************************
        * Get Survey Responses
        ******************************************************************************/
        function GetSurveyResponses() {

            var _reponsesFetch = "<fetch version='1.0' resultformat='DynamicEntities' output-format='xml-platform' mapping='logical' distinct='true'>" +
                "<entity name='ebecssvy_responses'>" +
                "<attribute name='ebecssvy_responsesid' />" +
                "<attribute name='ebecssvy_name' />" +
                "<attribute name='ebecssvy_questionid' />" +
                "<attribute name='ebecssvy_surveyanswerandid' />" +
                "<attribute name='createdon' />" +
                "<order attribute='ebecssvy_name' descending='false' />" +
                "<filter type='and'>" +
                "<condition attribute='ebecssvy_conductedsurveyid' operator='eq' uitype='ebecssvy_conductedsurvey' value='" + _CConductedSurveyId + "' />" +
                "</filter>" +
                "</entity>" +
                "</fetch>";


            MobileCRM.FetchXml.Fetch.executeFromXML(_reponsesFetch, function (data) {
                SurveyResponses = data;
            },
                function (error) {
                    if (typeof alert != "undefined") {
                        MobileCRM.bridge.alert("Survey Response Retrieve Error : " + error);
                        removePanels();
                    }
                }, null);
        }

        /*****************************************************************************
        * LoadQuestionRelatedActions
        * Load question related actions
        ******************************************************************************/
        function LoadQuestionRelatedActions(tabId) {

            var Fetch = "<fetch resultformat='DynamicEntities' version='1.0' output-format='xml-platform' mapping='logical' no-lock='true' distinct='true'>" +
                "<entity name='ebecssvy_actions' >" +
                "<attribute name='ebecssvy_tab' />" +
                "<attribute name='ebecssvy_name' />" +
                "<attribute name='ebecssvy_actiontypesforquestion' />" +
                "<attribute name='ebecssvy_alertmessage' />" +
                "<attribute name='ebecssvy_customscript' />" +
                "<attribute name='ebecssvy_actions' />" +
                "<attribute name='ebecssvy_surveysection' />" +
                "<attribute name='ebecssvy_actionsid' />" +
                "<attribute name='ebecssvy_gotonextquestion' />" +
                "<attribute name='ebecssvy_relatedquestion' />" +
                "<attribute name='ebecssvy_customfiltercondition' />" +
                "<attribute name='ebecssvy_relatedentity' />" +
                "<attribute name='ebecssvy_answercolor' />" +
                "<link-entity name='ebecssvy_questions' from='ebecssvy_questionsid' to='ebecssvy_relatedquestion' link-type='inner' alias='QUS' >" +
                "<filter>" +
                "<condition attribute='ebecssvy_tabsid' operator='eq' value='" + tabId + "' />" +
                "</filter>" +
                "</link-entity>" +
                "</entity>" +
                "</fetch>";

            MobileCRM.FetchXml.Fetch.executeFromXML(Fetch, function (data) {
                if (data != null && data.length > 0) {
                    QuestionRelatedActions = data;
                } else {
                    QuestionRelatedActions = [];
                }
            });
        }

        // Survey will end by changing conducted survey status
        function Finish() {
            isFinished = true;
            //MobileCRM.bridge.alert("CCSurveyStatusChanged : " + CCSurveyStatusChanged);
            if (!SaveLast()) {
                //MobileCRM.bridge.alert("going to return");
                return;
            }

            //updateConductedSurveyStatus(213020001);
            //Save final score
            ShowFinalSurveyScore(true);

            setTimeout(CompleteSurvey, 1000);

        }

        function CompleteSurvey() {
            var CCSurvey = new MobileCRM.DynamicEntity("ebecssvy_conductedsurvey", _CConductedSurveyId);
            var props = CCSurvey.properties;
            props.statuscode = 213020001;
            props.ebecssvy_datecompleted = new Date();
            props.ebecssvy_numberofreviews = NumberOfReviews;

            CCSurvey.save(
                function (error) {
                    if (error) {
                        MobileCRM.bridge.alert("An error occurred: " + error);
                        MobileCRM.Bridge.prototype.closeForm();
                        removePanels();
                    }
                    else {
                        //MobileCRM.bridge.alert("save success");
                        CCSurveyStatusChanged = true;

                    }
                });
            //MobileCRM.Bridge.prototype.closeForm();
            MobileCRM.UI.EntityForm.saveAndClose();
        }

        // Retrives and stores responses which are associted to current conducted survey
        function GetResponsesForCS() {

            CustomFilterQuestionArray = [];
            FetchXMLQuestionArray = [];
            showQuestionsList = new Array();
            hideQuestionsList = new Array();
            showSectionList = new Array();
            hideSectionList = new Array();
            showTabList = new Array();
            hideTabList = new Array();
            makeRequiredList = new Array();
            var _reponsesFetch = "<fetch version='1.0' resultformat='DynamicEntities' output-format='xml-platform' mapping='logical' distinct='true'>" +
                "<entity name='ebecssvy_responses'>" +
                "<attribute name='ebecssvy_responsesid' />" +
                "<attribute name='ebecssvy_name' />" +
                "<attribute name='ebecssvy_questionid' />" +
                "<attribute name='ebecssvy_surveyanswerandid' />" +
                "<attribute name='createdon' />" +
                "<attribute name='ebecssvy_responsescore' />" +
                "<order attribute='ebecssvy_name' descending='false' />" +
                "<filter type='and'>" +
                "<condition attribute='ebecssvy_conductedsurveyid' operator='eq' uitype='ebecssvy_conductedsurvey' value='" + _CConductedSurveyId + "' />" +
                "</filter>" +
                "</entity>" +
                "</fetch>";
            MobileCRM.FetchXml.Fetch.executeFromXML(_reponsesFetch, function (data) {
                if (data != null && data.length > 0) {
                    for (var i = 0; i < data.length; i++) {
                        var _rQId = data[i].properties["ebecssvy_questionid"] != null ? data[i].properties["ebecssvy_questionid"].id : null;
                        var _rRId = data[i].id;
                        var _rresponseScore = data[i].properties["ebecssvy_responsescore"] != null ? data[i].properties["ebecssvy_responsescore"] : null;
                        if (_rQId != null) {
                            var result = $.grep(responsesRelatedToQuestion, function (e) {
                                return e.questionid == _rQId;
                            });
                            if (result.length <= 0) {
                                var reponseObject = new Object();
                                reponseObject.questionid = _rQId;
                                reponseObject.responseid = _rRId;
                                reponseObject.responsescore = _rresponseScore;
                                reponseObject.name = data[i].properties["ebecssvy_name"];
                                reponseObject.surveyanswerandid = data[i].properties["ebecssvy_surveyanswerandid"] != null ? data[i].properties["ebecssvy_surveyanswerandid"] : null;
                                responsesRelatedToQuestion.push(reponseObject);
                            }
                        }
                    }
                    GetTabs();
                }
                else
                    GetTabs();

            }, function (error) {
                if (typeof alert != "undefined") {
                    MobileCRM.bridge.alert("Response Error : " + error);
                    removePanels();
                }
            }, null);
        }       

        // Survey form will be built according to available data
        function SetQesAns(Result_Tabs, Result_Ans1, j) {
            var starAnsId = "";
            FilteredLookupQuestions = [];
            FetchXMLQuestionArray = [];
            //responsesRelatedToQuestion = [];
            //MobileCRM.bridge.alert("SET QUES ANS");
            //Show hide scoring related buttons and lables
            var tabScoring = Result_Tabs[j].properties["ebecssvy_scoring"];
            enableScoreTracking = Result_Tabs[j].properties["ebecssvy_showtabscore"];
            var currentTabId = Result_Tabs[j].properties["ebecssvy_tabsid"];

            if (tabScoring != null && tabScoring && enableScoreTracking != null && enableScoreTracking) {
                if ($("#tdSurveyTracking") != null) {
                    $("#tdSurveyTracking").css("display", "");
                }
            } else {
                if ($("#tdSurveyTracking") != null) {
                    $("#tdSurveyTracking").css("display", "none");
                }

                if ($("#divScoring") != null) {
                    $("#divScoring").hide();
                }
            }

            //fill filtered lookup array - this will enhance the performance
            //only questions affect to lookup call lookup filtering functions in change event
            var filteredLookupQusList = $.grep(QuestionsArray, function (obj) { return obj.properties["ebecssvy_relatedquestion"] != null && obj.properties["ebecssvy_relatedquestion"] != "" && typeof obj.properties["ebecssvy_relatedquestion"] != 'undefined' });
            //MobileCRM.bridge.alert("filteredLookupQusList : " + filteredLookupQusList + " : " + filteredLookupQusList.length);
            if (filteredLookupQusList != null && filteredLookupQusList != "" && filteredLookupQusList != 'undefined' && filteredLookupQusList.length > 0) {
                for (var i = 0; i < filteredLookupQusList.length; i++) {
                    var lookupQuestion = new Object();
                    lookupQuestion.ebecssvy_RelatedQuestion = filteredLookupQusList[i].properties["ebecssvy_relatedquestion"];
                    lookupQuestion.id = filteredLookupQusList[i].properties["ebecssvy_questionsid"];

                    FilteredLookupQuestions.push(lookupQuestion);
                }
            }
            
            for (var qIndex = 0; qIndex < QuestionsArray.length; qIndex++) {

                var Result_Ans = $.grep(Result_Ans1, function (arrayItem) {
                    return arrayItem.properties["ebecssvy_questionsid"].id === QuestionsArray[questionIndex].id
                });
                var IsShowDefault = QuestionsArray[questionIndex].properties["ebecssvy_showasdefault"] != null ? QuestionsArray[questionIndex].properties["ebecssvy_showasdefault"].toString() : null;
                var IsSectionShowDefault = QuestionsArray[questionIndex].properties["ac.ebecssvy_showasdefault"] != null ? QuestionsArray[questionIndex].properties["ac.ebecssvy_showasdefault"].toString() : null;
                var IsMandatory = QuestionsArray[questionIndex].properties["ebecssvy_mandatorywhenvisible"] != null ? QuestionsArray[questionIndex].properties["ebecssvy_mandatorywhenvisible"].toString() : null;
                IsMandatory = IsMandatory == "true" ? "true" : "false";
                var ShowQuestion = (IsShowDefault == "false") ? "style='display:none'" : "";
                var showSection = IsSectionShowDefault == "true" ? "" : "style='display:none'";
                var imgHeight = QuestionsArray[questionIndex].properties["ebecssvy_imageheightpx"] != null ? QuestionsArray[questionIndex].properties["ebecssvy_imageheightpx"].toString() : "75";
                imgHeight = imgHeight == "0" ? "75" : imgHeight;
                var imgWidth = QuestionsArray[questionIndex].properties["ebecssvy_imagewidthpx"] != null ? QuestionsArray[questionIndex].properties["ebecssvy_imagewidthpx"].toString() : "75";
                imgWidth = imgWidth == "0" ? "75" : imgWidth;
                var SectionId = QuestionsArray[questionIndex].properties["ac.ebecssvy_surveysectionsid"] != null ? QuestionsArray[questionIndex].properties["ac.ebecssvy_surveysectionsid"].toString() : null;
                var sectionName = QuestionsArray[questionIndex].properties["ac.ebecssvy_name"] != null ? QuestionsArray[questionIndex].properties["ac.ebecssvy_name"].toString() : null;
                var inputCode = QuestionsArray[questionIndex].properties["ebecssvy_inputcode"] != null ? QuestionsArray[questionIndex].properties["ebecssvy_inputcode"].toString() : "";
                var disableManualEntry = QuestionsArray[questionIndex].properties["ebecssvy_disablemanualentry"] != null ? QuestionsArray[questionIndex].properties["ebecssvy_disablemanualentry"] : false;
                var currentQuestion = QuestionsArray[questionIndex].id;
                
                if (SectionId != null) {
                    //MobileCRM.bridge.alert("IsSectionShowDefault :" + sectionName + " : " + IsSectionShowDefault);
                    if (isIdPresentInArray(showSectionList, SectionId) == "true") {
                        showSection = "";
                        IsSectionShowDefault = "true";
                        //MobileCRM.bridge.alert("IsSectionShowDefault : " + sectionName + " : " + IsSectionShowDefault);
                    }
                    if (hideSectionList.length > 0) {
                        var elementPos = hideSectionList.map(function (x) { return x.id; }).indexOf(SectionId);
                        if (elementPos != -1) {
                            showSection = "style='display:none'";
                            IsSectionShowDefault = "false";
                            $.each(responsesRelatedToQuestion, function () {
                                if (this.questionid == QuestionsArray[questionIndex].id)
                                    this.responseid = null;
                            });
                        }   
                    }                 
                    ShowQuestion = IsSectionShowDefault == "true" ? "" : "style='display:none'";
                    
                    if (IsSectionShowDefault == "false") {
                        ShowQuestion = (getQuestionShown(currentQuestion) == "false") ? "style='display:none'" : "";                        
                    }
                    else {
                        ShowQuestion = (IsShowDefault == "false") ? "style='display:none'" : "";
                        if (ShowQuestion == "style='display:none'" && getQuestionShown.length > 0)
                            ShowQuestion = (getQuestionShown(currentQuestion) == "false") ? "style='display:none'" : "";

                        if (ShowQuestion != "style='display:none'" && hideQuestionsList.length > 0) {
                            var showQuestionDynamic = getQuestionHidden(currentQuestion);
                            ShowQuestion = (showQuestionDynamic == "true") ? "style='display:none'" : "";
                            //MobileCRM.bridge.alert("showquestion 3" + ShowQuestion);
                        }                        
                    }
                }
                else {
                    if (IsShowDefault == "false") {
                        ShowQuestion = (getQuestionShown(QuestionsArray[questionIndex].id) == "false") ? "style='display:none'" : "";
                        //MobileCRM.bridge.alert("ShowQuestion 4" + ShowQuestion);
                    } else {
                        if (hideQuestionsList.length > 0) {
                            var showQuestionDynamic = getQuestionHidden(QuestionsArray[questionIndex].id);
                            ShowQuestion = (showQuestionDynamic == "true") ? "style='display:none'" : "";
                            //MobileCRM.bridge.alert("ShowQuestion 5" + ShowQuestion);
                        }
                    }
                }

                //MobileCRM.bridge.alert("Section : " + showSection + " : " + "ShowQuestion : " + ShowQuestion);
                var Tab = Result_Tabs[j].properties["ebecssvy_name"];
                var Question = QuestionsArray[questionIndex].properties["ebecssvy_name"];
                order = Result_Tabs[j].properties["ebecssvy_order"];
                AttributeType = QuestionsArray[questionIndex].properties["ebecssvy_attributetype"];
                var isSRequired = IsQuestionRequired(SectionId);
                var symbol = QuestionsArray[questionIndex].properties["ebecssvy_symbol"] != null && QuestionsArray[questionIndex].properties["ebecssvy_symbol"] != "" ? " (" + QuestionsArray[questionIndex].properties["ebecssvy_symbol"] + ")" : "";
                var readOnly = QuestionsArray[questionIndex].properties["ebecssvy_readonlyquestion"] != null ? QuestionsArray[questionIndex].properties["ebecssvy_readonlyquestion"] : false;
                
                if (AttributeType != null && AttributeType != undefined && order != null && order != undefined) {

                    if (AttributeType == QuestionTypes.List) {
                        //$('#QAConatiner').append("<tr style='display:" + ShowQuestion + "' ><td isRequired='false' class='Question' id='" + QuestionsArray[questionIndex].id + "'><label>" + (questionIndex + 1) + ".)  " + Question + "</label></td><td class='Answer' id='" + QuestionsArray[questionIndex].id + "' ><select onchange='CatchAnswer(event)' style='height:30px;' id='piclistctrl" + QuestionsArray[questionIndex].id + "' ></select></td></tr>");
                        var dynamicTable = "<div class='col-sm-4 Question' custtype='select' isRequired='" + IsMandatory + "' isshowdefault='" + IsShowDefault + "' id='"
                            + QuestionsArray[questionIndex].id + "'><label class='col-form-label'>" + Question + "</label></div><div class='Answer col-sm-8' id='" + QuestionsArray[questionIndex].id +
                            "' ><select class='form-control' onchange='CatchAnswer(event)' id='piclistctrl" + QuestionsArray[questionIndex].id + "' ></select></div>";

                        if (SectionId != null) {
                            //MobileCRM.bridge.alert("Section : " + showSection + " : " + "ShowQuestion : " + ShowQuestion);
                            var tableElement = $('#QAConatiner').find("#" + SectionId);
                            if (tableElement.length > 0) {
                                $(tableElement).append("<div class='form-group row' " + ShowQuestion + ">" + dynamicTable + "</div>");
                                //MobileCRM.bridge.alert("Section in List: " + sectionName + " : " + $('#QAConatiner').outerHTML);
                            }
                            else
                                $('#QAConatiner').append("<fieldset class='col-md-12' id='" + SectionId + "' " + showSection + "><legend>" + sectionName + "</legend><div class='form-group row' " + ShowQuestion + ">" + dynamicTable + "</div></fieldset>");
                            if (isSRequired == "true") {//<div id='" + SectionId + "'></div>
                                $($("#" + QuestionsArray[questionIndex].id).children()[0]).addClass('required');
                            }
                        }
                        else
                            $('#QAConatiner').append("<div class='form-group row' " + ShowQuestion + " >" + dynamicTable + "</div>");

                        var Opts = "";
                        if (Result_Ans != null && Result_Ans.length > 0) {
                            Opts = "<option value='abhayjlhjp'>---Select---</option>";
                            for (var i in Result_Ans) {
                                if (Result_Ans[i].properties["ebecssvy_name"] != "*") {
                                    Opts += '<option answerid=' + Result_Ans[i].id + ' value="' + Result_Ans[i].properties["ebecssvy_name"] + '">' + Result_Ans[i].properties["ebecssvy_name"] + '</option>';
                                }
                            }
                        }
                        $(Opts).appendTo($("#piclistctrl" + QuestionsArray[questionIndex].id));
                        $("select#piclistctrl" + QuestionsArray[questionIndex].id).val("abhayjlhjp");
                        //CheckResponse_Prev(QuestionsArray[questionIndex].id, SurveyId, AttributeType, "piclistctrl" + QuestionsArray[questionIndex].id);                        

                        GetTargetEntityValuesByQuestion(QuestionsArray[questionIndex].id);
                        if (IsMandatory == "true") {
                            if ($("#" + QuestionsArray[questionIndex].id).children().length > 0)
                                $($("#" + QuestionsArray[questionIndex].id).children()[0]).addClass('required');
                        }

                        if (readOnly) {
                            $("#piclistctrl" + QuestionsArray[questionIndex].id).prop("disabled", true);
                        }

                    }
                    else if (AttributeType == QuestionTypes.Text) {
                        var dynamicTable = "<div class='col-sm-4 Question' custtype='text' isRequired='" + IsMandatory + "' isshowdefault='" + IsShowDefault + "' id='" +//class='Question'
                            QuestionsArray[questionIndex].id + "'><label class='col-form-label'>" + Question + "</label></div><div class='Answer col-sm-8' id='" + QuestionsArray[questionIndex].id +//class='Answer'
                            "' ><input class='form-control' customtype='text' onchange='CatchAnswer(event)' id='TextAns" + QuestionsArray[questionIndex].id + "' customid ='" + QuestionsArray[questionIndex].id + "' type ='text'  "
                            + inputCode + " /></div>";
                        if (SectionId != null) {
                            var tableElement = $('#QAConatiner').find("#" + SectionId);
                            if (tableElement.length > 0)
                                $(tableElement).append("<div class='form-group row' " + ShowQuestion + ">" + dynamicTable + "</div>");
                            else
                                // MobileCRM.bridge.alert("Section in text: " + sectionName + " : " + $('#QAConatiner').outerHTML);
                                $('#QAConatiner').append("<fieldset class='col-md-12' id='" + SectionId + "' " + showSection + "><legend>" + sectionName + "</legend><div class='form-group row' " + ShowQuestion + ">" + dynamicTable + "</div></fieldset>");//show hide question not added
                            if (isSRequired == "true") {//<div id='" + SectionId + "'>
                                $($("#" + QuestionsArray[questionIndex].id).children()[0]).addClass('required');
                            }
                        }
                        else
                            $('#QAConatiner').append("<div class='form-group row' " + ShowQuestion + ">" + dynamicTable + "</div>");                        

                        GetTargetEntityValuesByQuestion(QuestionsArray[questionIndex].id);

                        if (IsMandatory == "true") {
                            if ($("#" + QuestionsArray[questionIndex].id).children().length > 0)
                                $($("#" + QuestionsArray[questionIndex].id).children()[0]).addClass('required');
                        }
                        $("#TextAns" + QuestionsArray[questionIndex].id).bind("keyup", function (event) {

                            if (event.target.value.length > parseInt($(event.target).attr("max"))) {
                                MobileCRM.bridge.alert("Exceeded " + $(event.target).attr("max") + " Characters");
                                $("#" + event.target.id).focus();
                                removePanels();
                                return;
                            }
                        });
                        $("#TextAns" + QuestionsArray[questionIndex].id).bind("keypress", function (event) {
                            if (event.target.value.length > parseInt($(event.target).attr("maxlength"))) {
                                MobileCRM.bridge.alert("Exceeded " + $(event.target).attr("maxlength") + " Characters");
                                //$("#" + event.target.id).val("");
                                $("#" + event.target.id).focus();
                                removePanels();
                            }
                        });

                        if (readOnly) {
                            $("#TextAns" + QuestionsArray[questionIndex].id).prop("disabled", true);
                        }
                    }
                    else if (AttributeType == QuestionTypes.Integer) {
                        var dynamicTable = "<div class='col-sm-4 Question' custtype='integer' isRequired='" + IsMandatory + "' isshowdefault='" + IsShowDefault + "' id='" + QuestionsArray[questionIndex].id + "'><label class='col-form-label'>" + Question +
                            "</label></div><div class='Answer col-sm-8' id='" + QuestionsArray[questionIndex].id + "' ><input class='form-control' placeholder='Integer' type ='text' onchange='CatchAnswer(event)' customtype='integer' " +
                            inputCode + " id ='integer" + QuestionsArray[questionIndex].id + "' customid ='" + QuestionsArray[questionIndex].id + "' /></div>";
                        if (SectionId != null) {
                            var tableElement = $('#QAConatiner').find("#" + SectionId);
                            if (tableElement.length > 0)
                                $(tableElement).append("<div class='form-group row' " + ShowQuestion + ">" + dynamicTable + "</div>");
                            else
                                $('#QAConatiner').append("<fieldset class='col-md-12' id='" + SectionId + "' " + showSection + "><legend>" + sectionName + "</legend><div class='form-group row' " + ShowQuestion + ">" + dynamicTable + "</div></fieldset>");
                            if (isSRequired == "true") {
                                $($("#" + QuestionsArray[questionIndex].id).children()[0]).addClass('required');
                            }
                        }
                        else
                            $('#QAConatiner').append("<div class='form-group row' " + ShowQuestion + ">" + dynamicTable + "</div>");                        

                        GetTargetEntityValuesByQuestion(QuestionsArray[questionIndex].id);

                        $("#integer" + QuestionsArray[questionIndex].id).bind("keydown", function (event) {
                            if (event.keyCode == 189 || event.keyCode == 46 || event.keyCode == 8 || event.keyCode == 9 || event.keyCode == 27 || event.keyCode == 13 ||
                                // Allow: Ctrl+A
                                (event.keyCode == 65 && event.ctrlKey === true) ||

                                // Allow: home, end, left, right
                                (event.keyCode >= 35 && event.keyCode <= 39)) {
                                // let it happen, don't do anything
                                return;
                            } else {
                                // Ensure that it is a number and stop the keypress
                                if (event.shiftKey || (event.keyCode < 48 || event.keyCode > 57) && (event.keyCode < 96 || event.keyCode > 105)) {
                                    event.preventDefault();
                                }
                            }
                        });

                        $("#integer" + QuestionsArray[questionIndex].id).keyup(function (e) {

                            if ($("#" + this.id + "").length > 0 && $("#" + this.id + "").val() != undefined && $("#" + this.id + "") != "" && (($("#" + this.id + "").val()).replace(/[+-]/g, '') > 2147483648)) {
                                $("#" + this.id + "").val("");
                                MobileCRM.bridge.alert("Enter a value from -2,147,483,648 through 2,147,483,647.");
                            }

                            var ResStr = $("#" + this.id + "").val();
                            var prmsym = ResStr.slice(0, 1);

                            if (prmsym == "-" || prmsym == "_") {
                                if (prmsym == "_")
                                    prmsym = "";
                            }
                            else {
                                prmsym = "";
                            }

                            if (parseInt(e.target.value) > parseInt($(e.target).attr("max"))) {
                                MobileCRM.bridge.alert("Input value should be less than " + $(e.target).attr("max"));
                                $("#" + e.target.id).val(FormatNumber(ResStr, "", 0, false));
                                $("#" + e.target.id).focus();
                                return;
                            }

                            $(this).val(FormatNumber(ResStr, "", 0, false));
                        });

                        $("#integer" + QuestionsArray[questionIndex].id).focusout(function (e) {
                            //MobileCRM.bridge.alert("On Focus Out");
                            CatchAnswerNumeric(e);

                            var questionId = e.target.attributes["customid"].value;
                            CheckCalculatedQuestions(questionId);
                            //var index = findCrmEntityArrayIndex(QuestionsArray, questionId);
                            //MobileCRM.bridge.alert("On Focus Out : " + $("#" + e.target.id).val() + " : " + questionId);
                            changeRelatedLookup(questionId, $("#" + e.target.id).val());

                            if (enableScoreTracking && $("#scoreTrackingSwitch") != null && $("#scoreTrackingSwitch").is(':checked')) {
                                ShowTabScore();
                            }
                        });

                        $("#integer" + QuestionsArray[questionIndex].id).keypress(function () {
                            var questionId = this.id.toString().replace("integer", "");
                            //MobileCRM.bridge.alert(" questionId: " + questionId + " Value: ");
                            changeRelatedLookup(questionId);
                        });                        

                        if (IsMandatory == "true") {
                            if ($("#" + QuestionsArray[questionIndex].id).children().length > 0)
                                $($("#" + QuestionsArray[questionIndex].id).children()[0]).addClass('required');
                        }
                        if (readOnly) {
                            $("#integer" + QuestionsArray[questionIndex].id).prop("disabled", true);
                        }

                    }
                    else if (AttributeType == QuestionTypes.MultiLineText) {
                        //var dynamicTable = "<td colspan='2'><table style='width:85%;'><tr><td isRequired='" + IsMandatory + "' isshowdefault='" + IsShowDefault + "' class='Question' id='" + QuestionsArray[questionIndex].id + "'><label>" + Question + "</label></td></tr><tr><td class='Answer' id='" + QuestionsArray[questionIndex].id + "' ><textarea class='form-control' onchange='CatchAnswer(event)' type='text' id = 'list" + QuestionsArray[questionIndex].id + "' style=' height: 50px;' rows='5' " + inputCode + "></textarea></td></tr></table></td>";
                        var dynamicTable = "<div class='col-sm-4 Question' custtype='multitext' isRequired='" + IsMandatory + "' isshowdefault='" + IsShowDefault + "' id='" + QuestionsArray[questionIndex].id + "'><label class='col-form-label'>" + Question +
                            "</label></div><div class='Answer col-sm-8' id='" + QuestionsArray[questionIndex].id + "' ><textarea class='form-control' onchange='CatchAnswer(event)' type='text' id = 'list" +
                            QuestionsArray[questionIndex].id + "' " + inputCode + "></textarea></div>";
                        if (SectionId != null) {
                            var tableElement = $('#QAConatiner').find("#" + SectionId);
                            if (tableElement.length > 0)
                                $(tableElement).append("<div class='form-group row' " + ShowQuestion + ">" + dynamicTable + "</div>");
                            else
                                $('#QAConatiner').append("<fieldset class='col-md-12' id='" + SectionId + "' " + showSection + "><legend>" + sectionName + "</legend><div class='form-group row' " + ShowQuestion + ">" + dynamicTable + "</div></fieldset>");
                            if (isSRequired == "true") {
                                $($("#" + QuestionsArray[questionIndex].id).children()[0]).addClass('required');
                            }
                        }
                        else
                            $('#QAConatiner').append("<div class='form-group row' " + ShowQuestion + ">" + dynamicTable + "</div>");                        

                        //CheckResponse_Prev(QuestionsArray[questionIndex].id, SurveyId, AttributeType, "list" + QuestionsArray[questionIndex].id);
                        GetTargetEntityValuesByQuestion(QuestionsArray[questionIndex].id);

                        if (IsMandatory == "true") {
                            if ($("#" + QuestionsArray[questionIndex].id).children().length > 0)
                                $($("#" + QuestionsArray[questionIndex].id).children()[0]).addClass('required');
                        }
                        $("#list" + QuestionsArray[questionIndex].id).keyup(function (event) {
                            if (event.target.value.length > parseInt($(event.target).attr("max"))) {
                                MobileCRM.bridge.alert("Exceeded " + $(event.target).attr("max") + " Characters");
                                //$("#" + event.target.id).val("");
                                $("#" + event.target.id).focus();
                                removePanels();
                                return;
                            }

                        });                      

                        if (readOnly) {
                            $("#list" + QuestionsArray[questionIndex].id).prop("disabled", true);
                        }
                    }
                    else if (AttributeType == QuestionTypes.CheckBox) {
                        var dynamicTable = "<div class='col-sm-4 Question' custtype='checkbox' isRequired='" + IsMandatory + "' isshowdefault='" + IsShowDefault + "' id='" + QuestionsArray[questionIndex].id
                            + "'>" + "<label class='col-form-label'>" + Question + "</label></div><div class='Answer col-sm-8' id='" + QuestionsArray[questionIndex].id + "'>" +
                            "<label class='inp-cont-r chklbl'><input class='form-control' customtype='checkbox' onchange='CatchAnswer(event)' id='checkbox" + QuestionsArray[questionIndex].id +
                            "' type='checkbox' customid ='" + QuestionsArray[questionIndex].id + "' />" + "<span class='checkmark-r'></span></label></div>";
                        if (SectionId != null) {
                            var tableElement = $('#QAConatiner').find("#" + SectionId);
                            if (tableElement.length > 0)
                                $(tableElement).append("<div class='form-group row' " + ShowQuestion + ">" + dynamicTable + "</div><br class='mb-lg-5'/>");
                            else
                                $('#QAConatiner').append("<fieldset class='col-md-12' id='" + SectionId + "' " + showSection + "><legend>" + sectionName + "</legend><div class='form-group row' " + ShowQuestion + ">" + dynamicTable + "</div><br class='mb-lg-5'/></fieldset>");
                            if (isSRequired == "true") {
                                $($("#" + QuestionsArray[questionIndex].id).children()[0]).addClass('required');
                            }
                        }
                        else
                            $('#QAConatiner').append("<div class='form-group row' " + ShowQuestion + ">" + dynamicTable + "</div><br class='mb-lg-5'/>");
                        
                        GetTargetEntityValuesByQuestion(QuestionsArray[questionIndex].id, null);

                        if (IsMandatory == "true") {
                            if ($("#" + QuestionsArray[questionIndex].id).children().length > 0)
                                $($("#" + QuestionsArray[questionIndex].id).children()[0]).addClass('required');
                        }

                        if (readOnly) {
                            $("#checkbox" + QuestionsArray[questionIndex].id).prop("disabled", true);
                            $("#checkbox" + QuestionsArray[questionIndex].id).hide();
                        }
                    }
                    else if (AttributeType == QuestionTypes.DateTime) {
                        //var dynamicTable = "<td colspan='2'><table style='width:100%;'><tr><td isRequired='" + IsMandatory + "' isshowdefault='" + IsShowDefault + "' class='Question' id='" + QuestionsArray[questionIndex].id + "'><label>" + Question + "</label></td></tr><tr><td class='Answer' id='" + QuestionsArray[questionIndex].id + "' ><input placeholder='Currency' customtype='currency' type ='text'  id='currency" + QuestionsArray[questionIndex].id + "' customid='" + QuestionsArray[questionIndex].id + "'  style='height:27px;width:85%;' " + inputCode + " /></td></tr></table></td>";
                        var dynamicTable = "<div class='col-sm-4 Question' custtype='date' isRequired='" + IsMandatory + "' isshowdefault='" + IsShowDefault + "' id='" + QuestionsArray[questionIndex].id + "'><label class='col-form-label'>" + Question +
                            "</label></div><div class='DateAnswer col-sm-8' id='" + QuestionsArray[questionIndex].id + "' ><input class='form-control' onchange='CatchAnswer_Date(event)' type ='text'" + 
                            " customid ='datepicker" + QuestionsArray[questionIndex].id + "' id='datepicker" + QuestionsArray[questionIndex].id + "' value='' customtype='date' " + inputCode + " /></div>"; 
                        if (SectionId != null) {
                            var tableElement = $('#QAConatiner').find("#" + SectionId);
                            if (tableElement.length > 0)
                                $(tableElement).append("<div class='form-group row' " + ShowQuestion + ">" + dynamicTable + "</div>");
                            else
                                $('#QAConatiner').append("<fieldset class='col-md-12' id='" + SectionId + "' " + showSection + "><legend>" + sectionName + "</legend><div class='form-group row' " + ShowQuestion + ">" + dynamicTable + "</div></fieldset>");
                            if (isSRequired == "true") {
                                $($("#" + QuestionsArray[questionIndex].id).children()[0]).addClass('required');
                            }
                        }
                        else
                            $('#QAConatiner').append("<div class='form-group row' " + ShowQuestion + ">" + dynamicTable + "</div>");



                        $("#datepicker" + QuestionsArray[questionIndex].id).kendoDateTimePicker({
                            animation: false,
                            value: null,
                            change: function (e) {
                                e.sender.close();
                                e.sender.timeView.close();
                            }
                        });

                        $("#datepicker" + QuestionsArray[questionIndex].id).attr("readonly", disableManualEntry);
                        CheckResponse_Prev(QuestionsArray[questionIndex].id, SurveyId, AttributeType, "datepicker" + QuestionsArray[questionIndex].id);
                        if (IsMandatory == "true") {
                            if ($("#" + QuestionsArray[questionIndex].id).children().length > 0)
                                $($("#" + QuestionsArray[questionIndex].id).children()[0]).addClass('required');
                        }

                    }
                    else if (AttributeType == QuestionTypes.Currency) {
                        var dynamicTable = "<div class='col-sm-4 Question' custtype='currency' isRequired='" + IsMandatory + "' isshowdefault='" + IsShowDefault + "' id='" + QuestionsArray[questionIndex].id + "'><label class='col-form-label'>" + Question +
                            "</label></div><div class='Answer col-sm-8' id='" + QuestionsArray[questionIndex].id + "' ><input class='form-control' placeholder='Currency' customtype='currency' type ='text'  id='currency" +
                            QuestionsArray[questionIndex].id + "' customid='" + QuestionsArray[questionIndex].id + "'  " + inputCode + " tabindex='" + qIndex + "'/></div>";
                        if (SectionId != null) {
                            var tableElement = $('#QAConatiner').find("#" + SectionId);
                            if (tableElement.length > 0)
                                $(tableElement).append("<div class='form-group row' " + ShowQuestion + ">" + dynamicTable + "</div>");
                            else
                                $('#QAConatiner').append("<fieldset class='col-md-12' id='" + SectionId + "' " + showSection + "><legend>" + sectionName + "</legend><div class='form-group row' " + ShowQuestion + ">" + dynamicTable + "</div></fieldset>");
                            if (isSRequired == "true") {
                                $($("#" + QuestionsArray[questionIndex].id).children()[0]).addClass('required');
                            }
                        }
                        else
                            $('#QAConatiner').append("<div class='form-group row' " + ShowQuestion + ">" + dynamicTable + "</div>");                        

                        GetTargetEntityValuesByQuestion(QuestionsArray[questionIndex].id);

                        $("#currency" + QuestionsArray[questionIndex].id).keyup(function (e) {
                            try {
                                var questionId = e.target.attributes["customid"].value;
                                var numberOfDecimalPlaces = 2;
                                var currentQuestion = $.grep(QuestionsArray, function (item) {
                                    return item.properties["ebecssvy_questionsid"] == questionId;
                                });

                                if (currentQuestion != null && currentQuestion.length > 0) {
                                    currencySymbol = currentQuestion[0].properties["ebecssvy_currency"];
                                    numberOfDecimalPlaces = currentQuestion[0].properties["ebecssvy_numberofdecimalplaces"] != null && currentQuestion[0].properties["ebecssvy_numberofdecimalplaces"] != "" ? currentQuestion[0].properties["ebecssvy_numberofdecimalplaces"] : 2;
                                }
                                //MobileCRM.bridge.alert("on keyup currencySymbol before : " + currencySymbol);
                                if (currencySymbol != "" && currencySymbol != null && typeof currencySymbol != "undefined" && currencySymbol.indexOf('(') != -1 && currencySymbol.indexOf(')') != -1) {
                                    currencySymbol = currencySymbol.substring(currencySymbol.lastIndexOf("(") + 1, currencySymbol.lastIndexOf(")"));
                                } else if (currencySymbol == "" || currencySymbol == null || typeof currencySymbol == "undefined") {
                                    currencySymbol = "£";
                                }
                                //MobileCRM.bridge.alert("on keyup currencySymbol after: " + currencySymbol);

                                if (e.keyCode != 37 && e.keyCode != 39 && e.keyCode != 36 && e.keyCode != 35) {
                                    var ResStr = $("#" + this.id + "").val();
                                    var prmsym = ResStr.slice(0, 1);
                                    if (prmsym == "-" || prmsym == "+") {
                                        if (prmsym == "+")
                                            prmsym = "";
                                    }
                                    else {
                                        prmsym = "";
                                    }

                                    if (ResStr.replace(currencySymbol, '').replace(DecimalSeperator, '.').replace(ThousandSeperator, '').replace('+', '').replace('-', '') != isNaN) {
                                        var nwCrncy = FormatNumber(ResStr, currencySymbol, numberOfDecimalPlaces).replace(currencySymbol, '');
                                        var maxString = $(e.target).attr("max") != null && $(e.target).attr("max") != "" && typeof $(e.target).attr("max") != "undefined" ? $(e.target).attr("max").replace(DecimalSeperator, '.').replace(ThousandSeperator, '') : "";
                                        if (maxString != "" && parseFloat(nwCrncy) > parseFloat(maxString)) {
                                            MobileCRM.bridge.alert("Input value should be less than " + $(e.target).attr("max"));
                                            $("#" + e.target.id).val(FormatNumber(ResStr, currencySymbol, numberOfDecimalPlaces));
                                            $("#" + e.target.id).focus();
                                            return;
                                        }
                                    }
                                    if (ResStr.replace(currencySymbol, '').replace(DecimalSeperator, '.').replace(ThousandSeperator, '').replace('+', '').replace('-', '') != isNaN
                                        && (parseInt(ResStr.replace(currencySymbol, '').replace(DecimalSeperator, '.').replace(ThousandSeperator, '').replace('+', '').replace('-', '')) > 922337203685477)) {

                                        // $("#" + this.id + "").val() > 2147483648
                                        $("#" + this.id + "").val("");
                                        MobileCRM.bridge.alert("Enter a value from -922,337,203,685,477.0000 through 922,337,203,685,477.0000.");
                                    }

                                    //MobileCRM.bridge.alert("FormatNumber : " + FormatNumber($(this).val(), currencySymbol, numberOfDecimalPlaces, false));
                                    $(this).val(FormatNumber($(this).val(), currencySymbol, numberOfDecimalPlaces, false));
                                }
                            } catch (error) {
                                MobileCRM.bridge.alert("error " + error);
                            }
                        });

                        $("#currency" + QuestionsArray[questionIndex].id).focusout(function (e) {

                            var questionId = e.target.attributes["customid"].value;
                            var numberOfDecimalPlaces = 2;
                            var currencySymbol = "";

                            var currentQuestion = $.grep(QuestionsArray, function (item) {
                                return item.properties["ebecssvy_questionsid"] == questionId;
                            });

                            if (currentQuestion != null && currentQuestion.length > 0) {
                                currencySymbol = currentQuestion[0].properties["ebecssvy_currency"];
                                numberOfDecimalPlaces = currentQuestion[0].properties["ebecssvy_numberofdecimalplaces"] != null && currentQuestion[0].properties["ebecssvy_numberofdecimalplaces"] != "" ? currentQuestion[0].properties["ebecssvy_numberofdecimalplaces"] : 2;
                            }

                            if (currencySymbol != "" && currencySymbol != null && typeof currencySymbol != "undefined" && currencySymbol.indexOf('(') != -1 && currencySymbol.indexOf(')') != -1) {
                                currencySymbol = currencySymbol.substring(currencySymbol.lastIndexOf("(") + 1, currencySymbol.lastIndexOf(")"));
                            } else if (currencySymbol == "" || currencySymbol == null || typeof currencySymbol == "undefined") {
                                currencySymbol = "£";
                            }

                            //FilterLookupQuestion(questionId, FomatNumberForCalculation($(this).val(), currencySymbol));

                            $(this).val(FormatNumber($(this).val(), currencySymbol, numberOfDecimalPlaces, true));

                            CatchAnswerNumeric(e);

                            var questionId = e.target.attributes["customid"].value;
                            CheckCalculatedQuestions(questionId);

                            changeRelatedLookup(questionId, $(this).val(), currencySymbol);
                        });

                        if (IsMandatory == "true") {
                            if ($("#" + QuestionsArray[questionIndex].id).children().length > 0)
                                $($("#" + QuestionsArray[questionIndex].id).children()[0]).addClass('required');
                        }

                        $("#currency" + QuestionsArray[questionIndex].id).keypress(function () {
                            var questionId = this.id.toString().replace("currency", "");                            
                            //MobileCRM.bridge.alert(" questionId: " + questionId + " Value: ");
                            changeRelatedLookup(questionId);
                        });

                        if (readOnly) {
                            $("#currency" + QuestionsArray[questionIndex].id).prop("disabled", true);
                        }
                    }
                    else if (AttributeType == QuestionTypes.Decimal) {
                        var dynamicTable = "<div class='col-sm-4 Question' custtype='Decimal' isRequired='" + IsMandatory + "' isshowdefault='" + IsShowDefault + "' id='" + QuestionsArray[questionIndex].id + "'><label class='col-form-label'>" + Question +
                            symbol + "</label></div><div class='Answer col-sm-8' id='" + QuestionsArray[questionIndex].id + "' ><input class='form-control' placeholder='Decimal' customtype='Decimal' type ='text'  id='Decimal" +
                            QuestionsArray[questionIndex].id + "' customid='" + QuestionsArray[questionIndex].id + "'  " + inputCode + " /></div>";
                        if (SectionId != null) {
                            //MobileCRM.bridge.alert("Section : " + showSection + " : " + "ShowQuestion : " + ShowQuestion);
                            var tableElement = $('#QAConatiner').find("#" + SectionId);
                            if (tableElement.length > 0)
                                $(tableElement).append("<div class='form-group row' " + ShowQuestion + ">" + dynamicTable + "</div>");
                            else
                                $('#QAConatiner').append("<fieldset class='col-md-12' id='" + SectionId + "' " + showSection + "><legend>" + sectionName + "</legend><div class='form-group row' " + ShowQuestion + ">" + dynamicTable + "</div></fieldset>");
                            if (isSRequired == "true") {
                                $($("#" + QuestionsArray[questionIndex].id).children()[0]).addClass('required');
                            }
                        }
                        else
                            $('#QAConatiner').append("<div class='form-group row' " + ShowQuestion + ">" + dynamicTable + "</div>");                        

                        GetTargetEntityValuesByQuestion(QuestionsArray[questionIndex].id);

                        $("#Decimal" + QuestionsArray[questionIndex].id).keyup(function (e) {

                            try {
                                var questionId = e.target.attributes["customid"].value;
                                var numberOfDecimalPlaces = 2;
                                var currentQuestion = $.grep(QuestionsArray, function (item) {
                                    return item.properties["ebecssvy_questionsid"] == questionId;
                                });

                                if (currentQuestion != null && currentQuestion.length > 0) {
                                    numberOfDecimalPlaces = currentQuestion[0].properties["ebecssvy_numberofdecimalplaces"] != null && currentQuestion[0].properties["ebecssvy_numberofdecimalplaces"] != "" ? currentQuestion[0].properties["ebecssvy_numberofdecimalplaces"] : 2;
                                }

                                if (e.keyCode != 37 && e.keyCode != 39 && e.keyCode != 36 && e.keyCode != 35) {
                                    var ResStr = $("#" + this.id + "").val();
                                    var prmsym = ResStr.slice(0, 1);
                                    if (prmsym == "-" || prmsym == "+") {
                                        if (prmsym == "+")
                                            prmsym = "";
                                    }
                                    else {
                                        prmsym = "";
                                    }

                                    if (ResStr.replace(',', '').replace('.', '').replace('+', '').replace('-', '').replace(' ', '') != isNaN) {

                                        var formattedDecimal = FormatNumber(ResStr, "", numberOfDecimalPlaces).replace(' ', '');

                                        if (parseFloat(formattedDecimal) > parseFloat($(e.target).attr("max"))) {
                                            MobileCRM.bridge.alert("Input value should be less than " + $(e.target).attr("max"));
                                            $("#" + e.target.id).val(FormatNumber(ResStr, ""));
                                            $("#" + e.target.id).focus();
                                            return;
                                        } else if (formattedDecimal > 922337203685477) {
                                            $("#" + this.id + "").val("");
                                            MobileCRM.bridge.alert("Enter a value from -922,337,203,685,477.0000 through 922,337,203,685,477.0000.");
                                        }
                                    }

                                    $("#" + this.id + "").val(FormatNumber($("#" + this.id + "").val(), "", numberOfDecimalPlaces, false));

                                }
                            } catch (error) {
                                MobileCRM.bridge.alert("Error occured: " + error);
                            }
                        });

                        $("#Decimal" + QuestionsArray[questionIndex].id).focusout(function (e) {
                            var questionId = e.target.attributes["customid"].value;
                            var numberOfDecimalPlaces = 2;
                            var currentQuestion = $.grep(QuestionsArray, function (item) {
                                return item.properties["ebecssvy_questionsid"] == questionId;
                            });

                            if (currentQuestion != null && currentQuestion.length > 0) {
                                numberOfDecimalPlaces = currentQuestion[0].properties["ebecssvy_numberofdecimalplaces"] != null && currentQuestion[0].properties["ebecssvy_numberofdecimalplaces"] != "" ? currentQuestion[0].properties["ebecssvy_numberofdecimalplaces"] : 2;
                            }

                            $("#" + this.id + "").val(FormatNumber($("#" + this.id + "").val(), "", numberOfDecimalPlaces, true));

                            CatchAnswerNumeric(e);

                            //FilterLookupQuestion(questionId, FomatNumberForCalculation($("#" + this.id + "").val(), ""));

                            if (enableScoreTracking && $("#scoreTrackingSwitch") != null && $("#scoreTrackingSwitch").is(':checked')) {
                                ShowTabScore();
                            }

                            var questionId = e.target.attributes["customid"].value;
                            CheckCalculatedQuestions(questionId, $("#" + this.id + "").val());

                            changeRelatedLookup(questionId, $("#" + this.id + "").val(), null);
                        });

                        if (IsMandatory == "true") {
                            if ($("#" + QuestionsArray[questionIndex].id).children().length > 0)
                                $($("#" + QuestionsArray[questionIndex].id).children()[0]).addClass('required');
                        }

                        $("#Decimal" + QuestionsArray[questionIndex].id).keypress(function () {
                            var questionId = this.id.toString().replace("Decimal", "");
                            //MobileCRM.bridge.alert(" questionId: " + questionId + " Value: ");
                            changeRelatedLookup(questionId);
                        }); 

                        if (readOnly) {
                            $("#Decimal" + QuestionsArray[questionIndex].id).prop("disabled", true);
                        }
                    }
                    else if (AttributeType == QuestionTypes.TrueFalse) {
                        var dynamicTable = "<div class='col-sm-4 Question' custtype='radio' isRequired='" + IsMandatory + "' isshowdefault='" + IsShowDefault + "' id='" + QuestionsArray[questionIndex].id + "'><label class='col-form-label'>" + Question +
                            "</label></div><div class='Answer col-sm-8' id='Answer" + QuestionsArray[questionIndex].id + "' ></div>";
                        if (SectionId != null) {
                            var tableElement = $('#QAConatiner').find("#" + SectionId);
                            if (tableElement.length > 0)
                                $(tableElement).append("<div class='form-group row' " + ShowQuestion + ">" + dynamicTable + "</div>");
                            else
                                $('#QAConatiner').append("<fieldset class='col-md-12' id='" + SectionId + "' " + showSection + "><legend>" + sectionName + "</legend><div class='form-group row' " + ShowQuestion + ">" + dynamicTable + "</div></fieldset>");
                            if (isSRequired == "true") {
                                $($("#" + QuestionsArray[questionIndex].id).children()[0]).addClass('required');
                            }
                        }
                        else
                            $('#QAConatiner').append("<div class='form-group row' " + ShowQuestion + ">" + dynamicTable + "</div>");

                        if (Result_Ans != null && Result_Ans.length > 0) {
                            for (var i in Result_Ans) {

                                var ansData = Result_Ans[i].properties["ebecssvy_name"] != null ? Result_Ans[i].properties["ebecssvy_name"].replace(/ /g, '').replace(/[^a-zA-Z ]/g, "") : null;

                                if (Result_Ans[i].properties["ebecssvy_name"] != "*") {
                                    //$("#Answer" + QuestionsArray[questionIndex].id).append("<input answerid='" + Result_Ans[i].id + "' id='Radio" + Result_Ans[i].id + "' type ='Radio' onchange='CatchAnswer(event)' value='" + ansData + "' name = 'radio" + QuestionsArray[questionIndex].id + "' myLabel='" + Result_Ans[i].properties["ebecssvy_name"] + "' /><lable class='sizeClass' style='margin-right:15px;'>" + Result_Ans[i].properties["ebecssvy_name"] + "</label>");
                                    $("#Answer" + QuestionsArray[questionIndex].id).append("<label class='inp-cont-r'>" + Result_Ans[i].properties["ebecssvy_name"] +
                                        "<input answerid='" + Result_Ans[i].id + "' id='Radio" + Result_Ans[i].id + "' type ='radio' customtype='radio' onchange='CatchAnswer(event)' value='" + ansData + "' name = 'radio" +
                                        QuestionsArray[questionIndex].id + "' myLabel='" + Result_Ans[i].properties["ebecssvy_name"] + "' />" +
                                        "<span class='checkmark'></span> </label>");

                                    if (readOnly) {
                                        $('input[type=radio]', '#Answer' + QuestionsArray[questionIndex].id).prop("disabled", true);
                                    }
                                }

                            }
                            //CheckResponse_Prev(QuestionsArray[questionIndex].id, SurveyId, AttributeType, "Radio");
                            GetTargetEntityValuesByQuestion(QuestionsArray[questionIndex].id);
                        }
                        else
                            noAnswersArray.push(QuestionsArray[questionIndex].id);
                        if (IsMandatory == "true") {
                            if ($("#" + QuestionsArray[questionIndex].id).children().length > 0)
                                $($("#" + QuestionsArray[questionIndex].id).children()[0]).addClass('required');
                        }                        
                    }
                    else if (AttributeType == QuestionTypes.MultiCheckBox) {
                        var dynamicTable = "<div class='col-sm-4 Question' custtype='multicheckbox' isRequired='" + IsMandatory + "' isshowdefault='" + IsShowDefault + "' id='" + QuestionsArray[questionIndex].id + "'>" +
                            "<label class='col-form-label'>" + Question + "</label></div><div class='MultipleAnswer col-sm-8' id='MultipleAnswer" + QuestionsArray[questionIndex].id + "' ></div>";

                        if (SectionId != null) {
                            var tableElement = $('#QAConatiner').find("#" + SectionId);
                            if (tableElement.length > 0)
                                $(tableElement).append("<div class='form-group row' " + ShowQuestion + ">" + dynamicTable + "</div>");
                            else
                                $('#QAConatiner').append("<fieldset class='col-md-12' id='" + SectionId + "' " + showSection + "><legend>" + sectionName + "</legend><div class='form-group row' " + ShowQuestion + ">" + dynamicTable + "</div></fieldset>");
                            if (isSRequired == "true") {
                                $($("#" + QuestionsArray[questionIndex].id).children()[0]).addClass('required');
                            }
                        }
                        else
                            $('#QAConatiner').append("<div class='form-group row' " + ShowQuestion + ">" + dynamicTable + "</div>");
                        //MobileCRM.bridge.alert("res ans length : " + Result_Ans.length);
                        if (Result_Ans != null && Result_Ans.length > 0) {
                            for (var i in Result_Ans) {
                                var _option = Result_Ans[i].properties["ebecssvy_name"];
                                //MobileCRM.bridge.alert("OPTION : " + _option);
                                var trimmedAns = _option.replace(/\s+/g, '').replace(/[^a-zA-Z ]/g, "");
                                if (Result_Ans[i].properties["ebecssvy_name"] != "*") {
                                    //$("#MultipleAnswer" + QuestionsArray[questionIndex].id).append("<input answerid='" + Result_Ans[i].id + "' type='checkbox' onchange='CatchAnswer(event)' id='" + Result_Ans[i].id + "' /><label class='sizeClass' style='margin-right: 40px;'>" + _option + "</label><br />");
                                    $("#MultipleAnswer" + QuestionsArray[questionIndex].id).append("<label class='inp-cont-r'>" + _option +
                                        "<input answerid='" + Result_Ans[i].id + "' type='checkbox' customtype='multicheckbox' onchange='CatchAnswer(event)' id='" + Result_Ans[i].id + "' /><label hidden=true>" + _option + "</label>" +
                                        "<span class='checkmark-r'></span> </label>");
                                }
                            }

                            if (readOnly) {
                                $.each(Result_Ans, function () {
                                    $("#" + this.properties["ebecssvy_answersid"]).prop("disabled", true);
                                });
                            }
                        }
                        else
                            noAnswersArray.push(QuestionsArray[questionIndex].id);
                        GetTargetEntityValuesByQuestion(QuestionsArray[questionIndex].id);
                        //CheckResponse_Prev(QuestionsArray[questionIndex].id, SurveyId, AttributeType, "checkbox", Result_Ans);
                        if (IsMandatory == "true") {
                            if ($("#" + QuestionsArray[questionIndex].id).children().length > 0)
                                $($("#" + QuestionsArray[questionIndex].id).children()[0]).addClass('required');
                        }

                        /*$("#MultipleAnswer" + QuestionsArray[questionIndex].id).change(function () {
                            var questionId = this.id;
                            MobileCRM.bridge.alert(" questionId: " + questionId + " Value: ");
                            //var index = findCrmEntityArrayIndex(QuestionsArray, questionId);
                            changeRelatedLookup(questionId);
                        });*/
                    }
                    else if (AttributeType == QuestionTypes.GraphicalList) {
                        var dynamicTable = "<div class='col-sm-4 Question' isRequired='" + IsMandatory + "' isshowdefault='" + IsShowDefault + "' custtype='graphicalList' id='" + QuestionsArray[questionIndex].id +
                            "'><label class='col-form-label'>" + Question + "</label></div><div class='GraphicalList col-sm-8' id='Answer" + QuestionsArray[questionIndex].id + "' ><input id='GraphicalList" + QuestionsArray[questionIndex].id +
                            "' class='form-control' customtype='graphicalList' /></div>";

                        if (SectionId != null) {
                            var tableElement = $('#QAConatiner').find("#" + SectionId);
                            if (tableElement.length > 0)
                                $(tableElement).append("<div class='form-group row' " + ShowQuestion + ">" + dynamicTable + "</div>");
                            else
                                $('#QAConatiner').append("<fieldset class='col-md-12' id='" + SectionId + "' " + showSection + "><legend>" + sectionName + "</legend><div class='form-group row' " + ShowQuestion + ">" + dynamicTable + "</div></fieldset>");
                            if (isSRequired == "true") {
                                $($("#" + QuestionsArray[questionIndex].id).children()[0]).addClass('required');
                            }
                        }
                        else
                            $('#QAConatiner').append("<div class='form-group row' " + ShowQuestion + ">" + dynamicTable + "</div>");
                        if (Result_Ans != undefined && Result_Ans != null && Result_Ans.length > 0) {

                            $("#GraphicalList" + QuestionsArray[questionIndex].id).kendoComboBox({
                                filter: "startswith",
                                open: function (e) {
                                    $($($(e.sender.wrapper[0]).children("span"))).children("input").blur();
                                },
                                placeholder: "Select...",
                                dataTextField: "RecordName",
                                dataValueField: "ImageUrlDef",
                                dataAnswerId: "AId",
                                template: '<span class="k-state-default" style="background-image: url(\'#:ImageUrlDef#\'); float:right;display: block;overflow: hidden;height: 60px; width: 60px;background-size:100%;background-repeat:no-repeat;"></span>' +//width: 60px;
                                    '<span class="k-state-default"><div style="white-space:nowrap; overflow:hidden; text-overflow:ellipsis; display:block; font-size:12px;">#: RecordName #</div></span>',
                                dataSource: [],
                                select: function (e) {
                                    e.sender.close();
                                },
                                change: function (e) {
                                    //BSGLArray = GLArray;
                                    var localE = e;
                                    var localThis = this;
                                    if (this.select() == -1) {
                                        var comboBoxCurrent = $("#" + this.input.context.id).data("kendoComboBox");
                                        comboBoxCurrent.select(-1);
                                        comboBoxCurrent.text("");
                                    }
                                    if (GLArray.length == 0) {
                                        var GLObject = new Object();
                                        GLObject.Qid = this.input.context.id;
                                        if (localThis.dataItem() != undefined && localThis.dataItem() != null) {
                                            GLObject.GLAnswer = this.dataItem().RecordName;
                                            GLObject.GLAnswerId = this.dataItem().AId;
                                        }
                                        else {
                                            GLObject.GLAnswer = "";
                                            GLObject.GLAnswerId = "";
                                        }
                                        GLArray.push(GLObject);
                                    }
                                    else {
                                        var found = "false";
                                        $.each(GLArray, function () {
                                            if (this.Qid == localE.sender.input.context.id) {
                                                if (localThis.dataItem() != undefined && localThis.dataItem() != null) {
                                                    this.GLAnswer = localThis.dataItem().RecordName;
                                                    this.GLAnswerId = localThis.dataItem().AId;
                                                }
                                                else {
                                                    this.GLAnswer = "";
                                                    this.GLAnswerId = "";
                                                }
                                                found = "true";
                                                return false;
                                            }
                                        });
                                        if (found == "false") {
                                            var GLObject = new Object();
                                            GLObject.Qid = this.input.context.id;
                                            if (localThis.dataItem() != undefined && localThis.dataItem() != null) {
                                                GLObject.GLAnswer = this.dataItem().RecordName;
                                                GLObject.GLAnswerId = this.dataItem().AId;
                                            }
                                            else {
                                                GLObject.GLAnswer = "";
                                                GLObject.GLAnswerId = "";
                                            }
                                            GLArray.push(GLObject);
                                        }
                                    }
                                    if (localThis.dataItem() != undefined && localThis.dataItem() != null) {
                                        CatchAnswer_GL(this.input.context.id, this.dataItem().AId);
                                    }
                                    else
                                        CatchAnswer_GL(this.input.context.id, null);

                                    if (enableScoreTracking && $("#scoreTrackingSwitch") != null && $("#scoreTrackingSwitch").is(':checked')) {

                                        ShowTabScore();
                                    }
                                },
                                height: 200
                            });
                            for (var i = 0; i < Result_Ans.length; i++) {
                                var answerImg = Result_Ans[i];
                                attachImagesToGL(answerImg, QuestionsArray[questionIndex].id, answerImg.properties["ebecssvy_name"], answerImg.properties["ebecssvy_answersid"], i, Result_Ans, AttributeType);
                            }


                        }
                        else {
                            var combobox = $("#GraphicalList" + QuestionsArray[questionIndex].id).data("kendoComboBox");
                            noAnswersArray.push(QuestionsArray[questionIndex].id);
                            //changes adi
                            $("#GraphicalList" + QuestionsArray[questionIndex].id).kendoComboBox({
                                filter: "startswith",
                                open: function (e) {
                                    $($($(e.sender.wrapper[0]).children("span"))).children("input").blur();
                                },
                                placeholder: "No records...",
                                dataTextField: "RecordName",
                                dataValueField: "ImageUrlDef",
                                dataRecordId: "RId",
                                template: '<span class="k-state-default" style="background-image: url(\'#:ImageUrlDef#\'); float:right;display: block;overflow: hidden;height: 60px; width: 60px; background-size:100%;background-repeat:no-repeat;"></span>' +
                                    '<span class="k-state-default"><div style="white-space:nowrap; overflow:hidden; text-overflow:ellipsis; display:block; font-size:12px;">#: RecordName #</div></span>',
                                dataSource: [],
                                select: function (e) {
                                    e.sender.close();
                                },
                                change: function (e) {

                                },
                                height: 200
                            });
                        }

                        if (IsMandatory == "true") {
                            if ($("#" + QuestionsArray[questionIndex].id).children().length > 0)
                                $($("#" + QuestionsArray[questionIndex].id).children()[0]).addClass('required');
                        }
                    }
                    else if (AttributeType == QuestionTypes.DisplayImage) {

                        var dynamicTable = "<div class='Question col-sm-4' isshowdefault='" + IsShowDefault + "' id='" + QuestionsArray[questionIndex].id + "' ><label class='col-form-label' style='display:none;'>" + Question +
                            "</label><img id='Image" + QuestionsArray[questionIndex].id + "' style='Width:" + imgWidth + "px;height:" + imgHeight + "px;' /></div><div class='col-sm-8 Answer' id='" +
                            QuestionsArray[questionIndex].id + "' ></div>";

                        if (SectionId != null) {
                            var tableElement = $('#QAConatiner').find("#" + SectionId);
                            if (tableElement.length > 0)
                                $(tableElement).append("<div class='form-group row' " + ShowQuestion + ">" + dynamicTable + "</div>");
                            else
                                $('#QAConatiner').append("<fieldset class='col-md-12' id='" + SectionId + "' " + showSection + "><legend>" + sectionName + "</legend><div id='" + SectionId + "'><div class='form-group row' " + ShowQuestion + ">" + dynamicTable + "</div></div></fieldset>");

                        }
                        else
                            $('#QAConatiner').append("<div class='form-group row' " + ShowQuestion + ">" + dynamicTable + "</div>");

                        var ImageId = QuestionsArray[questionIndex].properties["ebecssvy_image"] != null ? QuestionsArray[questionIndex].properties["ebecssvy_image"].id : null;
                        if (ImageId != null)
                            AppendImage(ImageId, "Image" + QuestionsArray[questionIndex].id);

                        // MobileCRM.bridge.alert(" Display Image html : " + $('#QAConatiner').html());
                    }
                    else if (AttributeType == QuestionTypes.Label) {
                        var textOpeningFormatterTag = "";
                        var textClosingFormatterTag = "";
                        var fontSize = "font-size: 18px";

                        if (QuestionsArray[questionIndex].properties["ebecssvy_textbold"] != null && typeof QuestionsArray[questionIndex].properties["ebecssvy_textbold"] != 'undefined' && QuestionsArray[questionIndex].properties["ebecssvy_textbold"]) {
                            textOpeningFormatterTag += "<b>";
                            textClosingFormatterTag += "</b>";
                        }

                        if (QuestionsArray[questionIndex].properties["ebecssvy_textitalic"] != null && typeof QuestionsArray[questionIndex].properties["ebecssvy_textitalic"] != 'undefined' && QuestionsArray[questionIndex].properties["ebecssvy_textitalic"]) {
                            textOpeningFormatterTag += "<i>";
                            textClosingFormatterTag += "</i>";
                        }

                        if (QuestionsArray[questionIndex].properties["ebecssvy_textunderline"] != null && typeof QuestionsArray[questionIndex].properties["ebecssvy_textunderline"] != 'undefined' && QuestionsArray[questionIndex].properties["ebecssvy_textunderline"]) {
                            textOpeningFormatterTag += "<u>";
                            textClosingFormatterTag += "</u>";
                        }

                        if (QuestionsArray[questionIndex].properties["ebecssvy_textsize"] != null && typeof QuestionsArray[questionIndex].properties["ebecssvy_textsize"] != 'undefined' && QuestionsArray[questionIndex].properties["ebecssvy_textsize"] != "") {
                            fontSize = "font-size: " + QuestionsArray[questionIndex].properties["ebecssvy_textsize"] + "px;";
                        }

                        if (QuestionsArray[questionIndex].properties["ebecssvy_labelquestiontext"] != null && typeof QuestionsArray[questionIndex].properties["ebecssvy_labelquestiontext"] != 'undefined' && QuestionsArray[questionIndex].properties["ebecssvy_labelquestiontext"] != "") {
                            Question = QuestionsArray[questionIndex].properties["ebecssvy_labelquestiontext"].toString().replace(/\n/g, "<br />");
                        }

                        var dynamicTable = "<div class='Question col-sm-12 label_highlight' isshowdefault='" + IsShowDefault + "' id='" + QuestionsArray[questionIndex].id + "'><label class='col-form-label; white-space: pre-wrap !important;' style='" + fontSize + "'>" + textOpeningFormatterTag + Question + textClosingFormatterTag +
                            "</label></div><div class='col-sm-0 Answer' id='" + QuestionsArray[questionIndex].id + "' ></div>";

                        if (SectionId != null) {
                            var tableElement = $('#QAConatiner').find("#" + SectionId);
                            if (tableElement.length > 0)
                                $(tableElement).append("<div class='form-group row' " + ShowQuestion + ">" + dynamicTable + "</div>");
                            else
                                $('#QAConatiner').append("<fieldset class='col-md-12' id='" + SectionId + "' " + showSection + "><legend>" + sectionName + "</legend><div class='form-group row' " + ShowQuestion + ">" + dynamicTable + "</div></fieldset>");
                            if (isSRequired == "true") {
                                $($("#" + QuestionsArray[questionIndex].id).children()[0]).addClass('required');
                            }
                        }
                        else
                            $('#QAConatiner').append("<div class='form-group row' " + ShowQuestion + ">" + dynamicTable + "</div>");

                    }
                    else if (AttributeType == QuestionTypes.ShowChildSurvey) {
                        MobileCRM.bridge.enableDebug();
                        debugger;
                        var gridName = "mainChildSurveyGrid" + questionIndex;
                       
                        var dynamicTable = "<div class='Question col-sm-4' isRequired='" + IsMandatory + "' isshowdefault='" + IsShowDefault + "' id='" + QuestionsArray[questionIndex].id + "'><label class='col-form-label'>" + Question +
                            "</label></div><div class='col-sm-8 Answer' customtype='childSurvey' id='" + QuestionsArray[questionIndex].id + "' > <div id='" + gridName + "' ></div> </div>";
                        retrieveChildSurveyData(questionIndex);

                        if (SectionId != null) {
                            var tableElement = $('#QAConatiner').find("#" + SectionId);
                            if (tableElement.length > 0)
                                $(tableElement).append("<div class='form-group row' " + ShowQuestion + ">" + dynamicTable + "</div>");
                            else
                                $('#QAConatiner').append("<fieldset class='col-md-12' id='" + SectionId + "' " + showSection + "><legend>" + sectionName + "</legend><div class='form-group row' " + ShowQuestion + ">" + dynamicTable + "</div></fieldset>");
                            if (isSRequired == "true") {
                                $($("#" + QuestionsArray[questionIndex].id).children()[0]).addClass('required');
                            }
                        }
                        else
                            $('#QAConatiner').append("<div class='form-group row' " + ShowQuestion + ">" + dynamicTable + "</div>");

                    }
                    else if (AttributeType == QuestionTypes.ImageCapture) {

                        var dynamicTable = "<div class='Question col-sm-4' custtype='imagecapture' isshowdefault='" + IsShowDefault + "' id='" + QuestionsArray[questionIndex].id + "'><label class='col-form-label'>" + Question +
                            "</label></div><div class='col-sm-8 Answer' id='" + QuestionsArray[questionIndex].id + "' > <button id='camera" +//style='display: block;padding:5px 5px; width:140px;'
                            QuestionsArray[questionIndex].id + "' onclick='openCamera(event)'>Capture Image</button><input id='captureImagelookup" + QuestionsArray[questionIndex].id +
                            "' class='form-control' customtype='ImageCapture' /></div>";//class='customers-list'

                        if (SectionId != null) {
                            var tableElement = $('#QAConatiner').find("#" + SectionId);
                            if (tableElement.length > 0)
                                $(tableElement).append("<div class='form-group row' " + ShowQuestion + ">" + dynamicTable + "</div>");
                            else
                                $('#QAConatiner').append("<fieldset class='col-md-12' id='" + SectionId + "' " + showSection + "><legend>" + sectionName + "</legend><div class='form-group row' " + ShowQuestion + ">" + dynamicTable + "</div></fieldset>");
                            if (isSRequired == "true") {
                                $($("#" + QuestionsArray[questionIndex].id).children()[0]).addClass('required');
                            }
                        }
                        else
                            $('#QAConatiner').append("<div class='form-group row' " + ShowQuestion + ">" + dynamicTable + "</div>");
                        populatePictureRecordsLoad(QuestionsArray[questionIndex].id);
                    }
                    else if (AttributeType == QuestionTypes.Lookup) //Lookup
                    {
                        var _fetchXml = QuestionsArray[questionIndex].properties["ebecssvy_fetchxml"] != null ? QuestionsArray[questionIndex].properties["ebecssvy_fetchxml"] : null;
                        var _viewName = QuestionsArray[questionIndex].properties["ebecssvy_entityviewname"] ? QuestionsArray[questionIndex].properties["ebecssvy_entityviewname"] : null;
                        var _entityName = QuestionsArray[questionIndex].properties["ebecssvy_lookupentityname"] ? QuestionsArray[questionIndex].properties["ebecssvy_lookupentityname"] : null;
                        var _displayImage = QuestionsArray[questionIndex].properties["ebecssvy_displayimage"] ? QuestionsArray[questionIndex].properties["ebecssvy_displayimage"] : null;
                        var relatedLookupObj = [];

                        //MobileCRM.bridge.alert("Early Fetch: " + _fetchXml);

                        if (FilteredLookupQuestions != null && FilteredLookupQuestions != "" && typeof FilteredLookupQuestions != 'undefined' && FilteredLookupQuestions.length > 0) {
                            relatedLookupObj = $.grep(FilteredLookupQuestions, function (obj) {
                                return obj.id == QuestionsArray[questionIndex].id;
                            });

                            if (relatedLookupObj != null && relatedLookupObj != "" && typeof relatedLookupObj != 'undefined' && relatedLookupObj.length > 0) {
                                var filteredFetchXml = QuestionsArray[questionIndex].properties["ebecssvy_filterdfetchxml"] != null ? QuestionsArray[questionIndex].properties["ebecssvy_filterdfetchxml"] : null;

                                if (filteredFetchXml != null && filteredFetchXml != "" && typeof filteredFetchXml != 'undefined') {
                                    _fetchXml = filteredFetchXml;
                                }
                                //MobileCRM.bridge.alert("ebecssvy_filterdfetchxml: " + filteredFetchXml);
                            }
                        }
                        //MobileCRM.bridge.alert("Final Fetch: " + _fetchXml);
                        var fetchQObject = new Object();
                        fetchQObject.fetch = _fetchXml;
                        fetchQObject.entityName = _entityName;
                        fetchQObject.displayIMage = _displayImage;
                        fetchQObject.qId = QuestionsArray[questionIndex].id;
                        fetchQObject.qName = Question;
                        var _fetchIndex = findFetchIndex(FetchXMLQuestionArray, QuestionsArray[questionIndex].id);
                        if (_fetchIndex != -1) {
                            FetchXMLQuestionArray[_fetchIndex] = fetchQObject;
                        }
                        else
                            FetchXMLQuestionArray.push(fetchQObject);

                        var numberOfChildSurveys = "";

                        var dynamicTable = "<div class='Question col-sm-4' isRequired='" + IsMandatory + "' isshowdefault='" + IsShowDefault + "' custtype='lookup' id='" + QuestionsArray[questionIndex].id +
                            "'><label class='col-form-label'>" + Question + "</label></div><div class='col-sm-8 Lookup' id='Answer" + QuestionsArray[questionIndex].id + "' ><input id='Lookup" + QuestionsArray[questionIndex].id +
                            "' class='form-control' customtype='lookup' /></div>";

                        if (_entityName == "ebecssvy_survey") {
                            numberOfChildSurveys = "<div class='form-group row' id='divNumberOfChildSurveys" + QuestionsArray[questionIndex].id + "'><div class='col-sm-4' custtype='text' id='" +
                                QuestionsArray[questionIndex].id + "'><label class='col-form-label'>" + "Skriv antallet af fordampere/fancoils" + "</label></div><div class='col-sm-8'  id='divChildSurveyCount" +
                                QuestionsArray[questionIndex].id + "' ><input class='form-control' customtype='text' id='childSurveyCount" + QuestionsArray[questionIndex].id + "' customid ='" +
                                QuestionsArray[questionIndex].id + "' type ='text' placeholder='Skriv antallet af fordampere/fancoils'/></div></div></br></br>"; //placeholder='Skriv antallet af fordampere/fancoils'                   
                        }

                        if (SectionId != null) {
                            var tableElement = $('#QAConatiner').find("#" + SectionId);
                            if (tableElement.length > 0)
                                $(tableElement).append("<div class='form-group row' " + ShowQuestion + ">" + dynamicTable + "</div>" + numberOfChildSurveys);
                            else
                                $('#QAConatiner').append("<fieldset class='col-md-12' id='" + SectionId + "' " + showSection + "><legend>" + sectionName + "</legend><div class='form-group row' " + ShowQuestion + ">" + dynamicTable + "</div>" + numberOfChildSurveys + "</fieldset>");

                            if (isSRequired == "true") {
                                $($("#" + QuestionsArray[questionIndex].id).children()[0]).addClass('required');
                            }
                        }
                        else
                            $('#QAConatiner').append("<div class='form-group row' " + ShowQuestion + ">" + dynamicTable + "</div>" + numberOfChildSurveys);

                        if (IsMandatory == "true") {
                            if ($("#" + QuestionsArray[questionIndex].id).children().length > 0)
                                $($("#" + QuestionsArray[questionIndex].id).children()[0]).addClass('required');
                        }

                        if (_entityName == "ebecssvy_survey") {   

                            //MobileCRM.bridge.alert("Inside Focus Out controller : " + $("#divNumberOfChildSurveys" + QuestionsArray[questionIndex].id).length);
                            $("#divNumberOfChildSurveys" + QuestionsArray[questionIndex].id).hide();

                            $("#childSurveyCount" + QuestionsArray[questionIndex].id).focusout(function (e) {
                                //MobileCRM.bridge.alert("Inside Focus Out");
                                var CurrentData = $("#" + e.target.id).val();
                                //MobileCRM.bridge.alert("CurrentData:" + CurrentData + " ParentSurveyIdstoCreateChildSurveys.Length: " + ParentSurveyIdstoCreateChildSurveys.length);
                                for (var l = 0; l < ParentSurveyIdstoCreateChildSurveys.length; l++) {
                                    //MobileCRM.bridge.alert("Inside For Loop: " + l);
                                    if (CurrentData != "" && CurrentData != 0) {
                                        for (var q = 0; q < CurrentData; q++) {
                                            ++childSurveyCount;
                                            //MobileCRM.bridge.alert("childSurveyCount: " + childSurveyCount + "Inside 2nd For Loop: " + q + " ParentSurveyIdstoCreateChildSurveys[l].selectedtemplateId: " + ParentSurveyIdstoCreateChildSurveys[l].selectedtemplateId + " ParentSurveyIdstoCreateChildSurveys[l].templateName: " + ParentSurveyIdstoCreateChildSurveys[l].templateName);
                                            createChildSurvey(childSurveyCount, _CConductedSurveyId, ParentSurveyIdstoCreateChildSurveys[l].selectedtemplateId, ParentSurveyIdstoCreateChildSurveys[l].templateName);
                                        }
                                    } else {
                                        ++childSurveyCount;
                                        createChildSurvey(childSurveyCount, _CConductedSurveyId, ParentSurveyIdstoCreateChildSurveys[l].selectedtemplateId, ParentSurveyIdstoCreateChildSurveys[l].templateName);
                                    }
                                }

                                ParentSurveyIdstoCreateChildSurveys = [];

                                //DO NOT DELETE FOLLOWING CODE
                                //Following function copy reference data from parent survey to child surveys
                                /**
                                MobileCRM.MetaEntity.loadByName(
                                                        "ebecssvy_conductedsurvey",
                                                        function (metaEntity) {
                                                            var conductedSurveyFectchXml = "<fetch version='1.0' resultformat='DynamicEntities' output-format='xml-platform' mapping='logical' distinct='false'>" +
                                                                "<entity name='ebecssvy_conductedsurvey'>" +
                                                                "<attribute name='ebecssvy_conductedsurveyid' />";
                                                            for (var index = 0; index < metaEntity.properties.length; index++) {
                                                                if (metaEntity.properties[index].type === 7 && metaEntity.properties[index].isReference === true) {
                                                                    if (metaEntity.properties[index].name !== "ebecssvy_parentconductedsurvey" && metaEntity.properties[index].name !== "ebecssvy_surveytemplateid") {
                                                                        lookUpFileds.push(metaEntity.properties[index].name);
                                                                        conductedSurveyFectchXml = conductedSurveyFectchXml + "<attribute name='" + metaEntity.properties[index].name + "' />";
                                                                    }
                                                                }
                                                            }
                                                            conductedSurveyFectchXml = conductedSurveyFectchXml + "<filter type='and'>" +
                                                                "<condition attribute='ebecssvy_conductedsurveyid' operator='eq'  uitype='ebecssvy_conductedsurvey' value='{" + _CConductedSurveyId + "}' />" +
                                                                "</filter>" +
                                                                "</entity>" +
                                                                "</fetch>";
    
                                                            MobileCRM.FetchXml.Fetch.executeFromXML(conductedSurveyFectchXml, function (data) {
                                                                //MobileCRM.bridge.enableDebug();
                                                                //debugger;
                                                                var _conductedsurveyRec = MobileCRM.DynamicEntity.createNew("ebecssvy_conductedsurvey");
                                                                var props = {};
                                                                var date = new Date();
                                                                props.ebecssvy_name = recordName + "_" + date.toLocaleDateString();
                                                                //props.ebecssvy_creator = _CurrentUserId ? new MobileCRM.Reference("systemuser", _CurrentUserId) : null;
                                                                props.ebecssvy_parentconductedsurvey = new MobileCRM.Reference("ebecssvy_conductedsurvey", _CConductedSurveyId);
                                                                props.ebecssvy_surveytemplateid = new MobileCRM.Reference("ebecssvy_survey", selectedTemplateId);
                                                                props.ebecssvy_order = childSurveyCount;
    
                                                                if (lookUpFileds.length > 0) {
                                                                    for (var count = 0; count < lookUpFileds.length; count++) {
                                                                        if (data[0].properties[lookUpFileds[count]] !== undefined && data[0].properties[lookUpFileds[count]] != null) {
                                                                            props[lookUpFileds[count]] = new MobileCRM.Reference(data[0].properties[lookUpFileds[count]].entityName, data[0].properties[lookUpFileds[count]].id);
                                                                        }
                                                                    }
    
                                                                }
                                                                _conductedsurveyRec.properties = props;
                                                                _conductedsurveyRec.save(
                                                                    function (error) {
                                                                        //MobileCRM.bridge.enableDebug();
                                                                        //debugger;
                                                                        if (error) {
                                                                            MobileCRM.bridge.alert("An error occurred: " + error);
                                                                            removePanels();
                                                                        } else {
                                                                            var newId = this.id;
                                                                            var allProps = this.properties;
                                                                            _conductedSurvey = newId;
                                                                        }
                                                                    });
    
                                                            }, function (error) {
                                                                //MobileCRM.bridge.enableDebug();
                                                                //debugger;
                                                                MobileCRM.bridge.alert("Sorry, error occured while creating child survey.")
                                                            }, null);
    
                                                        }, MobileCRM.bridge.alert, null);*/
                            });

                            $("#childSurveyCount" + QuestionsArray[questionIndex].id + "").keydown(function (event) {
                                if ((this.selectionStart === 0 && event.keyCode === 109) || event.keyCode === 46 || event.keyCode === 8 || event.keyCode === 9 || event.keyCode === 27 || event.keyCode === 13 || (event.keyCode === 65 && event.ctrlKey) || (event.keyCode >= 35 && event.keyCode <= 39)) {
                                    //This method is used for removing loading panel on the html page and giving access to editing on html page
                                    return;
                                } else {
                                    if ((event.shiftKey || ((event.keyCode < 48 || event.keyCode > 57) && (event.keyCode < 96 || event.keyCode > 105))) && event.keyCode != 189) {
                                        event.preventDefault();
                                    }
                                }
                            });

                        }                        

                        $("#Lookup" + QuestionsArray[questionIndex].id).kendoComboBox({
                            filter: "contains",
                            open: function (e) {
                                $($($(e.sender.wrapper[0]).children("span"))).children("input").blur();
                            },
                            placeholder: "Enter starting letters ..",
                            dataTextField: "RecordName",
                            dataValueField: "ImageUrlDef",
                            dataRecordId: "RId",
                            suggest: false,
                            template: '<span class="k-state-default" style="background-image: url(\'#:ImageUrlDef#\'); float:right;display: block;overflow: hidden;height: 60px; width: 60px; background-size:100%;background-repeat:no-repeat;"></span>' +
                                '<span class="k-state-default"><div style="white-space:nowrap; overflow:hidden; text-overflow:ellipsis; display:block; font-size:12px;">#: RecordName #</div></span>',
                            dataSource: [],
                            select: function (e) {
                                e.sender.close();
                            },
                            change: function (e) {
                                $($($(e.sender.wrapper[0]).children("span"))).children("div#CBI").css("display", "none");
                                $($($(e.sender.wrapper[0]).children("span"))).children("input").css({ "padding-right": "0px" });
                                {
                                    //MobileCRM.bridge.alert("ON change 1");
                                    var IsChanged = "true";
                                    var questionId = this.input.context.id;
                                    questionId = questionId.replace("Lookup", "");

                                    if ($("#divNumberOfChildSurveys" + questionId) != undefined && $("#divNumberOfChildSurveys" + questionId) != null) {
                                        //MobileCRM.bridge.alert("kendo ON change : " + $("#divNumberOfChildSurveys" + questionId));
                                        $("#childSurveyCount" + questionId).val("");
                                        $("#divNumberOfChildSurveys" + questionId).hide();
                                    }

                                    changeRelatedLookup(questionId);
                                    if (this.select() == -1) {
                                        var comboBoxCurrent = $("#" + questionId).data("kendoComboBox");
                                        comboBoxCurrent.select(-1);
                                        comboBoxCurrent.text("");                                        
                                    }

                                    var localE = e;
                                    var localThis = this;

                                    var _LookupDataIndex = findLookupIndex(LookupArray, questionId);
                                    if (_LookupDataIndex != -1) {
                                        if (this.dataItem() != undefined && this.dataItem() != null) {
                                            //MobileCRM.bridge.alert("this.dataItem().RecordName: " + this.dataItem().RecordName + " : " + this.dataItem().RId);
                                            LookupArray[_LookupDataIndex].GLAnswer = this.dataItem().RecordName;
                                            LookupArray[_LookupDataIndex].GLAnswerId = this.dataItem().RId;
                                        }
                                        else {
                                            //MobileCRM.bridge.alert("EMPTY ");
                                            LookupArray[_LookupDataIndex].GLAnswer = "";
                                            LookupArray[_LookupDataIndex].GLAnswerId = "";
                                        }
                                    }
                                    else {
                                        var GLObject = new Object();
                                        GLObject.Qid = questionId;
                                        if (localThis.dataItem() != undefined && localThis.dataItem() != null) {
                                            GLObject.GLAnswer = this.dataItem().RecordName;
                                            GLObject.GLAnswerId = this.dataItem().RId;
                                        }
                                        else {
                                            GLObject.GLAnswer = "";
                                            GLObject.GLAnswerId = "";
                                        }
                                        LookupArray.push(GLObject);
                                    }
                                    
                                    //MobileCRM.bridge.alert("entityName.toLowerCase(): " + entityName.toLowerCase());
                                    //$($($(e.sender.wrapper[0]).children("span"))).children("div#CBI").css("background-image", "url(" + this.dataItem().ImageUrlDef + ")");
                                    if (localThis.dataItem() != undefined && localThis.dataItem() != null) {
                                        var entityName = "";                                        
                                        var FetchXMLIndex = findFetchIndex(FetchXMLQuestionArray, questionId);
                                        if (FetchXMLIndex != -1) {
                                            entityName = FetchXMLQuestionArray[FetchXMLIndex].entityName;
                                        }

                                        //MobileCRM.bridge.alert("FetchXMLIndex: " + FetchXMLIndex + " FetchXMLQuestionArray.length: " + FetchXMLQuestionArray.length + " questionId: " + questionId);

                                        if (IsChanged == "true") {
                                            //MobileCRM.bridge.alert("entityName.toLowerCase(): " + entityName.toLowerCase());
                                            if (entityName.toLowerCase() == "ebecssvy_survey") {
                                                var recordName = this.dataItem().RecordName;
                                                var selectedTemplateId = this.dataItem().RId;
                                                var lookUpFileds = [];
                                                if (ParentSurveyIdstoCreateChildSurveys != null && typeof ParentSurveyIdstoCreateChildSurveys != 'undefined' && ParentSurveyIdstoCreateChildSurveys.length > 0) {
                                                    for (var i = 0; i < ParentSurveyIdstoCreateChildSurveys.length; i++) {
                                                        if (ParentSurveyIdstoCreateChildSurveys[i].questionId == this.dataItem().RId) {
                                                            ParentSurveyIdstoCreateChildSurveys[i].selectedtemplateId = selectedTemplateId;
                                                            ParentSurveyIdstoCreateChildSurveys[i].templateName = recordName;
                                                            break;
                                                        }
                                                    }
                                                } else {
                                                    var obj = new Object();
                                                    obj.selectedtemplateId = selectedTemplateId;
                                                    obj.templateName = recordName;
                                                    obj.questionId = this.dataItem().RId;
                                                    ParentSurveyIdstoCreateChildSurveys.push(obj);
                                                }

                                                if ($("#divNumberOfChildSurveys" + questionId) != null && $("#divNumberOfChildSurveys" + questionId) != undefined) {                                              
                                                    $("#divNumberOfChildSurveys" + questionId).show();
                                                    $("#childSurveyCount" + questionId).val("");
                                                }                                                
                                            }
                                            else {
                                                CatchAnswer_Lookup(this.input.context.id, this.dataItem().RecordName, this.dataItem().RId);
                                            }
                                        }
                                        {
                                            $($($(e.sender.wrapper[0]).children("span"))).children("div#CBI").css("display", "block");
                                            $($($(e.sender.wrapper[0]).children("span"))).children("input").css({ "padding-right": "30px" });
                                        }
                                    }
                                }
                            },
                            height: 200
                        });

                        CheckResponse_Prev(QuestionsArray[questionIndex].id, "", QuestionTypes.Lookup, "Lookup" + QuestionsArray[questionIndex].id, null, null, false);

                        $("#Lookup" + QuestionsArray[questionIndex].id).data("kendoComboBox").input.focusout(function (e) {
                            var item = e.currentTarget;
                            if (item != undefined && item != null && item.parentElement != undefined && item.parentElement != null && item.parentElement.parentElement != undefined &&
                                item.parentElement.parentElement != null && $(item.parentElement.parentElement).length > 0 && $(item.parentElement.parentElement).find('input').length > 1) {

                                var qId = $(item.parentElement.parentElement).find('input')[1].id;
                                if (qId != undefined && qId != null && qId != "") {
                                    qId = qId.toString().replace("Lookup", "");
                                }
                                //MobileCRM.bridge.alert("On focus out : " + qId);
                                changeRelatedLookup(qId);

                                var val = $(item.parentElement.parentElement).find('input')[0].value;
                                //MobileCRM.bridge.alert("On focus out val : " + val);
                                if (val == undefined || val == null || val == "") {
                                    var combobox = $("#Lookup" + qId + "").data("kendoComboBox");

                                    if (combobox != undefined && combobox.dataSource != undefined && $("#Lookup" + qId + "").data("kendoComboBox").dataSource._data.length > 0) {
                                        combobox.setDataSource(null);
                                        combobox.value("");
                                        combobox.text("");
                                        combobox.refresh();
                                        combobox.dataSource.read();

                                        var _LookupDataIndex = findLookupIndex(LookupArray, qId);
                                        if (_LookupDataIndex != -1) {
                                            LookupArray[_LookupDataIndex].GLAnswer = "";
                                            LookupArray[_LookupDataIndex].GLAnswerId = "";
                                        }

                                        if ($("#divNumberOfChildSurveys" + qId) != undefined && $("#divNumberOfChildSurveys" + qId) != null) {
                                            $("#childSurveyCount" + qId).val("");
                                            $("#divNumberOfChildSurveys" + qId).hide();
                                        }
                                    }

                                    $($($(combobox.wrapper[0]).children("span"))).children("div#CBI").css("display", "none");
                                    if (typeof combobox !== "undefined") {
                                        combobox.select(-1);
                                    }

                                    //combobox.text("");
                                }
                            }                                                       
                        });

                        $("#Lookup" + QuestionsArray[questionIndex].id).data("kendoComboBox").input.keyup(function (e) {
                            var item = e.currentTarget;
                            if (item != undefined && item != null && item.parentElement != undefined && item.parentElement != null && item.parentElement.parentElement != undefined &&
                                item.parentElement.parentElement != null && $(item.parentElement.parentElement).length > 0 && $(item.parentElement.parentElement).find('input').length > 1) {
                                var inp = $(item.parentElement.parentElement).find('input');
                                var qId = inp[1].id;
                                var starters = inp[0].value;

                                if (qId != undefined && qId != null && qId != "") {
                                    qId = qId.toString().replace("Lookup", "");
                                }

                                changeRelatedLookup(qId);
                                //MobileCRM.bridge.alert("starters: " + starters);
                                if (starters != undefined && starters != null && starters != "" && starters.length > 0) {

                                    //Delete existing elements
                                    var combobox = $("#Lookup" + qId + "").data("kendoComboBox");

                                    if ($("#Lookup" + qId + "").data("kendoComboBox").dataSource._data.length > 0) {
                                        combobox.setDataSource(null);
                                        combobox.value("");
                                        combobox.text("");
                                        combobox.refresh();
                                        combobox.dataSource.read();

                                        var _LookupDataIndex = findLookupIndex(LookupArray, qId);
                                        if (_LookupDataIndex != -1) {
                                            LookupArray[_LookupDataIndex].GLAnswer = "";
                                            LookupArray[_LookupDataIndex].GLAnswerId = "";
                                        }
                                    }

                                    if (combobox.dataSource.length > 0) {
                                        $($($(combobox.wrapper[0]).children("span"))).children("div#CBI")[0].hidden = true
                                        $($($(combobox.wrapper[0]).children("span"))).children("div#CBI").css("background-image", "none")
                                    }
                                    if (combobox.dataSource._data.length > 0) {
                                        combobox.dataSource._data.length = 0;
                                    }

                                    //Repopulate Data
                                    var question = $.grep(QuestionsArray, function (obj) {
                                        return obj.properties["ebecssvy_questionsid"] == qId;
                                    });

                                    var priName = "";

                                    //MobileCRM.bridge.alert("question: " + question.length);
                                    if (question != null && question != "" && typeof question != 'undefined' && question.length > 0) {
                                        priName = question[0].properties["ebecssvy_lookupentityprimaryname"];                                        

                                        if (question[0] != null && question[0] != "" && typeof question[0] != 'undefined') {
                                            var filterCondition = '<condition attribute="' + priName + '" value="' + starters + '%" operator="like"></condition>';
                                            //MobileCRM.bridge.alert("filtercondition " + filterCondition);
                                            FilterLookupQuestion(qId, filterCondition, "ApplyFilter");                                            
                                            combobox.open();
                                        } else {
                                            FilterLookupQuestion(qId, null, "ApplyFilter");
                                            combobox.open();
                                        }
                                    }
                                    combobox.text(starters);
                                    combobox.open();
                                }
                                else {
                                    var combobox = $("#Lookup" + qId + "").data("kendoComboBox");

                                    if (combobox != undefined && combobox.dataSource != undefined && $("#Lookup" + qId + "").data("kendoComboBox").dataSource._data.length > 0) {
                                        combobox.setDataSource(null);
                                        combobox.value("");
                                        combobox.text("");
                                        combobox.refresh();
                                        combobox.dataSource.read();

                                        var _LookupDataIndex = findLookupIndex(LookupArray, qId);
                                        if (_LookupDataIndex != -1) {
                                            LookupArray[_LookupDataIndex].GLAnswer = "";
                                            LookupArray[_LookupDataIndex].GLAnswerId = "";
                                        }

                                        if ($("#divNumberOfChildSurveys" + qId) != undefined && $("#divNumberOfChildSurveys" + qId) != null) {
                                            $("#childSurveyCount" + qId).val("");
                                            $("#divNumberOfChildSurveys" + qId).hide();
                                        }
                                    }

                                    $($($(combobox.wrapper[0]).children("span"))).children("div#CBI").css("display", "none");
                                    if (typeof combobox !== "undefined") {
                                        combobox.select(-1);
                                    }
                                    //combobox.text("");
                                    FilterLookupQuestion(qId, null, "ApplyFilter"); //reset filtered lookups
                                }
                            }
                        });                        

                        $("#Lookup" + QuestionsArray[questionIndex].id).data("kendoComboBox").input.change(function (e) {
                            //Don't delete this. This keep the lookup onchange of the $("#divNumberOfChildSurveys" + questionId) controller hide
                            //MobileCRM.bridge.alert("this: " + this.text + " e: " + e);   
                            var item = e.currentTarget;
                            if (item != undefined && item != null && item.parentElement != undefined && item.parentElement != null && item.parentElement.parentElement != undefined &&
                                item.parentElement.parentElement != null && $(item.parentElement.parentElement).length > 0 && $(item.parentElement.parentElement).find('input').length > 1) {
                                var inp = $(item.parentElement.parentElement).find('input');
                                var qId = inp[1].id;
                                var starters = inp[0].value;                                

                                if (!(starters != undefined && starters != null && starters != "" && starters.length > 0)) {
                                    combobox.setDataSource(null);
                                    combobox.value("");
                                    combobox.text("");
                                    combobox.refresh();
                                    combobox.dataSource.read();

                                    var _LookupDataIndex = findLookupIndex(LookupArray, qId);
                                    if (_LookupDataIndex != -1) {
                                        LookupArray[_LookupDataIndex].GLAnswer = "";
                                        LookupArray[_LookupDataIndex].GLAnswerId = "";
                                    }                                    

                                    if ($("#divNumberOfChildSurveys" + qId) != undefined && $("#divNumberOfChildSurveys" + qId) != null) {
                                        $("#childSurveyCount" + qId).val("");
                                        $("#divNumberOfChildSurveys" + qId).hide();
                                    }
                                }
                            }
                        });

                    }
                    else if (AttributeType == QuestionTypes.Calculated)  //Calculated
                    {
                        //MobileCRM.bridge.alert(" QuestionTypes.Calculated : " + QuestionTypes.Calculated);
                        var dynamicTable = "<div class='Question col-sm-4' custtype='Calculated' isshowdefault='" + IsShowDefault + "' id='" + QuestionsArray[questionIndex].id + "'><label class='col-form-label'>" + Question + symbol +
                            "</label></div><div class='col-sm-8 Answer' id='" + QuestionsArray[questionIndex].id +
                            "' ><input class='form-control' placeholder='Calculated' customtype='Calculated' type ='text' id='Calculated" + QuestionsArray[questionIndex].id + "' customid='" +
                            QuestionsArray[questionIndex].id + "'  readonly /></div>";

                        if (SectionId != null) {
                            //MobileCRM.bridge.alert("Section : " + showSection + " : " + "ShowQuestion : " + ShowQuestion);
                            var tableElement = $('#QAConatiner').find("#" + SectionId);
                            if (tableElement.length > 0)
                                $(tableElement).append("<div class='form-group row' " + ShowQuestion + ">" + dynamicTable + "</div>");
                            else
                                $('#QAConatiner').append("<fieldset class='col-md-12' id='" + SectionId + "' " + showSection + "><legend>" + sectionName + "</legend><div class='form-group row' " + ShowQuestion + ">" + dynamicTable + "</div></fieldset>");
                            if (isSRequired == "true") {
                                $($("#" + QuestionsArray[questionIndex].id).children()[0]).addClass('required');
                            }
                        }
                        else
                            $('#QAConatiner').append("<div class='form-group row' style='display:" + ShowQuestion + "' >" + dynamicTable + "</div>");

                        CheckResponse_Prev(QuestionsArray[questionIndex].id, SurveyId, AttributeType, "Calculated" + QuestionsArray[questionIndex].id);

                    }
                    else if (AttributeType == QuestionTypes.Signature) {

                        var height = '600px';
                        var width = '500px';
                        if (QuestionsArray[questionIndex].properties["ebecssvy_imagewidthpx"] !== 0 && QuestionsArray[questionIndex].properties["ebecssvy_imageheightpx"] !== 0
                            && QuestionsArray[questionIndex].properties["ebecssvy_imagewidthpx"] != null && QuestionsArray[questionIndex].properties["ebecssvy_imageheightpx"] != null
                            && typeof QuestionsArray[questionIndex].properties["ebecssvy_imagewidthpx"] != 'undefined' && typeof QuestionsArray[questionIndex].properties["ebecssvy_imageheightpx"] != 'undefined'
                            && QuestionsArray[questionIndex].properties["ebecssvy_imagewidthpx"] != "" && QuestionsArray[questionIndex].properties["ebecssvy_imageheightpx"] != "")
                        {                            
                            height = QuestionsArray[questionIndex].properties["ebecssvy_imageheightpx"];
                            width = QuestionsArray[questionIndex].properties["ebecssvy_imagewidthpx"];
                        }
                        var dynamicTable = "<div class='Question col-sm-4' isRequired='" + IsMandatory + "' custtype = 'signature' isshowdefault = '" + IsShowDefault + "' id = '" + QuestionsArray[questionIndex].id + "' > <label class='col-form-label'>" +
                            Question + " </label></div>" +
                            "<div id='Answerid" + QuestionsArray[questionIndex].id + "'  class='col-sm-8 Answer' tabindex='" + (qIndex) + "'>" +
                            "<div id='signature-pad" + QuestionsArray[questionIndex].id + "' class='signature-pad' custtype='signature' style='height:" + height + "px;width:" + width + "px;' tabindex='" + (qIndex + 1) + "'> "+
                            "<div class='signature-pad--body' style='height:100%; width:100%;' tabindex='" + (qIndex + 2) + "'>" +
                                                                "<canvas custtag='signature' id='signature" + QuestionsArray[questionIndex].id + "' style='height:100%; width:100%;' tabindex='" + (qIndex + 3) + "'></canvas>" +
                                                            "</div>"+
                                                            "<div class='signature-pad--footer' > " +
                                                                "<div class='description'>Sign above</div>" +
                                                                "<div class='signature-pad--actions' > <div>" +
                                                                "<button id='signature-btn" + QuestionsArray[questionIndex].id + "' type = 'btnClearSignature' class='btn btn-info btn-sm' data-action='clear' > Clear</button > " +
                                                            "</div>" +                                        
                                                        "</div>" +
                                                     "</div>"   ;

                        //MobileCRM.bridge.alert("dynamicTable : " + dynamicTable);
                        var reqAnsWidth = ($(".container")[0].offsetWidth / 12) * 8;
                        if ($(".container")[0].offsetWidth < 545) {
                            reqAnsWidth = $(".container")[0].offsetWidth;
                        }
                        if (SectionId != null) {
                            var tableElement = $('#QAConatiner').find("#" + SectionId);
                            if (tableElement.length > 0)
                                $(tableElement).append("<div class='form-group row' " + ShowQuestion + ">" + dynamicTable + "</div>");
                            else
                                $('#QAConatiner').append("<fieldset class='col-md-12' id='" + SectionId + "' " + showSection + "><legend>" + sectionName + "</legend><div class='form-group row' " + ShowQuestion + ">" + dynamicTable + "</div></fieldset>");
                            if (isSRequired == "true") {
                                $($("#" + QuestionsArray[questionIndex].id).children()[0]).addClass('required');
                            }
                            if (reqAnsWidth >= $("#" + SectionId)[0].offsetWidth) {
                                reqAnsWidth = $("#" + SectionId)[0].offsetWidth - 5;
                            }
                        }
                        else
                            $('#QAConatiner').append("<div class='form-group row' style='display:" + ShowQuestion + "' >" + dynamicTable + "</div>");
                        
                        if (parseFloat(width.toString().replace("px", "")) > reqAnsWidth) {
                            $("#signature-pad" + QuestionsArray[questionIndex].id)[0].style.width = (reqAnsWidth - 25).toString() + "px";
                            $("#signature" + QuestionsArray[questionIndex].id)[0].style.width = (reqAnsWidth - 57).toString() + "px";
                        }
                        if (IsMandatory == "true") {
                            if ($("#" + QuestionsArray[questionIndex].id).children().length > 0)
                                $($("#" + QuestionsArray[questionIndex].id).children()[0]).addClass('required');
                        }
                        //MobileCRM.bridge.alert("answer offset : " + $("#signature" + QuestionsArray[questionIndex].id)[0].width + " : " + reqAnsWidth + " : " + $("#signature-pad" + QuestionsArray[questionIndex].id)[0].style.width + " : " + width);
                        SignaturePadObjectArray[questionIndex] = LoadSignature(QuestionsArray[questionIndex].id, width, height);
                        //MobileCRM.bridge.alert("SignaturePadObjectArray[questionIndex] : " + SignaturePadObjectArray[questionIndex]);
                        CheckResponse_Prev(QuestionsArray[questionIndex].id, SurveyId, AttributeType, "signature" + QuestionsArray[questionIndex].id);
                        $("#signature-pad" + QuestionsArray[questionIndex].id + "").focusout(function () {
                            //MobileCRM.bridge.alert("Focus out hit ");
                            var id = this.id.toString();
                            id = id.replace("signature-pad", "");
                            var index = findCrmEntityArrayIndex(QuestionsArray, id);
                            CatchAnswer_Signature(id, SignaturePadObjectArray[index].isEmpty());
                        }); 
                    }
                    else if (AttributeType != QuestionTypes.CaptureScore)  //Skip Capture Score question type
                    {
                        $('#QAConatiner').append("<div class='form-group row' " + ShowQuestion + "><div isRequired='false' class='Question col-sm-4' id='" + QuestionsArray[questionIndex].id + "'><label class='col-form-label'>" +
                            Question + "</label></div><div class='col-sm-8 Answer' id='" + QuestionsArray[questionIndex].id + "' ></div>");
                    }
                    questionIndex++;
                    if (highlightQ != null) {
                        if ($("#" + highlightQ).length > 0) {
                            $("#" + highlightQ).addClass('GoToQuestionStyle');
                            highlightQ = null;
                        }
                    }

                    var isQRequired = IsQuestionRequired(currentQuestion);
                    if (isQRequired == "true") {
                        var qRequired = currentQuestion;
                        if ($("#" + qRequired).length > 0) {
                            var questionTd = $("#" + qRequired + ".Question");
                            $(questionTd).attr("isRequired", true);
                            if ($(questionTd).children().length > 0)
                                $($(questionTd).children()[0]).addClass('required');
                        }
                    }
                }
                removePanels();
                if (j >= 1)
                    document.getElementById('previousid').disabled = false;
                else {
                    document.getElementById('previousid').disabled = true;
                }
                if (j == Result_Tabs.length - 1) {
                    //document.getElementById('nextid').disabled = true;
                    $('#Save').show();
                    $("#Finish").show();
                    $("#nextid").hide();
                }
                else {
                    $('#Save').show();
                    $("#Finish").hide();
                    $("#nextid").show();
                }
            }

            // LoadQuestionRelatedActions(currentTabId);
            LoadActionsOnLoad("", true);
        }

        function createChildSurvey(childSurveyCount, parentSurveyId, templateId, templateName) {
            //MobileCRM.bridge.alert("childSurveyCount: " + childSurveyCount + " parentSurveyId: " + parentSurveyId + " templateId: " + templateId + " templateName: " + templateName);
            var _conductedsurveyRec = MobileCRM.DynamicEntity.createNew("ebecssvy_conductedsurvey");
            var props = {};
            var date = new Date();
            props.ebecssvy_name = templateName + "_" + date.toLocaleDateString();
            props.ebecssvy_parentconductedsurvey = new MobileCRM.Reference("ebecssvy_conductedsurvey", _CConductedSurveyId);
            props.ebecssvy_surveytemplateid = new MobileCRM.Reference("ebecssvy_survey", templateId);
            props.ebecssvy_order = childSurveyCount;

            _conductedsurveyRec.properties = props;
            _conductedsurveyRec.save(
                function (error) {
                    //MobileCRM.bridge.enableDebug();
                    //debugger;
                    if (error) {
                        MobileCRM.bridge.alert("An error occurred: " + error);
                        removePanels();
                    } else {
                        var newId = this.id;
                        var allProps = this.properties;
                    }
                });
        }

        function changeRelatedLookup(questionId, value, symbol) {
            //MobileCRM.bridge.alert("questionId: " + questionId + " value: " + value + " symbol: " + symbol + " : " + FilteredLookupQuestions[0].ebecssvy_RelatedQuestion);
            if (value != undefined && value != null && value != "") {
                if (symbol != null && symbol != null && symbol == value) {
                    //we have to clear if value only contains the symbol
                }
                else {
                    return;
                }
            }
            var relatedLookupQ = $.grep(FilteredLookupQuestions, function (e) {
                return e.ebecssvy_RelatedQuestion == "{" + questionId + "}";
            });
            //MobileCRM.bridge.alert("relatedLookupQ: " + relatedLookupQ[0].id);
            if (relatedLookupQ != undefined && relatedLookupQ != null && relatedLookupQ.length > 0) {
                var combobox = $("#Lookup" + relatedLookupQ[0].id + "").data("kendoComboBox");

                if (combobox != undefined && combobox.dataSource != undefined && $("#Lookup" + relatedLookupQ[0].id + "").data("kendoComboBox").dataSource._data.length > 0) {

                    for (var i = 0; i < $("#Lookup" + relatedLookupQ[0].id).data("kendoComboBox").dataSource._data.length; i++) {
                        if ($("#Lookup" + relatedLookupQ[0].id).data("kendoComboBox").dataSource != null && $("#Lookup" + relatedLookupQ[0].id).data("kendoComboBox").dataSource._data != null
                            && typeof $("#Lookup" + relatedLookupQ[0].id).data("kendoComboBox").dataSource._data != 'undefined'
                            && $("#Lookup" + relatedLookupQ[0].id).data("kendoComboBox").dataSource._data.length > 0) {
                            combobox.dataSource.remove($("#Lookup" + relatedLookupQ[0].id).data("kendoComboBox").dataSource._data[0]);    //dont replace this 0 with i because it always delete first item from the array and array index will reset
                        }
                    }
                }
                //MobileCRM.bridge.alert("$('#Lookup' + relatedLookupQ.id).data('kendoComboBox').dataSource._data.length: " + $("#Lookup" + relatedLookupQ[0].id).data("kendoComboBox").dataSource._data.length);
                $($($(combobox.wrapper[0]).children("span"))).children("div#CBI").css("display", "none");
                if (typeof combobox !== "undefined") {
                    combobox.select(-1);
                }

                if (combobox != null && typeof combobox != 'undefined') {
                    combobox.setDataSource(null);
                    combobox.value("");
                    //combobox.text("");
                    combobox.refresh();
                    combobox.dataSource.read();
                }

                var _LookupDataIndex = findLookupIndex(LookupArray, relatedLookupQ[0].id);
                if (_LookupDataIndex != -1) {
                    LookupArray[_LookupDataIndex].GLAnswer = "";
                    LookupArray[_LookupDataIndex].GLAnswerId = "";
                }
            }
        }

        function FormatNumber(num, symbol, numberOfDecimalPlaces, enableZeroFill) {
            //MobileCRM.bridge.alert("number: " + num + " symbol: " + symbol + " numberOfDecimalPlaces: " + numberOfDecimalPlaces + " enableZeroFill: " + enableZeroFill);
            var str = num.toString().replace(symbol, ""), parts = false, output = [], i = 1, formatted = "", decimalComponent = null;
            var existingDecimalLength = 0;
            var zeroFill = "0";
            var positiveIndicator = "";

            if (str.indexOf(DecimalSeperator) > 0) {
                parts = str.split(DecimalSeperator);
                str = parts[0];
                decimalComponent = parts[1];
            }
            else if (str.indexOf(ThousandSeperator) > 0) {
                var items = str.split(ThousandSeperator);
                if ((items.length > 1 && items[1].length < 3) || items.length == 1) {
                    str = str.replace(ThousandSeperator, DecimalSeperator);
                    parts = str.split(DecimalSeperator);
                    str = parts[0];
                    decimalComponent = parts.length > 1 ? parts[1] : null;
                }
            }

            if (str.slice(0, 2) == "-,") {
                str = str.replace("-,", "");
                positiveIndicator = "-";
            }
            else if (str.slice(0, 2) == "+,")
                str = str.replace("+,", "");
            else if (str.slice(0, 2) == "0,")
                str = str.replace("0,", "");
            else if (str.slice(0, 2) == "-0")
                str = str.replace("-0", "");
            else if (str.slice(0, 2) == "+0")
                str = str.replace("+0", "");
            else if (str.slice(0, 1) == ThousandSeperator)
                str = str.slice(1);
            else if (str.slice(0, 1) == "-") {
                str = str.slice(1);
                positiveIndicator = "-";
            }
            else if (str.slice(0, 1) == "+")
                str = str.slice(1);
            //else if (str.slice(0, 1) == "0")
            //    str = str.replace("0", "");

            if (str.lastIndexOf('-') != -1) {
                str = str.substring(0, str.lastIndexOf('-'));
            }

            str = str.replace(/[^0-9 ]/g, "");
            str = str.split("").reverse();

            if (decimalComponent != null) {
                decimalComponent = decimalComponent.replace(/[^0-9 ]/g, "");

                if (enableZeroFill != null && enableZeroFill != "" && enableZeroFill) {
                    existingDecimalLength = decimalComponent.length;

                    if (numberOfDecimalPlaces > existingDecimalLength) {
                        decimalComponent += zeroFill.repeat(numberOfDecimalPlaces - existingDecimalLength);
                    }
                }
            } else if (enableZeroFill != null && enableZeroFill != "" && enableZeroFill) {
                decimalComponent = zeroFill.repeat(numberOfDecimalPlaces);
            }

            for (var j = 0, len = str.length; j < len; j++) {
                if (str[j] != ThousandSeperator) {
                    if ($.isNumeric(str[j]).toString() == "true")
                        output.push(str[j]);
                    if (i % 3 == 0 && j < (len - 1)) {
                        output.push(ThousandSeperator);
                    }
                    i++;
                }
            }

            //check for all zero regex
            var IsAllZeroReg = /^0+$/;

            if (output != undefined && output != null && output.length > 0) {
                formatted = output.reverse().join("");
            }
            else if (decimalComponent != null && !IsAllZeroReg.test(decimalComponent)) {
                formatted = "0";
            }
            else if (num === 0) {
                formatted = "0";
            }

            //MobileCRM.bridge.alert("symbol: " + symbol + " formatted: " + formatted + " DecimalSeperator: " + DecimalSeperator + " Decimal: " + ((parts) ? DecimalSeperator + decimalComponent.substr(0, numberOfDecimalPlaces) : ""));
            if (enableZeroFill != null && enableZeroFill != "" && enableZeroFill) {
                return (positiveIndicator + symbol + formatted + (numberOfDecimalPlaces != 0 && formatted != "" ? DecimalSeperator + decimalComponent.substr(0, numberOfDecimalPlaces) : ""));
            } else {
                return (positiveIndicator + symbol + formatted + ((parts) ? DecimalSeperator + decimalComponent.substr(0, numberOfDecimalPlaces) : ""));
            }
        }

        //Following function will change existing number to the number which can use for calculations
        function FomatNumberForCalculation(number, symbol) {
            var returnNumber = number.toString().replace(symbol, "");

            while (returnNumber.indexOf(ThousandSeperator) > 0) {
                returnNumber = returnNumber.replace(ThousandSeperator, "");
            }

            if (DecimalSeperator != ".") {
                returnNumber = returnNumber.replace(DecimalSeperator, ".");
            }

            return returnNumber;
        }

        /***************************************************************************************
       * Change number back in to the format
       * This function revert the number back to the current format
       ****************************************************************************************/
        function ReAjustNumber(num) {
            if (DecimalSeperator != ".") {
                num = num.toString().replace(".", DecimalSeperator);
            }
            return num;
        }

        /********************************************************************
        * LoadActionsOnLoad *
        * Execute Action while loading the questions and responses *
        *********************************************************************/
        function LoadActionsOnLoad(callingQuestionId, isOnLoad) {
            //MobileCRM.bridge.enableDebug();
            //debugger;
            try {
                if (QuestionsArray != null && QuestionsArray.length > 0) {

                    for (var qIndex = 0; qIndex < QuestionsArray.length; qIndex++) {
                        var questionType = QuestionsArray[qIndex].properties["ebecssvy_attributetype"];
                        var qusName = QuestionsArray[qIndex].properties["ebecssvy_name"];
                        var questionId = QuestionsArray[qIndex].properties["ebecssvy_questionsid"];

                        //Skip following question types
                        //performance improvement
                        if (questionType == QuestionTypes.CaptureScore || questionType == QuestionTypes.DisplayImage || questionType == QuestionTypes.Label || questionType == QuestionTypes.ShowChildSurvey) {
                            continue;
                        }

                        if (callingQuestionId != null && callingQuestionId != "" && callingQuestionId != questionId) {
                            continue;
                        }

                        var qusRelatedAction = [];

                        if (QuestionRelatedActions != null && QuestionRelatedActions.length > 0) {
                            //Question related actions
                            //match question id
                            qusRelatedAction = $.grep(QuestionRelatedActions, function (arrayItem) {
                                return arrayItem.properties["ebecssvy_relatedquestion"].id === questionId && arrayItem.properties["ebecssvy_relatedentity"] == "213020000";
                            });
                        }

                        var Answers = $.grep(Result_Ans, function (arrayItem) {
                            return arrayItem.properties["ebecssvy_questionsid"].id === questionId;
                        });

                        var currentResponse = null;
                        var currentSurveyAnswerandId = null;

                        //MobileCRM.bridge.alert("SurveyResponses : " + SurveyResponses);
                        if (SurveyResponses != null && SurveyResponses.length > 0) {
                            $.each(SurveyResponses, function () {
                               // MobileCRM.bridge.alert("Survey Response Name: " + this.properties["ebecssvy_name"]);
                                //MobileCRM.bridge.alert("QuestionId: " + questionId + " Response QuestionId: " + this.properties["ebecssvy_questionid"].id);
                                if (this.properties["ebecssvy_questionid"] != null && typeof this.properties["ebecssvy_questionid"] != "undefined" && this.properties["ebecssvy_questionid"].id == questionId) {
                                    currentResponse = this.properties["ebecssvy_name"];
                                    currentSurveyAnswerandId = this.properties["ebecssvy_surveyanswerandid"];
                                    return;
                                }
                            });
                        }

                        //MobileCRM.bridge.alert("OnLoad Name: " + qusName + " Type: " + questionType + " currentResponse: " + currentResponse);

                        if (questionType == QuestionTypes.MultiCheckBox) //MultiCheckBox
                        {
                            //question related action execution
                            if (qusRelatedAction != null && qusRelatedAction != "undefined" && qusRelatedAction.length > 0) {
                                //Has responses - contains data
                                if (currentResponse != null) {

                                    var containsDataActions = $.grep(qusRelatedAction, function (arrayItem) {
                                        return arrayItem.properties["ebecssvy_actiontypesforquestion"] == "213020000";
                                    });

                                    if (containsDataActions != null && containsDataActions != "undefined" && containsDataActions.length > 0) {
                                        checkAction(null, "MultipleAnswer" + questionId, currentResponse, null, true);
                                    }
                                } else {
                                    checkAction(null, "MultipleAnswer" + questionId, null, null, true);
                                }
                            }

                            //Answer related actions
                            if (Answers != null && typeof Answers != "undefined" && Answers.length > 0 && currentResponse != undefined && currentResponse != null) {
                                var multiAns = currentResponse.toString().split(',');
                                $.each(multiAns, function () {
                                    var answerId = GetAnswerIdByQuestionAndName(questionId, this, questionType, Answers);
                                    if (answerId != null && typeof answerId != "undefined") {
                                        showLoadingMessage_Process("Checking actions");
                                        checkAction(answerId, "MultipleAnswer" + questionId, null, null);
                                    }
                                });
                            }
                        }
                        else if (questionType == QuestionTypes.CheckBox) //Checkbox
                        {
                            //MobileCRM.bridge.alert("Inside Checkbox OnLoad");
                            //question related action execution
                            if (qusRelatedAction != null && qusRelatedAction != "undefined" && qusRelatedAction.length > 0) {
                                //Has responses - contains data
                                if (currentResponse != null) {

                                    var containsDataActions = $.grep(qusRelatedAction, function (arrayItem) {
                                        return arrayItem.properties["ebecssvy_actiontypesforquestion"] == "213020000";
                                    });

                                    if (containsDataActions != null && containsDataActions != "undefined" && containsDataActions.length > 0) {
                                        checkAction(null, questionId, currentResponse, null, true);
                                    }
                                } else {
                                    checkAction(null, questionId, null, null, true);
                                }
                            }

                            //Answer related actions
                            if (Answers != null && typeof Answers != "undefined" && Answers.length > 0) {
                                if (currentResponse != null) {
                                    //MobileCRM.bridge.alert("Checkbox currentResponse: " + currentResponse);
                                    showLoadingMessage_Process("Checking actions");
                                    checkAction("checkbox", questionId.toString(), currentResponse.toString(), null);
                                } else {
                                    showLoadingMessage_Process("Checking actions");
                                    checkAction("checkbox", questionId.toString(), "False", null);
                                }
                            }
                        }
                        else if (questionType == QuestionTypes.TrueFalse) //Bool
                        {
                            //question related action execution
                            if (qusRelatedAction != null && qusRelatedAction != "undefined" && qusRelatedAction.length > 0) {
                                //Has responses - contains data
                                if (currentResponse != null) {

                                    var containsDataActions = $.grep(qusRelatedAction, function (arrayItem) {
                                        return arrayItem.properties["ebecssvy_actiontypesforquestion"] == "213020000";
                                    });

                                    if (containsDataActions != null && containsDataActions != "undefined" && containsDataActions.length > 0) {
                                        checkAction(null, "Answer" + questionId, currentResponse, null, true);
                                    }
                                } else {
                                    checkAction(null, "Answer" + questionId, null, null, true);
                                }
                            }

                           // MobileCRM.bridge.alert("Answers : " + Answers + " : " + currentResponse);
                            //Answer related actions
                            if (Answers != null && typeof Answers != "undefined" && Answers.length > 0 && currentResponse != null) {
                                var answerId = GetAnswerIdByQuestionAndName(questionId, currentResponse, questionType, Answers);
                                //MobileCRM.bridge.alert("answerId : " + answerId + " : " + currentResponse + " : " + questionId);
                                if (answerId != null && typeof answerId != "undefined") {
                                    showLoadingMessage_Process("Checking actions");
                                    checkAction(answerId.toString(), "Answer" + questionId.toString(), null, null);
                                }
                            }
                        }
                        else if (questionType == QuestionTypes.List) //Picklist
                        {
                            //question related action execution
                            if (qusRelatedAction != null && qusRelatedAction != "undefined" && qusRelatedAction.length > 0) {
                                //Has responses - contains data
                                if (currentResponse != null) {

                                    var containsDataActions = $.grep(qusRelatedAction, function (arrayItem) {
                                        return arrayItem.properties["ebecssvy_actiontypesforquestion"] == "213020000";
                                    });

                                    if (containsDataActions != null && containsDataActions != "undefined" && containsDataActions.length > 0) {
                                        checkAction(null, "piclistctrl" + questionId, currentResponse, null, true);
                                    }
                                } else {
                                    checkAction(null, "piclistctrl" + questionId, null, null, true);
                                }
                            }

                            //Answer related actions
                            if (Answers != null && typeof Answers != "undefined" && Answers.length > 0 && currentResponse != null) {
                                var answerId = GetAnswerIdByQuestionAndName(questionId, currentResponse, questionType, Answers);
                                //MobileCRM.bridge.alert("answerId: " + answerId + " questionId: " + questionId);
                                //MobileCRM.bridge.alert("answerId.toString : " + answerId.toString() + " questionId: " + questionId.toString());
                                if (answerId != null && typeof answerId != "undefined") {
                                    showLoadingMessage_Process("Checking actions");
                                    checkAction(answerId.toString(), "piclistctrl" + questionId.toString(), null, null);
                                }
                            }
                        }
                        else if (questionType == QuestionTypes.GraphicalList) //Graphical List
                        {
                            //question related action execution
                            if (qusRelatedAction != null && qusRelatedAction != "undefined" && qusRelatedAction.length > 0) {
                                //Has responses - contains data
                                if (currentResponse != null) {

                                    var containsDataActions = $.grep(qusRelatedAction, function (arrayItem) {
                                        return arrayItem.properties["ebecssvy_actiontypesforquestion"] == "213020000";
                                    });

                                    if (containsDataActions != null && containsDataActions != "undefined" && containsDataActions.length > 0) {
                                        checkAction(null, "GraphicalList" + questionId, currentResponse, null, true);
                                    }
                                } else {
                                    checkAction(null, "GraphicalList" + questionId, null, null, true);
                                }
                            }

                            //Answer related actions
                            if (Answers != null && typeof Answers != "undefined" && Answers.length > 0 && currentResponse != null) {
                                var answerId = GetAnswerIdByQuestionAndName(questionId, currentResponse, questionType, Answers);

                                if (answerId != null && typeof answerId != "undefined") {
                                    showLoadingMessage_Process("Checking actions");
                                    checkAction(answerId.toString(), "GraphicalList" + questionId.toString(), null, null);
                                }
                            }
                        }
                        else if (questionType == QuestionTypes.Integer) //Whole Number
                        {
                            //question related action execution
                            if (qusRelatedAction != null && qusRelatedAction != "undefined" && qusRelatedAction.length > 0) {
                                //Has responses - contains data
                                if (currentResponse != null) {

                                    var containsDataActions = $.grep(qusRelatedAction, function (arrayItem) {
                                        return arrayItem.properties["ebecssvy_actiontypesforquestion"] == "213020000";
                                    });

                                    if (containsDataActions != null && containsDataActions != "undefined" && containsDataActions.length > 0) {
                                        checkAction(null, "integer" + questionId, currentResponse, null, true);
                                    }
                                } else {
                                    checkAction(null, "integer" + questionId, null, null, true);
                                }
                            }

                            //Answer related actions
                            if (Answers != null && typeof Answers != "undefined" && Answers.length > 0 && currentResponse != null) {
                                var answerId = GetAnswerIdByQuestionAndName(questionId, currentResponse, questionType, Answers);

                                if (answerId != null && typeof answerId != "undefined") {
                                    showLoadingMessage_Process("Checking actions");
                                    checkAction("integer", "integer" + questionId.toString(), currentResponse.toString(), null);
                                }
                            }
                        }
                        else if (questionType == QuestionTypes.Currency) //Currency
                        {
                            //question related action execution
                            if (qusRelatedAction != null && qusRelatedAction != "undefined" && qusRelatedAction.length > 0) {

                                //Has responses - contains data
                                if (currentResponse != null) {
                                    var containsDataActions = $.grep(qusRelatedAction, function (arrayItem) {
                                        return arrayItem.properties["ebecssvy_actiontypesforquestion"] == "213020000";
                                    });

                                    if (containsDataActions != null && containsDataActions != "undefined" && containsDataActions.length > 0) {
                                        checkAction(null, "currency" + questionId, currentResponse, null, true);
                                    }
                                } else {
                                    checkAction(null, "currency" + questionId, null, null, true);
                                }
                            }

                            //Answer related actions
                            if (Answers != null && typeof Answers != "undefined" && Answers.length > 0 && currentResponse != null) {
                                var answerId = GetAnswerIdByQuestionAndName(questionId, currentResponse, questionType, Answers);

                                if (answerId != null && typeof answerId != "undefined") {
                                    showLoadingMessage_Process("Checking actions");
                                    checkAction("currency", "currency" + questionId.toString(), currentResponse.toString(), null);
                                }
                            }
                        }
                        else if (questionType == QuestionTypes.Decimal) //Decimal
                        {
                            //question related action execution
                            if (qusRelatedAction != null && qusRelatedAction != "undefined" && qusRelatedAction.length > 0) {

                                //Has responses - contains data
                                if (currentResponse != null) {
                                    var containsDataActions = $.grep(qusRelatedAction, function (arrayItem) {
                                        return arrayItem.properties["ebecssvy_actiontypesforquestion"] == "213020000";
                                    });

                                    if (containsDataActions != null && containsDataActions != "undefined" && containsDataActions.length > 0) {
                                        checkAction(null, "Decimal" + questionId, currentResponse, null, true);
                                    }
                                } else {
                                    checkAction(null, "Decimal" + questionId, null, null, true);
                                }
                            }

                            //Answer related actions
                            if (Answers != null && typeof Answers != "undefined" && Answers.length > 0 && currentResponse != null) {
                                var answerId = GetAnswerIdByQuestionAndName(questionId, currentResponse, questionType, Answers);

                                if (answerId != null && typeof answerId != "undefined") {
                                    showLoadingMessage_Process("Checking actions");
                                    checkAction("Decimal", "Decimal" + questionId.toString(), currentResponse.toString(), null);
                                }
                            }
                        }
                        else if (questionType == QuestionTypes.Signature)
                        {
                            if (SignaturePadObjectArray != null && typeof SignaturePadObjectArray != 'undefined' && SignaturePadObjectArray.length > 0 && SignaturePadObjectArray[qIndex] != null
                                && typeof SignaturePadObjectArray[qIndex] != 'undefined' && SignaturePadObjectArray[qIndex] != "" && !isOnLoad)
                            {
                                if (qusRelatedAction != null && qusRelatedAction != "undefined" && qusRelatedAction.length > 0)
                                {
                                    if (SignaturePadObjectArray[qIndex].isEmpty()) {
                                        checkAction(null, "signature" + questionId, null, null, true);
                                    } else {
                                        checkAction(null, "signature" + questionId, currentResponse, null, true);
                                    }
                                }
                            }
                        }
                        else {
                            //Handle questions which does not has answer based actions
                            var controlId = "";

                            switch (questionType) {
                                case QuestionTypes.Text:
                                    controlId = "TextAns" + questionId;
                                    break;
                                case QuestionTypes.MultiLineText:
                                    controlId = "list" + questionId;
                                    break;
                                case QuestionTypes.Lookup:
                                    controlId = "Lookup" + questionId;
                                    break;
                                case QuestionTypes.DateTime:
                                    controlId = "datepicker" + questionId;
                                    break;

                            }
                            //MobileCRM.bridge.alert("controlId : " + controlId + " : " + qusRelatedAction.length + " : " + QuestionRelatedActions.length);
                            //question related action execution
                            if (qusRelatedAction != null && qusRelatedAction != "undefined" && qusRelatedAction.length > 0) {
                                //Has responses - contains data
                                //MobileCRM.bridge.alert("In qusRelatedAction");
                                if (currentResponse != null) {
                                    //MobileCRM.bridge.alert("In currentResponse");
                                    var containsDataActions = $.grep(qusRelatedAction, function (arrayItem) {
                                        return arrayItem.properties["ebecssvy_actiontypesforquestion"] == "213020000";
                                    });

                                    if (containsDataActions != null && containsDataActions != "undefined" && containsDataActions.length > 0) {
                                        //MobileCRM.bridge.alert("containsDataActions : " + containsDataActions.length);
                                        checkAction(null, controlId.toString(), currentResponse.toString(), null, true);
                                    }
                                } else {
                                    checkAction(null, controlId, null, null, true);
                                }
                            }
                        }
                    }
                }
            } catch (error) {
                MobileCRM.bridge.alert('Exception occurd: ' + error);
            }
        }

        /********************************************************************
        * GetAnswerIdByQuestionAndName *
        * Get Answer Id By Question and Answer Name *
        *********************************************************************/
        function GetAnswerIdByQuestionAndName(questionId, answer, questionType, answers) {
            if (answers != null && typeof answers != "undefined" && answers.length > 0) {
                for (var i = 0; i < answers.length; i++) {
                    if (questionType == QuestionTypes.Integer || questionType == QuestionTypes.Currency || questionType == QuestionTypes.Decimal) {
                        //MobileCRM.bridge.alert('Int Action Filter:' + answer + " Action Name: " + Result_Ans[i].properties["ebecssvy_name"] + " Min Value: " + Result_Ans[i].properties["ebecssvy_min"] + " Max Value: " + Result_Ans[i].properties["ebecssvy_max"]);

                        var symbol = "";

                        var currentQuestion = $.grep(QuestionsArray, function (item) {
                            return item.properties["ebecssvy_questionsid"] == questionId;
                        });

                        var _min = answers[i].properties["ebecssvy_min"] != null ? answers[i].properties["ebecssvy_min"] : null;
                        var _max = answers[i].properties["ebecssvy_max"] != null ? answers[i].properties["ebecssvy_max"] : null;
                        var tempAnswer = answer.replace("£", "");

                        while (tempAnswer.indexOf(ThousandSeperator) > 0) {
                            tempAnswer = tempAnswer.replace(ThousandSeperator, "");
                        }

                        if (_min != null && _min != "") {
                            while (_min.toString().indexOf(ThousandSeperator) > 0) {
                                _min = _min.toString().replace(ThousandSeperator, "");
                            }
                        }

                        if (_max != null && _max != "") {
                            while (_max.toString().indexOf(ThousandSeperator) > 0) {
                                _max = _max.toString().replace(ThousandSeperator, "");
                            }
                        }

                        if (DecimalSeperator != ".") {
                            tempAnswer = tempAnswer.replace(DecimalSeperator, ".");
                            if (_min != null && _min != "") {
                                _min = _min.toString().replace(DecimalSeperator, ".");
                            }
                            if (_max != null && _max != "") {
                                _max = _max.toString().replace(DecimalSeperator, ".");
                            }
                        }

                        if (questionType == QuestionTypes.Currency) {
                            symbol = currentQuestion[0].properties["ebecssvy_currency"] != null && currentQuestion[0].properties["ebecssvy_currency"] != "" ? currentQuestion[0].properties["ebecssvy_currency"] : "";

                            if (symbol != null && symbol != "" && typeof symbol != "undefined") {
                                symbol = symbol.substring(symbol.lastIndexOf("(") + 1, symbol.lastIndexOf(")"));
                                tempAnswer = tempAnswer.replace(symbol, "");
                            }
                        }

                        var _isMinSatisfy = "false";
                        var _isMaxSatisfy = "false";
                        if (_min != null) {
                            if (!isNaN(_min)) {
                                if (Number(tempAnswer) >= Number(_min)) {
                                    _isMinSatisfy = "true";
                                }
                            }
                        }
                        else {
                            _isMinSatisfy = "true";
                        }
                        if (_max != null) {
                            if (!isNaN(_max)) {
                                if (Number(tempAnswer) <= Number(_max)) {
                                    _isMaxSatisfy = "true";
                                }
                            }
                        }
                        else {
                            _isMaxSatisfy = "true";
                        }

                        if (answers[i].properties["ebecssvy_questionsid"].id == questionId && _isMinSatisfy && _isMaxSatisfy) {
                            var answerItem = answers[i];
                            //MobileCRM.bridge.alert('Int Action Answer Found');
                            return answerItem.properties["ebecssvy_answersid"];
                        }

                    } else if (questionType == QuestionTypes.TrueFalse) {

                        var locAnswer = answer.toString().toUpperCase();
                        var ansOne = answers[i].properties["ebecssvy_name"];
                        //MobileCRM.bridge.alert("locAnswer true/false : " + locAnswer + ", " + ansOne);

                        if (locAnswer != null && locAnswer == "TRUE" && (ansOne.toLowerCase() == 'yes' || ansOne.toLowerCase() == 'true' || ansOne.toLowerCase() == 'ja')) {
                            return answers[i].properties["ebecssvy_answersid"];
                        } else if (locAnswer != null && locAnswer == "FALSE" && (ansOne.toLowerCase() == 'no' || ansOne.toLowerCase() == 'false' || ansOne.toLowerCase() == 'nej')) {
                            return answers[i].properties["ebecssvy_answersid"];
                        }
                        else if (locAnswer == ansOne.toString().toUpperCase()) {
                            return answers[i].properties["ebecssvy_answersid"];
                        }
                    } else {
                        if (answers[i].properties["ebecssvy_questionsid"].id == questionId && answers[i].properties["ebecssvy_name"].toString().toUpperCase() == answer.toString().toUpperCase()) {
                            var answerItem = answers[i];
                            return answerItem.properties["ebecssvy_answersid"];
                        }
                    }
                }
            }
        }

        /*****************************************************************************
        * ResetLookupSelectedValue
        * Reset Lookup Selection when loading action
        * Execute action is an asynchronous task, after reset lookup data source
        * Selection made in SetQusAns method is no longer valid
        ******************************************************************************/
        function ResetLookupSelectedValue(questionId) {

            var _reponsesFetch = "<fetch version='1.0' resultformat='DynamicEntities' output-format='xml-platform' mapping='logical' distinct='true'>" +
                "<entity name='ebecssvy_responses'>" +
                "<attribute name='ebecssvy_responsesid' />" +
                "<attribute name='ebecssvy_name' />" +
                "<attribute name='ebecssvy_questionid' />" +
                "<attribute name='ebecssvy_surveyanswerandid' />" +
                "<attribute name='createdon' />" +
                "<attribute name='ebecssvy_responsescore' />" +
                "<order attribute='ebecssvy_name' descending='false' />" +
                "<filter type='and'>" +
                "<condition attribute='ebecssvy_conductedsurveyid' operator='eq' uitype='ebecssvy_conductedsurvey' value='" + _CConductedSurveyId + "' />" +
                "<condition attribute='ebecssvy_questionid' operator='eq' uitype='ebecssvy_questions' value='" + questionId + "' />" +
                "</filter>" +
                "</entity>" +
                "</fetch>";

            //MobileCRM.bridge.alert("Question Id: " + questionId);

            MobileCRM.FetchXml.Fetch.executeFromXML(_reponsesFetch, function (data) {
                if (data != null && data.length > 0 && data[0].properties["ebecssvy_surveyanswerandid"] != null && typeof data[0].properties["ebecssvy_surveyanswerandid"] != "undefined") {

                    var controlId = "Lookup" + questionId;
                    var combobox = $("#" + controlId).data("kendoComboBox");
                    var surveyAnswerId = data[0].properties["ebecssvy_surveyanswerandid"];
                    var answer = data[0].properties["ebecssvy_name"];

                    //MobileCRM.bridge.alert("Survey Answer Id: " + surveyAnswerId);

                    if (combobox != null) {
                        var comboItems = combobox.dataItems();
                        //MobileCRM.bridge.alert("Before execute selection: " + comboItems.length);
                        if (surveyAnswerId !== "" && comboItems != null && comboItems.length > 0) {
                            var recordIndex = -1;
                            var imageUrl = "";

                            $.each(comboItems, function (index, element) {
                                //MobileCRM.bridge.alert("Rid: " + this.RId + " >> surveyAnswerId:" + surveyAnswerId);
                                if (surveyAnswerId.toLowerCase() == this.RId.toLowerCase()) {
                                    recordIndex = index;
                                    return;
                                }
                            });

                            if (recordIndex != -1) {
                                var _LookupDataIndex = findLookupIndex(LookupArray, questionId);
                                if (_LookupDataIndex != -1) {

                                    LookupArray[_LookupDataIndex].GLAnswer = answer;
                                    LookupArray[_LookupDataIndex].GLAnswerId = surveyAnswerId;
                                } else {
                                    var GLObject = new Object();
                                    GLObject.Qid = questionId;
                                    GLObject.GLAnswer = _name;
                                    GLObject.GLAnswerId = _ansId;
                                    LookupArray.push(GLObject);
                                }

                                combobox.select(recordIndex);

                                var _url = combobox.value();
                                $($($(combobox.wrapper[0]).children("span"))).children("div#CBI").css("background-image", "url(" + _url + ")");
                                $($($(combobox.wrapper[0]).children("span"))).children("div#CBI").css("display", "block");
                                $($($(combobox.wrapper[0]).children("span"))).children("input").css({ "padding-right": "30px" });
                            }
                        }
                    }
                }
                else {
                    var combobox = $("#Lookup" + questionId + "").data("kendoComboBox");

                    if (combobox != undefined && combobox.dataSource != undefined && $("#Lookup" + _controldId + "").data("kendoComboBox").dataSource._data.length > 0) {

                        for (var i = 0; i < $("#Lookup" + _controldId).data("kendoComboBox").dataSource._data.length; i++) {
                            if ($("#Lookup" + _controldId).data("kendoComboBox").dataSource != null && $("#Lookup" + _controldId).data("kendoComboBox").dataSource._data != null
                                && typeof $("#Lookup" + _controldId).data("kendoComboBox").dataSource._data != 'undefined'
                                && $("#Lookup" + _controldId).data("kendoComboBox").dataSource._data.length > 0) {
                                combobox.dataSource.remove($("#Lookup" + _controldId).data("kendoComboBox").dataSource._data[0]);    //dont replace this 0 with i because it always delete first item from the array and array index will reset
                            }
                        }
                    }

                    $($($(combobox.wrapper[0]).children("span"))).children("div#CBI").css("display", "none");
                    if (typeof combobox !== "undefined") {
                        combobox.select(-1);
                    }

                    //combobox.text("");
                }
            });
        }

        /*****************************************************************************
        * EvaluateHideTabsWhileLoadingSurvey
        * Following function will evaluate the number of tabs need to hide based on the
        * already given answers
        ******************************************************************************/
        function EvaluateHideTabsWhileLoadingSurvey() {

            var Fetch = "<fetch version='1.0' resultformat='DynamicEntities' output-format='xml-platform' mapping='logical' distinct='false'>" +
                "<entity name='ebecssvy_actions' >" +
                "<attribute name='ebecssvy_actionsid' />" +
                "<attribute name='ebecssvy_actions' />" +
                "<attribute name='ebecssvy_tab' />" +
                "<filter>" +
                "<filter type='or' >" +
                "<condition attribute='ebecssvy_actions' operator='eq' value='100000001' />" +
                "<condition attribute='ebecssvy_actions' operator='eq' value='100000000' />" +
                "</filter>" +
                "</filter>" +
                "<link-entity name='ebecssvy_answers' from='ebecssvy_answersid' to='ebecssvy_surveyanswerid' link-type='inner' alias='ans' >" +
                "<attribute name='ebecssvy_name' />" +
                "<attribute name='ebecssvy_answersid' />" +
                "<link-entity name='ebecssvy_questions' from='ebecssvy_questionsid' to='ebecssvy_questionsid' link-type='inner' alias='qus' >" +
                "<attribute name='ebecssvy_attributetype' />" +
                "<filter>" +
                "<filter type='and' >" +
                "<condition attribute='ebecssvy_attributetype' operator='neq' value='213020011' />" +
                "</filter>" +
                "</filter>" +
                "<link-entity name='ebecssvy_responses' from='ebecssvy_questionid' to='ebecssvy_questionsid' link-type='inner' alias='res' >" +
                "<attribute name='ebecssvy_surveyanswer' />" +
                "<attribute name='ebecssvy_surveyanswerandid' />" +
                "<filter>" +
                "<condition attribute='ebecssvy_conductedsurveyid' operator='eq' value='" + _CConductedSurveyId + "' />" +
                "</filter>" +
                "</link-entity>" +
                "</link-entity>" +
                "</link-entity>" +
                "</entity>" +
                "</fetch>";

            MobileCRM.FetchXml.Fetch.executeFromXML(Fetch, function (data) {

                if (data != null && data.length > 0) {
                    $.each(data, function () {
                        var qustionType = this.properties["qus.ebecssvy_attributetype"];
                        var answer = this.properties["ans.ebecssvy_name"];
                        var answerId = this.properties["ans.ebecssvy_answersid"];
                        var actionType = this.properties["ebecssvy_actions"];

                        var response = this.properties["res.ebecssvy_surveyanswer"];
                        var responseAnswerId = this.properties["res.ebecssvy_surveyanswerandid"];

                        var TargTabId = this.properties["ebecssvy_tab"].id;

                        //MobileCRM.bridge.alert("qustionType: " + qustionType + " >> answer: " + answer + " >> response: " + response + " >> TargTabId: " + TargTabId);
                        //MobileCRM.bridge.alert("actionType: " + actionType);
                        var isGoingToHide = false;

                        if (qustionType != null && qustionType != "" && answer != null && answer != "" && answerId != null && answerId != "" && response != undefined
                            && response != null && response != "" && TargTabId != null && TargTabId != "") {

                            if (qustionType == QuestionTypes.MultiCheckBox) //Multi Checkbox
                            {
                                var recordedAnswers = response.toString().split(',');

                                $.each(recordedAnswers, function () {
                                    if (this.toString().toLowerCase() == answer.toLowerCase()) {
                                        isGoingToHide = true;
                                        return false;
                                    }
                                });
                            }
                            else {
                                if (answer.toLowerCase() == response.toLowerCase()) {
                                    isGoingToHide = true;
                                }
                            }
                            //MobileCRM.bridge.alert("isGoingToHide: " + isGoingToHide);
                            if (isGoingToHide) {
                                AddTabToShowHideQueue(actionType, TargTabId);
                            }
                        }

                    });
                }

            }, function (error) {
                MobileCRM.bridge.alert("Error occurred while retrieving hide tab actions: " + error);
            }, null);
        }

        /*****************************************************************************
        * EvaluateQusRelatedActionsForTabShowHide
        * Following function will evaluate the number of tabs need to hide based on the
        * already given answers and question related actions
        ******************************************************************************/
        function EvaluateQusRelatedActionsForTabShowHide() {
            var Fetch = "<fetch top='50' >" +
                "<entity name='ebecssvy_actions' >" +
                "<attribute name='ebecssvy_tab' />" +
                "<attribute name='ebecssvy_name' />" +
                "<attribute name='ebecssvy_actions' />" +
                "<attribute name='ebecssvy_actionsid' />" +
                "<filter>" +
                "<condition attribute='ebecssvy_actiontypesforquestion' operator='eq' value='213020000' />" +
                "<filter type='or' >" +
                "<condition attribute='ebecssvy_actions' operator='eq' value='100000001' />" +
                "<condition attribute='ebecssvy_actions' operator='eq' value='100000000' />" +
                "</filter>" +
                "</filter>" +
                "<link-entity name='ebecssvy_questions' from='ebecssvy_questionsid' to='ebecssvy_relatedquestion' link-type='inner' alias='QUS' >" +
                "<link-entity name='ebecssvy_responses' from='ebecssvy_questionid' to='ebecssvy_questionsid' link-type='inner' alias='RES' >" +
                "<filter>" +
                "<condition attribute='ebecssvy_conductedsurveyid' operator='eq' value='" + _CConductedSurveyId + "' />" +
                "</filter>" +
                "</link-entity>" +
                "</link-entity>" +
                "</entity>" +
                "</fetch>";

            MobileCRM.FetchXml.Fetch.executeFromXML(Fetch, function (data) {
                if (data != null && data.length > 0) {
                    $.each(data, function () {
                        var actionType = this.properties["ebecssvy_actions"];
                        var targTabId = this.properties["ebecssvy_tab"].id;

                        AddTabToShowHideQueue(actionType, targTabId);
                    });
                }
            });
        }

        /*****************************************************************************
        * AddTabToShowHideQueue
        * Helper method to add tab id to show hide tab queues based on the action type
        ******************************************************************************/
        function AddTabToShowHideQueue(actionType, targTabId) {
            var tc = GetIndexofTabId(targTabId);
            if (actionType == "100000001") {
                if (hideTabList.indexOf(targTabId) == -1) {
                    //MobileCRM.bridge.alert("Adding Hide Tab: " + TargTabId);
                    hideTabList.push(targTabId);
                }
                if (showTabList.indexOf(targTabId) != -1) {
                    //MobileCRM.bridge.alert("Removing from show tab: " + TargTabId);
                    showTabList.splice(showTabList.indexOf(targTabId), 1);
                }
                
                //MobileCRM.bridge.alert('AddTabToShowHideQueue traversedTabList push: ' + tc);
                //saveTraversedTabList(tc, 'false', 'false');
            } else if (actionType == "100000000") {
                if (showTabList.indexOf(targTabId) == -1) {
                    showTabList.push(targTabId);
                }
                if (hideTabList.indexOf(targTabId) != -1) {
                    hideTabList.splice(hideTabList.indexOf(targTabId), 1);
                }
                //saveTraversedTabList(tc, 'true', 'false');
            }

        }        

        /*****************************************************************************
        * CheckCalculatedQuestions
        * This function check given question id related to any calculated question
        ******************************************************************************/
        function CheckCalculatedQuestions(questionId) {
            var questionIdPart = '{' + questionId + '}';
            var calculatedQuestions = [];

            for (var i = 0; i < QuestionsArray.length; i++) {
                var formula = QuestionsArray[i].properties["ebecssvy_calculatedformulareadonly"];
                var numberOfDecimalPlaces = QuestionsArray[i].properties["ebecssvy_numberofdecimalplaces"] != null && QuestionsArray[i].properties["ebecssvy_numberofdecimalplaces"] != "" ? QuestionsArray[i].properties["ebecssvy_numberofdecimalplaces"] : 2;
                var calculatedQuestionId = QuestionsArray[i].properties["ebecssvy_questionsid"];
                if (QuestionsArray[i].properties["ebecssvy_attributetype"] == QuestionTypes.Calculated && formula != null
                    && typeof formula != undefined && formula != "" && formula.indexOf(questionIdPart) != -1) {
                    EvaluateCalculatedQuestion(calculatedQuestionId, formula, numberOfDecimalPlaces);
                }
            }
        }

        /*****************************************************************************
        * EvaluateCalculatedQuestion
        * This function will evaluate the calculated question's formula
        ******************************************************************************/
        function EvaluateCalculatedQuestion(calculatedQuestionId, formula, numberOfDecimalPlaces) {
            var questionArray = [];
            var attributeType = "";

            //MobileCRM.bridge.alert("Inside calculatedQuestionId: " + calculatedQuestionId + " formula: " + formula + " numberOfDecimalPlaces: " + numberOfDecimalPlaces);

            if (calculatedQuestionId != null && calculatedQuestionId != "undefined" && calculatedQuestionId != "") {
                var arrStr = formula.split(/[{}]/);

                $.each(arrStr, function () {
                    if (this.length == 36) {

                        var questionId = this;
                        var value = "";

                        var currentQuestion = $.grep(QuestionsArray, function (item) {
                            return item.properties["ebecssvy_questionsid"] == questionId;
                        });

                        if (currentQuestion != null && typeof currentQuestion != "undefined" && currentQuestion.length > 0) {

                            attributeType = currentQuestion[0].properties["ebecssvy_attributetype"];

                            //MobileCRM.bridge.alert(" Current Question: " + questionId + " AttributeType: " + attributeType);

                            if (attributeType != null && attributeType != "" && typeof attributeType != "undefined") {
                                if (attributeType == QuestionTypes.Decimal) {

                                    value = $("#Decimal" + questionId).val();
                                    value = FomatNumberForCalculation(value, "");

                                    if (value == "" || value == null) {
                                        value = 0;
                                    }

                                    //MobileCRM.bridge.alert("Decimal Value: " + value);

                                } else if (attributeType == QuestionTypes.Integer) {

                                    value = $("#integer" + questionId).val();
                                    value = FomatNumberForCalculation(value, "");

                                    if (value == "" || value == null) {
                                        value = 0;
                                    }

                                    //MobileCRM.bridge.alert("Integer Value: " + value);

                                } else if (attributeType == QuestionTypes.Currency) {

                                    value = $("#currency" + questionId).val();

                                    var currencySymbol = currentQuestion[0].properties["ebecssvy_currency"];

                                    if (currencySymbol != "" && currencySymbol != null && typeof currencySymbol != "undefined" && currencySymbol.indexOf('(') != -1 && currencySymbol.indexOf(')') != -1) {
                                        currencySymbol = currencySymbol.substring(currencySymbol.lastIndexOf("(") + 1, currencySymbol.lastIndexOf(")"));
                                    } else if (currencySymbol == "" || currencySymbol == null || typeof currencySymbol == "undefined") {
                                        currencySymbol = "£";
                                    }

                                    value = FomatNumberForCalculation(value, currencySymbol);

                                    if (value == "" || value == null) {
                                        value = 0;
                                    }

                                    //MobileCRM.bridge.alert("Currency Value: " + value);
                                }

                                if (value < 0) {
                                    value = "(" + value + ")";
                                }

                                formula = formula.replace('{' + questionId + '}', value);
                            }
                        }
                    }
                });

                //MobileCRM.bridge.alert("Formula Before Evaluate: " + formula);
                if (formula != "" && formula != null) {
                    formula = formula.replace(/ /g, '');
                    //MobileCRM.bridge.alert("Formula: " + formula);
                    try {
                        var result = eval(formula);
                        //MobileCRM.bridge.alert("Formula Result: " + result);

                        var regex = /([a-zA-Z])/gm;
                        if (regex.exec(result) === null) {
                            result = ReAjustNumber(result);
                            $("#Calculated" + calculatedQuestionId).val(FormatNumber(result, "", numberOfDecimalPlaces, true));
                        }
                        else {
                            $("#Calculated" + calculatedQuestionId).val("Error!");
                        }

                    } catch (e) {
                        $("#Calculated" + calculatedQuestionId).val("Error!");
                    }
                }
            }
        }


        function AppendImage(ImageId, questionId) {
            MobileCRM.DynamicEntity.loadDocumentBody("ebecssvy_images", ImageId, function (data) {
                var imgElement = "data:image/jpeg;base64," + data;
                $("#" + questionId)[0].src = imgElement;
            },
                function (error) {
                    var imgElement = "data:image/png;base64," + noImage;
                    $("#" + questionId)[0].src = imgElement;

                }, null);

        }

        // converts image to base 64
        function convertImgToBase64(url, callback, outputFormat) {
            var img = new Image();
            img.crossOrigin = 'Anonymous';
            img.onload = function () {
                var canvas = document.createElement('CANVAS');
                var ctx = canvas.getContext('2d');
                canvas.height = this.height;
                canvas.width = this.width;
                ctx.drawImage(this, 0, 0);
                var dataURL = canvas.toDataURL(outputFormat || 'image/jpeg');

                callback(dataURL);
                canvas = null;
            };
            img.src = url;
        }

        var noteCreatedInSurvey = null;

        //Caputures a pic while performing survey if action type is capture image
        function openCamera(event) {

            if (AppVersion != null && parseFloat(AppVersion) > 8.1) {                
                var questionId = event.srcElement.id;
                var questionName = $(event.srcElement).parent().parent().find("label")[0].textContent;
                questionId = questionId.replace("camera", "");

                var service = new MobileCRM.Services.DocumentService();
                service.maxImageSize = "640x480"; // maxImageSize can have one of following values: "Default", "640x480", "1024x768", "1600x1200", "2048x1536", "2592x1936"
                service.capturePhoto(
                    function (fileInfo) {
                        if (fileInfo.url != null) {
                            /// <param name='fileInfo' type='MobileCRM.Services.FileInfo '/>
                            showLoadingMessage_Process();
                            var _responseRec = MobileCRM.DynamicEntity.createNew("ebecssvy_picture");
                            var props = new Object();
                            var _now = new Date().toLocaleString();
                            var _name = questionName + " : " + _now;
                            props.ebecssvy_name = _name;
                            props.ebecssvy_surveyquestionid = new MobileCRM.Reference("ebecssvy_questions", questionId);
                            props.ebecssvy_conductedsurvey = new MobileCRM.Reference("ebecssvy_conductedsurvey", _CConductedSurveyId);
                            _responseRec.properties = props;
                            _responseRec.save(
                                function (error) {
                                    if (error) {
                                        document.getElementById('Save').disabled = false;
                                        MobileCRM.bridge.alert("An error occurred: " + error);
                                        removePanels();
                                    }
                                    else {
                                        var _pictureId = this.id;

                                        convertImgToBase64(fileInfo.url, function (data) {
                                            var _responseRec = MobileCRM.DynamicEntity.createNew("annotation");
                                            var props = new Object();
                                            var trimmedImageDate = data.replace("data:image/jpeg;base64,", "");
                                            props.documentbody = trimmedImageDate;
                                            props.subject = _name;
                                            _name = _name.replace(" ", "_").replace(",", "").replace(" ", "_");
                                            props.filename = _name + ".jpg";
                                            props.objectid = new MobileCRM.Reference("ebecssvy_picture", _pictureId)
                                            _responseRec.properties = props;
                                            _responseRec.save(
                                                function (error) {
                                                    if (error) {
                                                        document.getElementById('Save').disabled = false;
                                                        MobileCRM.bridge.alert("Note error occurred: " + error);
                                                        removePanels();
                                                    }
                                                    else {
                                                        var _noteId = this.id;
                                                        var noteDataObject = new Object();
                                                        noteDataObject.noteId = _noteId;
                                                        noteDataObject.data = data;
                                                        populatePictureRecords(questionId, data, _name, _pictureId);
                                                    }
                                                });

                                        });
                                    }
                                });
                        }
                        else
                            removePanels();
                    },
                    MobileCRM.bridge.alert
                );
            }
            else { MobileCRM.bridge.alert("This feature is only available for Resco version 8.1 and higher"); }

        }

        function ApplyCustomFilterAction(_controldId, _customFilter, keyUp, value, loadType) {
            var combobox = $("#Lookup" + _controldId).data("kendoComboBox");            
            if (combobox != null) {
                //MobileCRM.bridge.alert(" _controldId: " + _controldId + " _customFilter: " + _customFilter);                

                //MobileCRM.bridge.alert(" keyUp: " + keyUp);  
                if (_customFilter == null || _customFilter == 'undefined' || _customFilter.length == 0) {
                    combobox.setDataSource(null);
                    //combobox.value("");
                    //combobox.text("");
                    //combobox.refresh();
                    combobox.dataSource.read();
                    return;
                }

                
                var FetchXMLIndex = findFetchIndex(FetchXMLQuestionArray, _controldId);
                if (FetchXMLIndex != -1) {
                    var QuestionName = FetchXMLQuestionArray[FetchXMLIndex].qName;
                    var _fetch = FetchXMLQuestionArray[FetchXMLIndex].fetch;
                    //MobileCRM.bridge.alert("filterLookup: " + _fetch);
                    if (_fetch != null) {
                        var entityName = FetchXMLQuestionArray[FetchXMLIndex].entityName;
                        var _displayImage = FetchXMLQuestionArray[FetchXMLIndex].displayIMage;
                        _fetch = _fetch.toString().replace("{{value}}", value);

                        var fetchObj = $(_fetch);
                        $(fetchObj[0]).attr("resultformat", "DynamicEntities");
                        if (_customFilter != null) {
                            //MobileCRM.bridge.alert("inner" + _customFilter + " : " + $(fetchObj[0]).find("filter").length);
                            //MobileCRM.bridge.alert("outer" + $($(_customFilter)[0]).find("condition")[0].outerHTML);
                            if ($(fetchObj[0]).find("filter").length > 0) {
                                $(fetchObj[0]).find("filter").append(_customFilter);
                            }
                            else {
                                $(fetchObj[0]).find("entity").append("<filter type='and' >" + _customFilter + "</filter>");
                            }
                        }

                        ///append entity id to lookup fetch
                        var entityName = $($(fetchObj[0]).find("entity")).attr("name");
                        if (_fetch.indexOf(entityName + "id") == -1) {
                            $(fetchObj[0]).find("entity").append("<attribute name='" + entityName + "id' />");
                        }
                        /*if (_fetch.indexOf("entityimageid") == -1 && _displayImage != 213020000) {
                            $(fetchObj[0]).find("entity").append("<attribute name='entityimageid' />");
                        }*/
                        $(fetchObj[0]).attr("top", "50");
                        var finalFetch = fetchObj[0].outerHTML.toString();

                        //$(fetchObj[0]).find("entity")
                        //MobileCRM.bridge.alert(" finalFetch: " + finalFetch);

                        var hideName = "block";

                        if (_displayImage == 213020000 || _displayImage == 213020002)
                            hideName = "block";
                        else
                            hideName = "none";

                        finalFetch = finalFetch.replace(/&nbsp;/g, " ");
                        showLoadingMessage_Process();
                        MobileCRM.FetchXml.Fetch.executeFromXML(finalFetch, function (data) {
                            if (data != null && data.length > 0) {                                
                                //combobox.readonly(true);
                                //combobox.setDataSource(null);
                                //MobileCRM.bridge.alert(" Data Length: " + data.length);
                                if (!keyUp) {
                                    //combobox.value("");
                                    //combobox.text("");
                                    //combobox.refresh();
                                   // combobox.dataSource.read();
                                }

                                for (var i = 0; i < data.length; i++) {                                   
                                    var answerImg = data[i];
                                    attachImagesToLookup(answerImg.id, _controldId, answerImg.primaryName, answerImg.id, answerImg.entityName, i, data, null, loadType);

                                }
                                var _LookupDataIndex = findLookupIndex(LookupArray, _controldId);
                                if (_LookupDataIndex != -1) {

                                    LookupArray[_LookupDataIndex].GLAnswer = "";
                                    LookupArray[_LookupDataIndex].GLAnswerId = "";
                                }

                                ResetLookupSelectedValue(_controldId);
                                removePanels();
                            }
                            else {
                                MobileCRM.bridge.alert(" No data ");
                                var combobox = $("#Lookup" + _controldId + "").data("kendoComboBox");

                                if (combobox != undefined && combobox.dataSource != undefined && $("#Lookup" + _controldId + "").data("kendoComboBox").dataSource._data.length > 0) {

                                    for (var i = 0; i < $("#Lookup" + _controldId).data("kendoComboBox").dataSource._data.length; i++) {
                                        if ($("#Lookup" + _controldId).data("kendoComboBox").dataSource != null && $("#Lookup" + _controldId).data("kendoComboBox").dataSource._data != null
                                            && typeof $("#Lookup" + _controldId).data("kendoComboBox").dataSource._data != 'undefined'
                                            && $("#Lookup" + _controldId).data("kendoComboBox").dataSource._data.length > 0) {
                                            combobox.dataSource.remove($("#Lookup" + _controldId).data("kendoComboBox").dataSource._data[0]);    //dont replace this 0 with i because it always delete first item from the array and array index will reset
                                        }
                                    }
                                }

                                $($($(combobox.wrapper[0]).children("span"))).children("div#CBI").css("display", "none");
                                if (typeof combobox !== "undefined") {
                                    combobox.select(-1);
                                }

                                combobox.text("");
                                removePanels();
                            }
                        }, function (error) {
                            document.getElementById('Save').disabled = false;
                            if (typeof alert != "undefined") {
                                if (error.indexOf("object refernce not set to instance of an object") != -1)
                                    MobileCRM.bridge.alert("Error in applying custom filter for lookup question (" + QuestionName + ")\nPlease make sure the entity or attributes are enabled in woodford");
                                else
                                    MobileCRM.bridge.alert("Error in applying custom filter for lookup question (" + QuestionName + ")\n" + error);
                                removePanels();

                            }
                            var combobox = $("#Lookup" + _controldId + "").data("kendoComboBox");

                            if (combobox != undefined && combobox.dataSource != undefined && $("#Lookup" + _controldId + "").data("kendoComboBox").dataSource._data.length > 0) {

                                for (var i = 0; i < $("#Lookup" + _controldId).data("kendoComboBox").dataSource._data.length; i++) {
                                    if ($("#Lookup" + _controldId).data("kendoComboBox").dataSource != null && $("#Lookup" + _controldId).data("kendoComboBox").dataSource._data != null
                                        && typeof $("#Lookup" + _controldId).data("kendoComboBox").dataSource._data != 'undefined'
                                        && $("#Lookup" + _controldId).data("kendoComboBox").dataSource._data.length > 0) {
                                        combobox.dataSource.remove($("#Lookup" + _controldId).data("kendoComboBox").dataSource._data[0]);    //dont replace this 0 with i because it always delete first item from the array and array index will reset
                                    }
                                }
                            }

                            $($($(combobox.wrapper[0]).children("span"))).children("div#CBI").css("display", "none");
                            if (typeof combobox !== "undefined") {
                                combobox.select(-1);
                            }

                            //combobox.text("");

                        }, null);
                    }
                }
                else {
                    combobox.placeholder = "No records...";

                    var combobox = $("#Lookup" + _controldId + "").data("kendoComboBox");

                    if (combobox != undefined && combobox.dataSource != undefined && $("#Lookup" + _controldId + "").data("kendoComboBox").dataSource._data.length > 0) {

                        for (var i = 0; i < $("#Lookup" + _controldId).data("kendoComboBox").dataSource._data.length; i++) {
                            if ($("#Lookup" + _controldId).data("kendoComboBox").dataSource != null && $("#Lookup" + _controldId).data("kendoComboBox").dataSource._data != null
                                && typeof $("#Lookup" + _controldId).data("kendoComboBox").dataSource._data != 'undefined'
                                && $("#Lookup" + _controldId).data("kendoComboBox").dataSource._data.length > 0) {
                                combobox.dataSource.remove($("#Lookup" + _controldId).data("kendoComboBox").dataSource._data[0]);    //dont replace this 0 with i because it always delete first item from the array and array index will reset
                            }
                        }
                    }

                    $($($(combobox.wrapper[0]).children("span"))).children("div#CBI").css("display", "none");
                    if (typeof combobox !== "undefined") {
                        combobox.select(-1);
                    }

                    //combobox.text("");

                    removePanels();
                }
            }
        }

        function FilterLookupQuestion(questionId, filterCondition, value) {
            //MobileCRM.bridge.alert("FilteredLookupQuestions : " + FilteredLookupQuestions.length + " : " + questionId);
            if (FilteredLookupQuestions != null && FilteredLookupQuestions != "" && typeof FilteredLookupQuestions != 'undefined' && FilteredLookupQuestions.length > 0) {
                var responseTmp = $.grep(FilteredLookupQuestions, function (obj) { return obj.id == questionId; });
                //MobileCRM.bridge.alert("Response temp : " + responseTmp + " : " + responseTmp.length);
                if (responseTmp != null && responseTmp != "" && typeof responseTmp != 'undefined' && responseTmp.length > 0) {
                    for (var i = 0; i < responseTmp.length; i++) {
                        var relatedQuestionId = responseTmp[i].ebecssvy_RelatedQuestion.toString().replace('{', '').replace('}', '');
                        //MobileCRM.bridge.alert(" responseTmp[i].id: " + relatedQuestionId);
                        var QAObject = GenerateQuestionAnswerObjectFromQuestion(relatedQuestionId, true);
                        //MobileCRM.bridge.alert(" QAObject.answer: " + QAObject.answerforFilter);

                        if (QAObject != null && typeof QAObject != 'undefined' && QAObject.answerforFilter != null && typeof QAObject.answerforFilter != 'undefined' && QAObject.answerforFilter != "") {
                            ApplyCustomFilterAction(responseTmp[i].id, filterCondition, false, QAObject.answerforFilter, value);
                        } else {
                            var combobox = $("#Lookup" + questionId).data("kendoComboBox");

                            if (combobox != null && typeof combobox != 'undefined') {
                                combobox.setDataSource(null);
                                combobox.value("");
                                //combobox.text("");
                                combobox.refresh();
                                combobox.dataSource.read();
                            }
                        }
                    }
                } else {
                    ApplyCustomFilterAction(questionId, filterCondition, true, null, value);
                }
            } else {
                ApplyCustomFilterAction(questionId, filterCondition, true, null, value);
            }
        }

        function GenerateQuestionAnswerObjectFromQuestion(questionId, targetpopulation)
        {
            var QAObject = new Object();

            try {
                var item = $("#QAConatiner div[id='" + questionId + "']");
                //MobileCRM.bridge.alert("questionId : " + questionId);
                if (item != null && item != "" && typeof item != 'undefined' && item.length > 0) {
                    var type = item.attr('custtype');
                    var qIndex = 0;
                    var answer = "";
                    var childElement;
                    //MobileCRM.bridge.alert("type : " + type);
                    QAObject.qid = questionId;//this.id;
                    QAObject.qname = item.find('label')[0].textContent;
                    QAObject.qtype = type;
                    QAObject.isHidden = item.parent().css("display") == "none" ? true : false;
                    QAObject.isRequired = item.attr("isRequired");

                    switch (type) {
                        case "multitext":
                            var childElement = item.find('textarea');
                            answer = childElement.val();
                            QAObject.answer = answer;
                            QAObject.answerforFilter = answer;
                            QAObject.lookupId = "";
                            if (!targetpopulation) {
                                QAObject.responseScore = CalculateIndividualAnswerScore(QAObject.qid, answer.toString());
                            }
                            break;
                        case "text":                                                
                            var childElement = item.find('input');
                            answer = childElement.val();
                            QAObject.answer = answer;
                            QAObject.answerforFilter = answer;
                            QAObject.lookupId = "";
                            if (!targetpopulation) {
                                QAObject.responseScore = CalculateIndividualAnswerScore(QAObject.qid, answer.toString());
                            }
                            break;
                        case "currency":
                            var currentQuestion = $.grep(QuestionsArray, function (item) {
                                return item.properties["ebecssvy_questionsid"] == questionId;
                            });
                            var symbol = currentQuestion[0].properties["ebecssvy_currency"] != null && currentQuestion[0].properties["ebecssvy_currency"] != "" ? currentQuestion[0].properties["ebecssvy_currency"] : "";
                            
                            if (symbol != null && symbol != "" && typeof symbol != "undefined") {
                                symbol = symbol.substring(symbol.lastIndexOf("(") + 1, symbol.lastIndexOf(")"));
                            } else if (symbol == "" || symbol == null || typeof symbol == "undefined") {
                                symbol = "£";
                            }
                            var childElement = item.find('input');
                            answer = childElement.val();
                            var answerforFilter = FomatNumberForCalculation(answer, symbol);
                            QAObject.answer = answer;
                            QAObject.answerforFilter = answerforFilter;
                            QAObject.lookupId = "";
                            if (!targetpopulation) {
                                QAObject.responseScore = CalculateIndividualAnswerScore(QAObject.qid, answer.toString());
                            }
                            break;
                        case "integer":
                        case "Decimal":
                        case "Calculated":
                            var childElement = item.find('input');
                            answer = childElement.val();
                            var answerforFilter = FomatNumberForCalculation(answer, "");
                            QAObject.answer = answer;
                            QAObject.answerforFilter = answerforFilter;
                            QAObject.lookupId = "";
                            if (!targetpopulation) {
                                QAObject.responseScore = CalculateIndividualAnswerScore(QAObject.qid, answer.toString());
                            }
                            break;
                        case "checkbox":
                            var childElement = item.find('input');
                            answer = childElement.prop('checked');
                            QAObject.answer = answer;
                            QAObject.answerforFilter = answer.toString();
                            QAObject.lookupId = "";
                            if (!targetpopulation) {
                                QAObject.responseScore = CalculateIndividualAnswerScore(QAObject.qid, answer);
                            }
                            break;
                        case "multicheckbox":
                            var multipleAnswerScore = "";
                            var kk = 0;
                            var inputControls = item.next().find("input:checked").parent();
                            var crmval = "";
                            //MobileCRM.bridge.alert("multicheck box : " + inputControls.length);
                            $.each(inputControls, function () {
                                var _label = $(this).find('label')[0].textContent;
                                var ans = GetAnswerByAnswerTextOrCrmAnswerValue(QAObject.qid, _label);
                                var ansCRM = "<value>" + ans.properties["ebecssvy_answercrmvalue"].toString() + "</value>";
                                //MobileCRM.bridge.alert("multicheck 1 :" + crmval + " : " + ansCRM);
                                crmval = crmval.concat(ansCRM);
                                if (kk == 0) {
                                    answer += _label;
                                }
                                else {
                                    answer += "," + _label;
                                }
                                if (!targetpopulation) {
                                    multipleAnswerScore += CalculateIndividualAnswerScore(QAObject.qid, _label);
                                }
                                //MobileCRM.bridge.alert("after : " + crmval);
                                kk++;
                            });
                            //MobileCRM.bridge.alert("final : " + crmval);
                            QAObject.answer = answer;
                            QAObject.answerforFilter = crmval;
                            if (!targetpopulation) {
                                QAObject.responseScore = multipleAnswerScore;
                            }
                            QAObject.lookupId = "";
                            break;
                        case "radio":
                            if (item.next().find("input:checked").length > 0) {
                                answer = item.next().find("input:checked").val();
                            }
                            else {
                                answer = "";
                            }
                            //MobileCRM.bridge.alert(" answer: " + answer);
                            QAObject.answer = answer;
                            QAObject.answerforFilter = answer;
                            QAObject.lookupId = "";
                            if (!targetpopulation) {
                                QAObject.responseScore = CalculateIndividualAnswerScore(QAObject.qid, answer);
                            }
                            break;
                        case "select":
                            answer = item.find("select option:selected").text();
                            answer = (answer == "---Select---") ? "" : answer;
                            QAObject.answer = answer;
                            QAObject.lookupId = "";
                            if (!targetpopulation) {
                                QAObject.responseScore = CalculateIndividualAnswerScore(QAObject.qid, answer);
                            }
                            break;
                        case "date":
                            if (item.find(".k-input").length > 0) {
                                var cId = $(item.find(".k-input")).prop('id');
                                if (cId.indexOf("datepicker") != -1) {
                                    answer = item.find(".k-input").val();
                                    QAObject.answer = answer;
                                    QAObject.answerforFilter = answer;
                                    QAObject.lookupId = "";
                                    QAObject.lookupId = "";
                                    targetSaveArray.push(QAObject);
                                }
                            }
                            break;
                        case "graphicalList":
                            var _AnswerId = null;
                            if (GLArray.length > 0) {
                                var QidIndex = findGLIndex(GLArray, "GraphicalList" + QAObject.qid);
                                if (QidIndex != -1) {
                                    answer = GLArray[QidIndex].GLAnswer;
                                    _AnswerId = GLArray[QidIndex].GLAnswerId;
                                }
                            }
                            QAObject.answer = answer;
                            QAObject.lookupId = _AnswerId;
                            if (!targetpopulation) {
                                QAObject.responseScore = CalculateIndividualAnswerScore(QAObject.qid, answer);
                            }
                            break;
                        case "lookup":
                            var _lookupId = null;
                            if (LookupArray.length > 0) {
                                var QidIndex = findGLIndex(LookupArray, QAObject.qid);
                                if (QidIndex != -1) {
                                    answer = LookupArray[QidIndex].GLAnswer;
                                    _lookupId = LookupArray[QidIndex].GLAnswerId;
                                }
                            }
                            QAObject.answer = answer;
                            QAObject.answerforFilter = _lookupId;
                            QAObject.lookupId = _lookupId;
                            if (!targetpopulation) {
                                QAObject.responseScore = CalculateIndividualAnswerScore(QAObject.qid, answer);
                            }
                            break;
                        case "imagecapture":
                            answer = $("#QAConatiner input[id='captureImagelookup" + QAObject.qid + "']").val();
                            QAObject.answer = answer;
                            QAObject.lookupId = "captureimagecamera" + QAObject.qid;
                            if (!targetpopulation) {
                                QAObject.responseScore = "";
                            }
                            break;
                        case "signature":
                            qIndex = findCrmEntityArrayIndex(QuestionsArray, QAObject.qid);
                            //MobileCRM.bridge.alert("qIndex: " + qIndex + " SignaturePadObjectArray: " + SignaturePadObjectArray.length);
                            if (SignaturePadObjectArray != null && typeof SignaturePadObjectArray != 'undefined' && SignaturePadObjectArray.length > 0 && SignaturePadObjectArray[qIndex] != null
                                && typeof SignaturePadObjectArray[qIndex] != 'undefined' && SignaturePadObjectArray[qIndex] != "") {
                                answer = "Signature";
                                QAObject.answer = answer;
                                QAObject.lookupId = "";
                                QAObject.responseScore = "";
                                QAObject.imagedata = SignaturePadObjectArray[qIndex].isEmpty() ? "" : SignaturePadObjectArray[qIndex].toDataURL();
                            }
                            break;
                        default: break;

                    }
                }

                return QAObject;
            } catch (error) {
                MobileCRM.bridge.alert("Error occured: " + error);
                return null;
            }
        }

        function populatePictureRecords(_lQId, imgUrl, pictureName, pictureId) {


            var combobox = $("#captureImagelookup" + _lQId).data("kendoComboBox");

            $($($(combobox.wrapper[0]).children("span"))).children("input").css({ "background-color": "transparent", "box-sizing": "border-box", "height": "30px" });
            $($($(combobox.wrapper[0]).children("span"))).children("input").css({ "padding-right": "30px" });
            $($($(combobox.wrapper[0]).children())).children("div#CBI").css("background-image", "url(" + imgUrl + ")");
            $($($(combobox.wrapper[0]).children("span"))).children("div#CBI").css("display", "block");
            var imgElement = "data:image/jpeg;base64," + imgUrl;
            combobox.dataSource.add({ RecordName: pictureName, ImageUrlDef: imgUrl, RId: pictureId });
            combobox.text(pictureName);
            combobox.readonly(false);
            removePanels();
        }

        // Loads images on the survey form
        function populatePictureRecordsLoad(_lQId) {
            showLoadingMessage_Process();

            $("#captureImagelookup" + _lQId).kendoComboBox({
                filter: "startswith",
                open: function (e) {
                    IsChanged = "false";
                    $($($(e.sender.wrapper[0]).children("span"))).children("input").blur();
                },
                placeholder: "Select...",
                dataTextField: "RecordName",
                dataValueField: "ImageUrlDef",
                dataRecordId: "RId",
                template: '<span class="k-state-default" style="background-image: url(\'#:ImageUrlDef#\'); float:right;display: block;overflow: hidden;height: 60px; width: 60px; background-size:100%;background-repeat:no-repeat;"></span>' +
                    '<span class="k-state-default"><div style="white-space:nowrap; overflow:hidden; text-overflow:ellipsis; display:block; font-size:12px;">#: RecordName #</div></span>',
                dataSource: [],
                select: function (e) {
                    IsChanged = "true";
                    e.sender.close();
                },
                change: function (e) {
                    if (this.select() == -1) {
                        var comboBoxCurrent = $("#" + this.input.context.id).data("kendoComboBox");
                        comboBoxCurrent.select(-1);
                        comboBoxCurrent.text("");
                    }
                    $($($(e.sender.wrapper[0]).children("span"))).children("div#CBI").css("display", "none");
                    $($($(e.sender.wrapper[0]).children("span"))).children("input").css({ "padding-right": "0px" });
                    $($($(e.sender.wrapper[0]).children("span"))).children("div#CBI").css("background-image", "url(" + this.dataItem().ImageUrlDef + ")");
                    if (this.dataItem() != undefined && this.dataItem() != null) {
                        $($($(e.sender.wrapper[0]).children("span"))).children("div#CBI").css("display", "block");
                        $($($(e.sender.wrapper[0]).children("span"))).children("input").css({ "padding-right": "30px" });
                    }

                },
                height: 200
            });
            var combobox = $("#captureImagelookup" + _lQId).data("kendoComboBox");
            $($($(combobox.wrapper[0]).children("span"))).children("input").css({ "background-color": "transparent", "box-sizing": "border-box", "height": "30px" });
            $($($(combobox.wrapper[0]).children())).prepend('<div  id="CBI" class="LookupImage" style="background-image: url(); float: left;background-size: 100% 100%;background-repeat: no-repeat;border-radius: 50%; display:none; "></div>');
            combobox.readonly(true);
            var finalFetch = "<fetch version='1.0' output-format='xml-platform' mapping='logical' distinct='true' resultformat='DynamicEntities'>" +
                "<entity name='ebecssvy_picture'>" +
                "<attribute name='ebecssvy_pictureid' />" +
                "<attribute name='ebecssvy_name' />" +
                "<order attribute='createdon' descending='true' />" +
                "<filter type='and'>" +
                "<condition attribute='ebecssvy_surveyquestionid' operator='eq' uitype='ebecssvy_questions' value='" + _lQId + "' />" +
                "<condition attribute='ebecssvy_conductedsurvey' operator='eq' uitype='ebecssvy_conductedsurvey' value='" + _CConductedSurveyId + "' />" +
                "</filter>" +
                "<link-entity name='annotation' from='objectid' to='ebecssvy_pictureid' alias='aa_note' visible='false' link-type='outer'>" +
                "<order attribute='createdon' descending='true' />" +
                "<attribute name='annotationid' />" +
                "<attribute name='documentbody' />" +
                "</link-entity>" +
                "</entity>" +
                "</fetch>";
            MobileCRM.FetchXml.Fetch.executeFromXML(finalFetch, function (data) {
                if (data != null && data.length > 0) {
                    var globalPictureId = null;

                    for (var i = 0; i < data.length; i++) {
                        var pictureId = data[i].properties["ebecssvy_pictureid"];
                        if (globalPictureId == null) {
                            globalPictureId = pictureId;
                            var annotationId = data[i].properties["aa_note.annotationid"] != null ? data[i].properties["aa_note.annotationid"] : null;
                            var pictureName = data[i].properties["ebecssvy_name"];
                            if (annotationId != null) {
                                attachImagesToPicture(pictureName, annotationId, pictureId, combobox, i, data);
                            }
                            else {
                                combobox.dataSource.add({ RecordName: pictureName, ImageUrlDef: null, RId: pictureId });
                                if (i == data.length - 1) {
                                    combobox.readonly(false);
                                    combobox.select(0);
                                    var _url = combobox.value();
                                    $($($(combobox.wrapper[0]).children("span"))).children("div#CBI").css("background-image", "url(" + _url + ")");
                                    $($($(combobox.wrapper[0]).children("span"))).children("div#CBI").css("display", "none");
                                    $($($(combobox.wrapper[0]).children("span"))).children("input").css({ "padding-right": "0px" });
                                    removePanels();
                                }
                            }
                        }
                        if (globalPictureId != null && globalPictureId != pictureId) {
                            globalPictureId = pictureId;
                            var annotationId = data[i].properties["aa_note.annotationid"] != null ? data[i].properties["aa_note.annotationid"] : null;
                            var pictureName = data[i].properties["ebecssvy_name"];
                            if (annotationId != null) {

                                attachImagesToPicture(pictureName, annotationId, pictureId, combobox, i, data);
                            }
                            else {
                                combobox.dataSource.add({ RecordName: pictureName, ImageUrlDef: null, RId: pictureId });
                                if (i == data.length - 1) {
                                    combobox.readonly(false);
                                    combobox.select(0);
                                    var _url = combobox.value();
                                    $($($(combobox.wrapper[0]).children("span"))).children("div#CBI").css("background-image", "url(" + _url + ")");
                                    $($($(combobox.wrapper[0]).children("span"))).children("div#CBI").css("display", "none");
                                    $($($(combobox.wrapper[0]).children("span"))).children("input").css({ "padding-right": "0px" });
                                    removePanels();
                                }
                            }
                        }
                    }
                }
                else
                    removePanels();
            }, function (error) {
                document.getElementById('Save').disabled = false;

                if (typeof alert != "undefined") {
                    MobileCRM.bridge.alert("Picture Error : " + error);

                    removePanels();
                }

            }, null);
        }

        var noImage = "iVBORw0KGgoAAAANSUhEUgAAAD4AAAA+CAYAAABzwahEAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAO4SURBVGhD7ZppS+RAEIb9/z/CA3RUvBi88IMX6qB4Il6IJ4gXKireqLU8zQZEqpPMdPXuhJkHXlbYpIo30+murk6LNCgtra2t0mhqGm80NY03mprGG01N47HV09Mj8/Pzsr+/Lzc3N3J+fi57e3uyuroqvb296j0xFd340NCQHB0duURpXF1dyfDwsBojhiCa8aWlJfn6+nJJ8sIoaG9vV+NZCqIY39nZccFr4eLiQjo7O9W4VgJz4xsbGy5wCGdnZ9LW1qbGtxCYGh8ZGZHv728XOJT19XU1h4XAzDi/0P39vQtqAfNDf3+/mitUYGZ8enraBbTk5OREzRUqMDPOkmQNr01fX5+aL0RgYpwiJBYrKytqzhCBifGpqSkXLAanp6dqzhCBiXGLJczH4+OjmjNEYGKcGjwmHR0dat5aBSbGDw8PXbBYsMnR8tYqKMQvbr2Dg7p/x8G6dgcT4zGKl4S3tzc1Z4jAxPjAwIALFgOaFlrOEIGJccSyE4O6LmDQ2tqaC2gJJWt3d7eaL0RgZryrq0s+Pj5cUCtoW2m5QgVmxhHD0gq2pcwdWp5Qgalx9uRMRhYsLy+rOSwEpsZRqVSSh4cHF7xWGOKFaj0lYkK6vr52CaqF5kPsTitEMY7YWNBtzduD+/z8lMXFRTWWtSCa8USDg4NycHDgKjCN19dX2dzcjLJs+QRBxmkGUqczrN/f392/c3Nz6rW8s+VyWSYnJ2VhYcGVuVltJRoctJpZJjl64sCBGNq11ahm4+Pj467x74P3lElOuzePeMfTDiVub2/dA9TuzSOoyjhmGLZ5eHl5kYmJCTVOmjhvu7u7+xslHR4A12tx0gS5jdMMeHp6cjdVA3v1PPtpHur29nbVBxK8BmNjY2pMnyCXccrRkLWZGfv4+FhmZmbcO8pDZDLj70ql4v4vpNxlgqymDQ25jO/u7rqL6xkmv7xFD2QaZzmyOg+LjW9F+S3INM57VxRYTjUPvwWpxhk6vsKjXskzkUKqcYZ50cgz3CHVeMwmYiyYiDUvPwWpxmO3jWNARal5+SlINZ63Sqsnnp+fVS8/BanGLy8v3UVFI+usDVKN11Ki1gNZn5CA1zhLWVEKl99kfSwIXuPUvkUla1cIXuOjo6PugiIyOzurekoEXuPspIpKVu8OvMb5FrWoUH9onhKB1/jW1pa7oIhkVW/gNR77846YZJ25gde41VHQ/4DOrOYpEXiNW36X+q/J2peD1zh98qLCj6Z5SgSqcWrdIkNrW/OVSETkD7jlTunEta0vAAAAAElFTkSuQmCC";
        var tranparentImage = "iVBORw0KGgoAAAANSUhEUgAAASwAAAEsCAYAAAB5fY51AAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyBpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYwIDYxLjEzNDc3NywgMjAxMC8wMi8xMi0xNzozMjowMCAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNSBXaW5kb3dzIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOjBDRDJCQURFOEU4QTExRTVCNEJDODRGQTg0MkVDQUFGIiB4bXBNTTpEb2N1bWVudElEPSJ4bXAuZGlkOjBDRDJCQURGOEU4QTExRTVCNEJDODRGQTg0MkVDQUFGIj4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6MENEMkJBREM4RThBMTFFNUI0QkM4NEZBODQyRUNBQUYiIHN0UmVmOmRvY3VtZW50SUQ9InhtcC5kaWQ6MENEMkJBREQ4RThBMTFFNUI0QkM4NEZBODQyRUNBQUYiLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz4AIMhPAAAC9ElEQVR42uzUQREAAAjDMMC/56EDLpHQRztJAVwwEgCGBWBYgGEBGBaAYQGGBWBYAIYFGBaAYQEYFmBYAIYFYFiAYQEYFoBhAYYFYFgAhgUYFoBhARgWYFgAhgVgWIBhARgWYFgAhgVgWIBhARgWgGEBhgVgWACGBRgWgGEBGBZgWACGBWBYgGEBGBaAYQGGBWBYAIYFGBaAYQEYFmBYAIYFYFiAYQEYFmBYAIYFYFiAYQEYFoBhAYYFYFgAhgUYFoBhARgWYFgAhgVgWIBhARgWgGEBhgVgWACGBRgWgGEBGBZgWACGBWBYgGEBGBZgWACGBWBYgGEBGBaAYQGGBWBYAIYFGBaAYQEYFmBYAIYFYFiAYQEYFoBhAYYFYFgAhgUYFoBhARgWYFgAhgVgWIBhARgWYFgAhgVgWIBhARgWgGEBhgVgWACGBRgWgGEBGBZgWACGBWBYgGEBGBaAYQGGBWBYAIYFGBaAYQEYFmBYAIYFYFiAYQEYFmBYAIYFYFiAYQEYFoBhAYYFYFgAhgUYFoBhARgWYFgAhgVgWIBhARgWgGEBhgVgWACGBRgWgGEBGBZgWACGBWBYgGEBGBZgWACGBWBYgGEBGBaAYQGGBWBYAIYFGBaAYQEYFmBYAIYFYFiAYQEYFoBhAYYFYFgAhgUYFoBhARgWYFgAhgVgWIBhARgWYFgAhgVgWIBhARgWgGEBhgVgWACGBRgWgGEBGBZgWACGBWBYgGEBGBaAYQGGBWBYAIYFGBaAYQEYFmBYAIYFYFiAYQEYFmBYAIYFYFiAYQEYFoBhAYYFYFgAhgUYFoBhARgWYFgAhgVgWIBhARgWgGEBhgVgWACGBRgWgGEBGBZgWACGBRiWBIBhARgWYFgAhgVgWIBhARgWgGEBhgVgWACGBRgWgGEBGBZgWACGBWBYgGEBGBaAYQGGBWBYAIYFGBaAYQEYFmBYAIYFGBaAYQEYFmBYAIYFYFiAYQEYFoBhAYYFYFgAhgV8tgIMAOkpBVVs062bAAAAAElFTkSuQmCC";
        
        // Retrieves the attachments which contains image information
        function getNotes(GLAnsName, annotationId, GLAnsId, combobox, currentI, dataLength) {
            var noteFetch = "<fetch version='1.0' output-format='xml-platform' mapping='logical' distinct='false' resultformat='DynamicEntities' >" +
                "<entity name='annotation'>" +

                "<attribute name='documentbody' />" +
                "<attribute name='annotationid' />" +
                "<order attribute='createdon' descending='false' />" +
                "<filter type='and'>" +
                "<condition attribute='annotationid' operator='eq' uitype='annotation' value='" + annotationId + "' />" +
                "</filter>" +
                "</entity>" +
                "</fetch>";
            MobileCRM.FetchXml.Fetch.executeFromXML(noteFetch, function (data) {
                if (data != null && data.length > 0) {

                    var noteAttachment = data[0].properties["documentbody"] != null ? data[0].properties["documentbody"] : null
                    var imgElement = "data:image/jpeg;base64," + noteAttachment;
                    var recPrimayName = GLAnsName != null ? GLAnsName : "(No Name)";
                    combobox.dataSource.add({ RecordName: recPrimayName, ImageUrlDef: imgElement, RId: GLAnsId });
                    if (currentI == dataLength.length - 1) {
                        combobox.readonly(false);
                        combobox.select(0);
                        var _url = combobox.value();
                        $($($(combobox.wrapper[0]).children("span"))).children("div#CBI").css("background-image", "url(" + _url + ")");
                        $($($(combobox.wrapper[0]).children("span"))).children("div#CBI").css("display", "block");
                        $($($(combobox.wrapper[0]).children("span"))).children("input").css({ "padding-right": "30px" });
                        //combobox.text("");
                        removePanels();
                    }
                }
            }, function (error) { MobileCRM.bridge.alert("Note Error : " + error); removePanels(); }, null);
        }

        // Attach images to the survey
        function attachImagesToPicture(GLAnsName, annotationId, GLAnsId, combobox, currentI, dataLength, noteAttahment) {
            if (isOnline.toString() == "true") {
                getNotes(GLAnsName, annotationId, GLAnsId, combobox, currentI, dataLength);
            }
            else if (isOnline.toString() == "false") {
                MobileCRM.DynamicEntity.loadDocumentBody("annotation", annotationId, function (data) {
                    var imgElement = "data:image/jpeg;base64," + data;
                    var recPrimayName = GLAnsName != null ? GLAnsName : "(No Name)";
                    combobox.dataSource.add({ RecordName: recPrimayName, ImageUrlDef: imgElement, RId: GLAnsId });
                    if (currentI == dataLength.length - 1) {
                        combobox.readonly(false);
                        combobox.select(0);
                        var _url = combobox.value();
                        $($($(combobox.wrapper[0]).children("span"))).children("div#CBI").css("background-image", "url(" + _url + ")");
                        $($($(combobox.wrapper[0]).children("span"))).children("div#CBI").css("display", "block");
                        $($($(combobox.wrapper[0]).children("span"))).children("input").css({ "padding-right": "30px" });
                        removePanels();
                    }
                },
                    function (error) {
                        var imgElement = "data:image/png;base64," + noImage;
                        var recPrimayName = GLAnsName != null ? GLAnsName : "(No Name)";
                        combobox.dataSource.add({ RecordName: recPrimayName, ImageUrlDef: null, RId: GLAnsId });
                        if (currentI == dataLength.length - 1) {
                            combobox.readonly(false);
                            combobox.select(0);
                            var _url = combobox.value();
                            $($($(combobox.wrapper[0]).children("span"))).children("div#CBI").css("display", "none");
                            $($($(combobox.wrapper[0]).children("span"))).children("input").css({ "padding-right": "0px" });
                            removePanels();
                        }
                    }
                );
            }
        }

        // Attaches images to the lookup control
        function attachImagesToLookup(answerImgId, QGLId, GLAnsName, GLAnsId, entityName, currentI, dataLength, attype, LoadType) {
            MobileCRM.DynamicEntity.loadDocumentBody(entityName, answerImgId, function (data) {
                var imgElement = "data:image/jpeg;base64," + data;
                var combobox = $("#Lookup" + QGLId).data("kendoComboBox");
                var recPrimayName = GLAnsName != null ? GLAnsName : "(No Name)";
                combobox.dataSource.add({ RecordName: recPrimayName, ImageUrlDef: imgElement, RId: GLAnsId });
                if (currentI == dataLength.length - 1) {
                    combobox.readonly(false);
                    combobox.select(-1);
                    //combobox.text("");
                    if (LoadType == "ApplyFilter")
                        removePanels();
                    else {
                        CheckResponse_Prev(QGLId, SurveyId, attype, "Lookup" + QGLId, null, dataLength, "true");
                    }
                }
            },
                function (error) {
                    var combobox = $("#Lookup" + QGLId).data("kendoComboBox");
                    var imgElement = "data:image/png;base64," + noImage;
                    var recPrimayName = GLAnsName != null ? GLAnsName : "(No Name)";
                    combobox.dataSource.add({ RecordName: recPrimayName, ImageUrlDef: imgElement, RId: GLAnsId });
                    if (currentI == dataLength.length - 1) {
                        combobox.readonly(false);
                        combobox.select(-1);
                        //combobox.text("");
                        if (LoadType == "ApplyFilter")
                            removePanels();
                        else {
                            CheckResponse_Prev(QGLId, SurveyId, attype, "Lookup" + QGLId, null, dataLength, "true");
                        }
                        //removePanels();
                    }
                }
            );

        }

        // Used to attach images to graphical list
        function attachImagesToGL(answerImg, QGLId, GLAnsName, GLAnsId, index, dataLength, AttributeType) {
            //MobileCRM.bridge.alert("answerImg" + answerImg.id);
            MobileCRM.DynamicEntity.loadDocumentBody("ebecssvy_answers", answerImg.id, function (data) {
                var imgElement = "data:image/jpeg;base64," + data;
                //MobileCRM.bridge.alert("imgElement" + imgElement);
                var combobox = $("#GraphicalList" + QGLId).data("kendoComboBox");
                combobox.dataSource.add({ RecordName: GLAnsName, ImageUrlDef: imgElement, AId: GLAnsId });
                if (index == dataLength.length - 1)
                    CheckResponse_Prev(QGLId, SurveyId, AttributeType, "GraphicalList" + QGLId);
            },
                function (error) {
                    var combobox = $("#GraphicalList" + QGLId).data("kendoComboBox");
                    var imgElement = "data:image/png;base64," + noImage;
                    combobox.dataSource.add({ RecordName: GLAnsName, ImageUrlDef: imgElement, AId: GLAnsId });
                    if (index == dataLength.length - 1)
                        CheckResponse_Prev(QGLId, SurveyId, AttributeType, "GraphicalList" + QGLId);
                }, null);

        }

        // Used to move to the previous tab.
        function Previous(moveIndex) {

            //Request from Jyoti - 2018/06/15
            /*//Save data when click on Next
            if (!SaveLast()) {
                //MobileCRM.bridge.alert("going to return");
                return;
            }*/

            var currentJ = j;
            showLoadingMessage_Process("Navigating to previous tab");
            //EvaluateHideTabsWhileLoadingSurvey();
            //MobileCRM.bridge.alert("Hide Tab Array Count: " + hideTabList.length);
            ButtonType = "prev";
            if (moveIndex != undefined && moveIndex != null)
                j = moveIndex;
            else
                j--;
            $("#Questionid").empty();
            $("#Answerid").empty();
            if (j >= 0) {
                var proceedTabMove = "false";
                if (moveIndex != undefined && moveIndex != null) {
                    var _currentTabid = Result_Tabs[j].id;
                    var isTabHidden = getTabHidden(_currentTabid);
                    if (isTabHidden == "false") {
                        proceedTabMove = "true";
                    }
                }
                else {
                    for (var cindex = j; cindex >= 0; cindex--) {
                        var _currentTabid = Result_Tabs[cindex].id;
                        var isTabHidden = getTabHidden(_currentTabid);
                        if (isTabHidden == "false") {
                            proceedTabMove = "true";
                            j = cindex;
                            break;
                        }

                    }
                }
                if (proceedTabMove == "true") {
                    $("#QAConatiner").empty();
                    $("#imgServey").css("display", "none");
                    HideorShowTab(false, "Image Survey");
                    document.getElementById('nextid').disabled = false;
                    document.getElementById('Save').disabled = false;
                    GetQuestions(Result_Tabs[j]);
                }
                else {
                    if (moveIndex != undefined && moveIndex != null) {
                        if (currentJ >= 1)
                            document.getElementById('previousid').disabled = false;
                        else {
                            MobileCRM.bridge.alert("Tab is hidden");
                        }
                    }
                    else {
                        if (j >= 1)
                            document.getElementById('previousid').disabled = false;
                        else {
                            MobileCRM.bridge.alert("Tab is hidden");
                        }
                    }

                    removePanels();
                    j = currentJ;
                }
            }
            $('#Finish').hide();
            $("#nextid").show();

            Answer = null;
            SignaturePadObjectArray = [];
            updateConductedSurveyLastIndex(j);
            //MobileCRM.bridge.alert("previous StatusProgress " + j)
            showStatusProgress(j);
            ShowFinalSurveyScoreButton();
            setTimeout(ScoreTracking, 500);
        }

        var ButtonType = ""; var IsAnswerChanged = false; var IsAnswered = false;

        // Used to move to the next available tab.
        function Next(moveIndex) {

            //Request from Jyoti - 2018/06/15
            //Save data when click on Next
            if (!SaveLast()) {
                //MobileCRM.bridge.alert("going to return");
                return;
            }

            var currentJ = j;
            showLoadingMessage_Process("Navigating to next tab");

            {
                //EvaluateHideTabsWhileLoadingSurvey();
                ButtonType = "next";
                if (moveIndex != undefined && moveIndex != null)
                    j = moveIndex;
                else
                    j++;
                $("#Questionid").empty();
                $("#Answerid").empty();
                if (j >= 0) {
                    var proceedTabMove = "false";
                    if (moveIndex != undefined && moveIndex != null) {
                        var _currentTabid = Result_Tabs[j].id;
                        var isTabHidden = getTabHidden(_currentTabid);
                        if (isTabHidden == "false") {
                            proceedTabMove = "true";
                        }
                    }
                    else {
                        for (var cindex = j; cindex < Result_Tabs.length; cindex++) {
                            var _currentTabid = Result_Tabs[cindex].id;
                            var isTabHidden = getTabHidden(_currentTabid);
                            if (isTabHidden == "false") {
                                proceedTabMove = "true";
                                j = cindex;
                                break;
                            }

                        }
                    }
                    if (proceedTabMove == "true") {
                        $("#QAConatiner").empty();
                        $("#imgServey").css("display", "none");
                        HideorShowTab(false, "Image Survey");
                        document.getElementById('nextid').disabled = false;
                        document.getElementById('Save').disabled = false;
                        GetQuestions(Result_Tabs[j]);
                    }
                    else {
                        j = currentJ;
                        removePanels();
                        if (moveIndex != undefined && moveIndex != null) {
                            if (j == Result_Tabs.length - 1) {
                                $("#nextid").hide();
                                $('#Finish').show();
                                ShowFinalSurveyScoreButton();
                            }
                        }
                        else {
                            MobileCRM.bridge.alert("Tab is hidden");
                        }

                    }


                }
                if (j == Result_Tabs.length - 1) {
                    $("#nextid").hide();
                    $('#Save').show();
                }
                Answer = null;
            }

            SignaturePadObjectArray = [];
            updateConductedSurveyLastIndex(j);
            //MobileCRM.bridge.alert("next StatusProgress " + j)
            showStatusProgress(j);
            ShowFinalSurveyScoreButton();
            setTimeout(ScoreTracking, 500);
        }

        // Statuscode  of current conducted survey will be updated
        function updateConductedSurveyStatus(stcode) {
            var CCSurvey = new MobileCRM.DynamicEntity("ebecssvy_conductedsurvey", _CConductedSurveyId);
            var props = CCSurvey.properties;
            props.statuscode = stcode;
            CCSurvey.save(
                function (error) {
                    if (error) {
                        MobileCRM.bridge.alert("An error occurred: " + error);
                        MobileCRM.Bridge.prototype.closeForm();
                        removePanels();
                    }
                });
        }

        function updateTraversedTabList(tablist) {
            var CCSurvey = new MobileCRM.DynamicEntity("ebecssvy_conductedsurvey", _CConductedSurveyId);
            var props = CCSurvey.properties;
            props.ebecssvy_traversedtablist = tablist;
            CCSurvey.save(
                function (error) {
                    if (error) {
                        MobileCRM.bridge.alert("An error occurred: " + error);
                        MobileCRM.Bridge.prototype.closeForm();
                        removePanels();
                    }
                });
        }

        //Last tab index will saved for furture. If user reloads the same then last seen tab will be focused.
        function updateConductedSurveyLastIndex(indexValue) {

            if (lastSeenTabIndex != indexValue) {
                var _conductedSurveyRec = new MobileCRM.DynamicEntity("ebecssvy_conductedsurvey", _CConductedSurveyId);
                var props = _conductedSurveyRec.properties;
                props.ebecssvy_lastseensurveytabindex = indexValue;
                _conductedSurveyRec.save(
                    function (error) {
                        if (error) {
                            MobileCRM.bridge.alert("An error occurred: " + error);

                        }
                    });
            }
            lastSeenTabIndex = j;
        }

        // Checks whether to display question or not on survey form
        function getQuestionHidden(_currentQuestionId) {
            if (hideQuestionsList.length > 0 && hideQuestionsList.indexOf(_currentQuestionId) != -1) {
                return "true";
            }
            return "false";
        }

        // Checks whether to display question or not on survey form
        function getQuestionShown(_currentQuestionId) {
            if (showQuestionsList.length > 0 && showQuestionsList.indexOf(_currentQuestionId) != -1) {
                return "true";
            }
            return "false";
        }

        // Checks whether given index is present in the given array
        function isIdPresentInArray(dataArray, _currentQuestionId) {
            if (dataArray.length > 0 && dataArray.indexOf(_currentQuestionId) != -1) {
                return "true";
            }
            return "false";
        }

        //checks whether question is required question or not.
        function IsQuestionRequired(_currentQuestionId) {
            if (makeRequiredList.length > 0 && makeRequiredList.indexOf(_currentQuestionId) != -1) {
                return "true";
            }
            return "false";
        }

        // Checks whether a tab is hidden tab or not
        function getTabHidden(_currentTabid) {
            if (hideTabList.length > 0 && hideTabList.indexOf(_currentTabid) != -1) {
                return "true";
            }
            return "false";
        }

        // Saves information on survey form
        function SaveLast(isSaveLastCalledFromUpdate) {
            isSaveLastCalledFromUpdate = isSaveLastCalledFromUpdate == undefined || isSaveLastCalledFromUpdate == false ? false : true;

            //If user retake survey then make it to In Review after user hit on Save button
            if (statusChangeCaptured == 213020001) {
                updateConductedSurveyStatus(213020004);
                CCSurveyStatusChanged = true;
            }             

            actionsCollection = new Array();
            //document.getElementById('Save').disabled = true;
            ButtonType = "save";

            var isSave = CheckResponse_Save(Answer, isSaveLastCalledFromUpdate);
            saveTraversedTabList(lastSeenTabIndex, 'true', 'true');
            
            //If save responses then save capture score question
            CreateCaptureScoreResponse();

            if (j == Result_Tabs.length - 1) {
                $('#Finish').show();
                $("#nextid").hide();
                ShowFinalSurveyScoreButton();
            }
            if (j == Result_Tabs.length - 2) {
                var _nextTabid = Result_Tabs[j].id;
                if (hideTabList.length > 0 && hideTabList.indexOf(_nextTabid) != -1) {
                    //$("#nextid").hide();
                    //$('#Finish').show();
                }
            }

            return isSave;
        }

        var targetSaveArray = null;
        var targetPrevArray = null;
        var _IsLastQuestion = false;

        // Checks the question attribute type and format/places informtation accordingly

        function CheckResponse_Save(_surveyId, isSaveLastCalledFromUpdate) {

            if (!isSaveLastCalledFromUpdate)
                showLoadingMessage_Process("Saving in process");

            targetSaveArray = [];
            var QAObject = null;

            try {
                var isSave = "true";
                var qIndex = 0;
                $.each(QuestionsArray, function () {
                    var isHidden = false;
                    var isRequired = false;
                    var childElement;
                    var type = "";
                    var answer = "";
                    var item = $("#QAConatiner div[id='" + this.id + "']");
                    if (item.length > 0) {
                        QAObject = new Object();
                        QAObject.qid = this.id;
                        QAObject.qname = item.find('label')[0].textContent;

                        isHidden = item.parent().css("display") == "none" ? true : false;
                        isRequired = item.attr("isRequired");

                        type = item.attr('custtype');
                        QAObject.qtype = type;
                        switch (type) {
                            case "multitext":
                                var childElement = item.find('textarea');
                                answer = childElement.val();
                                QAObject.answer = answer;
                                QAObject.responseScore = CalculateIndividualAnswerScore(QAObject.qid, answer.toString());
                                if (!isHidden && isRequired == "true") {
                                    if (!isSaveLastCalledFromUpdate)
                                        if (answer.length <= childElement.attr("min")) {
                                            isSave = ShowQuestionErrorMessage("Minimum character should be greater than the visible question(s)");
                                        }
                                }
                                QAObject.lookupId = "";
                                targetSaveArray.push(QAObject);
                                break;
                            case "text":
                            case "currency":
                            case "Calculated":
                                var childElement = item.find('input');
                                answer = childElement.val();
                                QAObject.answer = answer;
                                QAObject.responseScore = CalculateIndividualAnswerScore(QAObject.qid, answer.toString());
                                if (!isHidden && isRequired == "true") {
                                    if (!isSaveLastCalledFromUpdate)
                                        if (answer.length <= childElement.attr("min")) {
                                            isSave = ShowQuestionErrorMessage("Minimum character should be greater than the visible question(s)");
                                        }
                                }
                                QAObject.lookupId = "";
                                targetSaveArray.push(QAObject);
                                break;
                            case "integer":
                            case "Decimal":
                                var childElement = item.find('input');
                                answer = childElement.val();
                                QAObject.answer = answer;
                                QAObject.responseScore = CalculateIndividualAnswerScore(QAObject.qid, answer.toString());
                                if (!isHidden && isRequired == "true") {
                                    if (!isSaveLastCalledFromUpdate)
                                        if (answer.length <= childElement.attr("min")) {
                                            isSave = ShowQuestionErrorMessage("Minimum character should be greater than the visible question(s)");
                                        }
                                }
                                QAObject.lookupId = "";
                                targetSaveArray.push(QAObject);
                                break;
                            case "checkbox":
                                var childElement = item.find('input');
                                answer = childElement.prop('checked');
                                QAObject.answer = answer;
                                QAObject.responseScore = CalculateIndividualAnswerScore(QAObject.qid, answer);
                                QAObject.lookupId = "";
                                targetSaveArray.push(QAObject);
                                break;
                            case "multicheckbox":
                                var multipleAnswerScore = "";
                                var kk = 0;
                                var inputControls = item.next().find("input:checked").parent();
                                $.each(inputControls, function () {
                                    var _label = $(this).find('label')[0].textContent;
                                    if (kk == 0)
                                        answer += _label;
                                    else
                                        answer += "," + _label;
                                    multipleAnswerScore += CalculateIndividualAnswerScore(QAObject.qid, _label);
                                    kk++;
                                });
                                QAObject.answer = answer;
                                QAObject.responseScore = multipleAnswerScore;
                                QAObject.lookupId = "";
                                targetSaveArray.push(QAObject);
                                break;
                            case "radio":
                                if (item.next().find("input:checked").length > 0) {
                                    answer = item.next().find("input:checked").val();
                                }
                                else {
                                    answer = "";
                                }
                                QAObject.answer = answer;
                                QAObject.responseScore = CalculateIndividualAnswerScore(QAObject.qid, answer);
                                QAObject.lookupId = "";
                                targetSaveArray.push(QAObject);
                                break;
                            case "select":
                                answer = item.find("select option:selected").text();
                                answer = (answer == "---Select---") ? "" : answer;
                                QAObject.answer = answer;
                                QAObject.lookupId = "";
                                QAObject.responseScore = CalculateIndividualAnswerScore(QAObject.qid, answer);
                                targetSaveArray.push(QAObject);
                                break;
                            case "date":
                                if (item.find(".k-input").length > 0) {
                                    var cId = $(item.find(".k-input")).prop('id');
                                    if (cId.indexOf("datepicker") != -1) {
                                        answer = item.find(".k-input").val();
                                        QAObject.answer = answer;
                                        QAObject.lookupId = "";
                                        QAObject.lookupId = "";
                                        targetSaveArray.push(QAObject);
                                    }
                                }
                                break;
                            case "graphicalList":
                                var _AnswerId = null;
                                if (GLArray.length > 0) {
                                    var QidIndex = findGLIndex(GLArray, "GraphicalList" + QAObject.qid);
                                    if (QidIndex != -1) {
                                        answer = GLArray[QidIndex].GLAnswer;
                                        _AnswerId = GLArray[QidIndex].GLAnswerId;
                                    }
                                }
                                QAObject.answer = answer;
                                QAObject.lookupId = _AnswerId;
                                QAObject.responseScore = CalculateIndividualAnswerScore(QAObject.qid, answer);
                                targetSaveArray.push(QAObject);
                                break;
                            case "lookup":
                                var _lookupId = null;
                                if (LookupArray.length > 0) {
                                    var QidIndex = findGLIndex(LookupArray, QAObject.qid);
                                    if (QidIndex != -1) {
                                        answer = LookupArray[QidIndex].GLAnswer;
                                        _lookupId = LookupArray[QidIndex].GLAnswerId;
                                    }
                                }
                                //MobileCRM.bridge.alert("lookup answer : " + answer + " LookupArray.length: " + LookupArray.length + " QidIndex: " + QidIndex + " QuestionId Survey: " + QAObject.qid + " QuestionId Array: " + LookupArray[0].Qid);
                                QAObject.answer = answer;
                                QAObject.lookupId = _lookupId;
                                QAObject.responseScore = CalculateIndividualAnswerScore(QAObject.qid, answer);
                                targetSaveArray.push(QAObject);
                                break;
                            case "imagecapture":
                                answer = $("#QAConatiner input[id='captureImagelookup" + QAObject.qid + "']").val();
                                QAObject.answer = answer;
                                QAObject.lookupId = "captureimagecamera" + QAObject.qid;
                                QAObject.responseScore = "";
                                targetSaveArray.push(QAObject);
                                break;
                            case "signature":
                                qIndex = findCrmEntityArrayIndex(QuestionsArray, QAObject.qid);
                                //MobileCRM.bridge.alert("qIndex: " + qIndex + " SignaturePadObjectArray: " + SignaturePadObjectArray.length);
                                if (SignaturePadObjectArray != null && typeof SignaturePadObjectArray != 'undefined' && SignaturePadObjectArray.length > 0 && SignaturePadObjectArray[qIndex] != null
                                    && typeof SignaturePadObjectArray[qIndex] != 'undefined' && SignaturePadObjectArray[qIndex] != "") {
                                    answer = "Signature";
                                    QAObject.answer = answer;
                                    QAObject.lookupId = "";
                                    QAObject.responseScore = "";
                                    QAObject.imagedata = SignaturePadObjectArray[qIndex].isEmpty() ? "" : SignaturePadObjectArray[qIndex].toDataURL();
                                    targetSaveArray.push(QAObject);
                                }
                                break;
                            default: break;

                        }
                        if (!isHidden && isRequired == "true" && type != undefined && type != null && type != "") {
                            if (!isSaveLastCalledFromUpdate)
                                if (answer.length == 0) {
                                    isSave = ShowQuestionErrorMessage("Please fill required question(s)");
                                }
                                else if (type == "signature" && SignaturePadObjectArray[qIndex].isEmpty()) {
                                    isSave = ShowQuestionErrorMessage("Please fill required question(s)");
                                }
                        }
                    }
                });

                if (targetSaveArray.length > 0 && isSave == "true") {
                    removePanels();
                    $.each(targetSaveArray, function () {
                        showLoadingMessage_Process("Saving in process");
                        var _qid = this.qid;
                        var _cAnswer = this.answer;
                        var _responseScore = this.responseScore;
                        var currentQAObj = this;
                        var currentReponseId = null;
                        var currentLookupResponseId = this.lookupId;

                        //skip saving capture image questions
                        if (this.lookupId != ("captureimagecamera" + _qid)) {

                            var _responseFetch = "<fetch version='1.0' output-format='xml-platform' mapping='logical' distinct='true' resultformat='DynamicEntities'>" +
                                "<entity name='ebecssvy_responses'>" +
                                "<attribute name='ebecssvy_responsesid' />" +
                                "<attribute name='createdon' />" +
                                "<attribute name='ebecssvy_surveyanswer' />" +
                                "<attribute name='ebecssvy_xmlresponse' />" +
                                "<attribute name='ebecssvy_surveyanswerandid' />" +
                                "<order attribute='modifiedon' descending='true' />" +
                                "<filter type='and'>" +
                                "<condition attribute='ebecssvy_questionid' operator='eq' value='" + _qid + "' />" +
                                "<condition attribute='ebecssvy_conductedsurveyid' operator='eq' value='" + _CConductedSurveyId + "' />" +
                                "</filter>" +
                                "</entity>" +
                                "</fetch>";
                            MobileCRM.FetchXml.Fetch.executeFromXML(_responseFetch, function (data) {
                                //MobileCRM.bridge.alert("dataLength : " + data.length);
                                if (data != null && data.length > 0) {
                                    var xmlResponse = data[0].properties["ebecssvy_xmlresponse"];
                                    var dom = $(xmlResponse);
                                    var responseLookupId = data[0].properties["ebecssvy_surveyanswerandid"] != null ? data[0].properties["ebecssvy_surveyanswerandid"] : null;
                                    var oldAns = $(dom).find("SurveyAnswer")[0].textContent;
                                    //MobileCRM.bridge.alert("oldAns : " + oldAns + " : " + _cAnswer);
                                    if (oldAns != _cAnswer && currentQAObj.qtype != "signature") {
                                        UpdateResponse(currentQAObj, _surveyId, data[0].properties["ebecssvy_responsesid"], xmlResponse);
                                        IsAnswerChanged = false;
                                    } else if (currentQAObj.qtype == "signature") {
                                        UpdateResponse(currentQAObj, _surveyId, data[0].properties["ebecssvy_responsesid"], xmlResponse);
                                    }
                                    else {
                                        if (currentLookupResponseId != null) {
                                            if (currentLookupResponseId != responseLookupId) {
                                                UpdateResponse(currentQAObj, _surveyId, data[0].properties["ebecssvy_responsesid"], xmlResponse);
                                                IsAnswerChanged = false;
                                            }
                                            else {
                                                removePanels();
                                                document.getElementById('Save').disabled = false;
                                                ShowOrHideIndicator("UnSavedDiv", "none");
                                                ShowOrHideIndicator("SavedDiv", "");
                                                if (IsPerfromAction == "true") {
                                                    IsPerfromAction = "false";
                                                    performActions();
                                                }
                                            }
                                        }
                                        else {
                                            removePanels();
                                            document.getElementById('Save').disabled = false;
                                            ShowOrHideIndicator("UnSavedDiv", "none");
                                            ShowOrHideIndicator("SavedDiv", "");
                                            if (IsPerfromAction == "true") {
                                                IsPerfromAction = "false";
                                                performActions();
                                            }
                                        }
                                    }

                                    if (data.length > 1) {
                                        for (var d = 1; d < data.length; d++) {
                                            var _responseId = data[d].properties["ebecssvy_responsesid"];
                                           //MobileCRM.bridge.alert("_responseId : " + _responseId + " : " + data[d]);
                                            MobileCRM.DynamicEntity.deleteById(
                                                "ebecssvy_responses",
                                                _responseId,
                                                function () {
                                                    //MobileCRM.bridge.alert(" Delete response sucess");
                                                },
                                                function (error) {
                                                    MobileCRM.bridge.alert("An error occurred: " + error);
                                                }
                                            );
                                        }
                                    }
                                }
                                else if (data.length == 0) {
                                    checkConductedSurvey(currentQAObj, _surveyId);
                                }
                                else {
                                    removePanels();
                                }                                    
                            }, function (error) {
                                document.getElementById('Save').disabled = false;
                                AnsErrorCallBack(error)
                            }, null);

                           /* //MobileCRM.bridge.alert("In saving length " + responsesRelatedToQuestion.length);
                            $.each(responsesRelatedToQuestion, function () {
                                //MobileCRM.bridge.alert("In : " + this.questionid + " : " + _qid + " : " + this.responseid);
                                if (this.questionid == _qid && this.responseid != "00000000-0000-0000-0000-000000000000") {
                                    currentReponseId = this.responseid;
                                    this.responsescore = _responseScore;
                                }
                            });
                            if (currentReponseId != null) {                                
                            }
                            else {

                                checkConductedSurvey(currentQAObj, _surveyId);
                            }*/
                        }
                    });

                    ShowOrHideIndicator("UnSavedDiv", "none");
                    ShowOrHideIndicator("SavedDiv", "");
                    removePanels();
                    return true;
                }
                else {
                    removePanels();
                    return false;
                }
            } catch (error) {
                MobileCRM.bridge.alert("Error occured: " + error);
            }
        }

        function ShowQuestionErrorMessage(message) {
            MobileCRM.bridge.alert(message);
            document.getElementById('Save').disabled = false;
           // document.getElementById('nextid').disabled = true;
            return "false";
        }

        function findLookupIndex(arr, obj) {
            if (arr == null || typeof arr == "undefined" || arr.length == 0) {
                return -1;
            }
            return arr.map(function (x) { return x.Qid; }).indexOf(obj);            
        }

        function findNoteIndex(arr, obj) {
            var elementPos = arr.map(function (x) { return x.noteId; }).indexOf(obj);
            return elementPos;
        }

        function findFetchIndex(arr, obj) {
            var elementPos = arr.map(function (x) { return x.qId; }).indexOf(obj);
            return elementPos;
        }

        function findCustomFilterIndex(arr, obj) {
            var elementPos = arr.map(function (x) { return x.qId; }).indexOf(obj);
            return elementPos;
        }

        function findGLIndex(arr, obj) {
            var elementPos = arr.map(function (x) { return x.Qid; }).indexOf(obj);
            return elementPos;
        }

        function findCrmEntityArrayIndex(arr, obj) {
            var elementPos = arr.map(function (x) { return x.id; }).indexOf(obj);
            return elementPos;
        }

        var actionsCollection = null;
        //This function will be called on changes done in answer on survey form to take appropriate actions for graphical list

        function CatchAnswer_Signature(questionId, isEmpty) {
            //not removed red
            ShowOrHideIndicator("SavedDiv", "none");
            ShowOrHideIndicator("UnSavedDiv", "");
            //MobileCRM.bridge.alert(questionId);//SignaturePadObjectArray[id].isEmpty());
            showLoadingMessage_Process("Checking actions");
            if (isEmpty) {
                //MobileCRM.bridge.alert("inside if : " + isEmpty);
                checkAction(null, "signature" + questionId, null, null, true);
            } else {
                //MobileCRM.bridge.alert("inside else : " + isEmpty);
                checkAction(null, "signature" + questionId, "signature", null, true);
            }
        }

        function CatchAnswer_GL(GLQid, GLAId) {
            ShowOrHideIndicator("SavedDiv", "none");
            ShowOrHideIndicator("UnSavedDiv", "");
            if (GLQid.indexOf("GraphicalList") == 0) {
                var combobox = $("#" + GLQid).data("kendoComboBox");
                $($($(combobox.wrapper[0]).children())).css('background-color', '');
            }
            if (GLAId != null) {
                showLoadingMessage_Process("Checking actions");
                RouteQuestionRelatedAction(GLAId, GLQid);
                checkAction(GLAId, GLQid, null, null);
            } else {
                showLoadingMessage_Process("Checking actions");
                RouteQuestionRelatedAction(null, GLQid);
            }
        }
        //This function will be called on changes done in answer on survey form to take appropriate actions for lookup attributes

        function CatchAnswer_Lookup(controlId, Answer, selectedId) {
            if (controlId.indexOf("Lookup") == 0) {
                var combobox = $("#" + controlId).data("kendoComboBox");
                $($($(combobox.wrapper[0]).children())).css('background-color', '');
            }
            ShowOrHideIndicator("SavedDiv", "none");
            ShowOrHideIndicator("UnSavedDiv", "");
            showLoadingMessage_Process("Checking actions");
            RouteQuestionRelatedAction(Answer, controlId);
            checkAction("lookup", controlId, Answer, selectedId);
        }
        //This function will be called on changes done in answer on survey form to take appropriate for currency attributes

        function CatchAnswerNumeric(event) {
            // isAnswerFound = false;
            var ResStr = $("#" + event.target.id).val();

            if (event.target.type == "text") {
                var symbol = "";
                var numberOfDecimalPlaces = 2;

                $("#" + event.target.id).removeClass('RedColor');

                var qType = event.target.attributes["customtype"] != null ? event.target.attributes["customtype"].value : null;
                var qControlId = null;

                if (qType == "integer" || qType == "currency" || qType == "Decimal") {
                    qControlId = event.target.attributes["customid"] != null ? event.target.attributes["customid"].value : null;
                } else {
                    qControlId = event.target.id;
                }

                var currentQuestion = $.grep(QuestionsArray, function (item) {
                    return item.properties["ebecssvy_questionsid"] == qControlId;
                });

                if (currentQuestion != null && currentQuestion.length > 0) {
                    numberOfDecimalPlaces = currentQuestion[0].properties["ebecssvy_numberofdecimalplaces"] != null && currentQuestion[0].properties["ebecssvy_numberofdecimalplaces"] != "" ? currentQuestion[0].properties["ebecssvy_numberofdecimalplaces"] : 2;

                    if (qType == "currency") {
                        symbol = currentQuestion[0].properties["ebecssvy_currency"] != null && currentQuestion[0].properties["ebecssvy_currency"] != "" ? currentQuestion[0].properties["ebecssvy_currency"] : "";

                        if (symbol != null && symbol != "" && typeof symbol != "undefined") {
                            symbol = symbol.substring(symbol.lastIndexOf("(") + 1, symbol.lastIndexOf(")"));
                        }
                    }
                }

                var selectedAnswer = event.target.value;
                if (selectedAnswer != "" && selectedAnswer != "£" && selectedAnswer != "-£" && ((symbol == null || symbol == "") || (symbol != null && symbol != "" && selectedAnswer != symbol && selectedAnswer != "-" + symbol))) {
                    //MobileCRM.bridge.alert('ResStr 1: ' + ResStr);
                    if (symbol != null && symbol != "") {
                        ResStr = ResStr.replace(symbol, "");

                        while (ResStr.indexOf(ThousandSeperator) > 0) {
                            ResStr = ResStr.replace(ThousandSeperator, "");
                        }

                        if (DecimalSeperator != ".") {
                            ResStr = ResStr.replace(DecimalSeperator, ".");
                        }
                    }
                    ResStr = ResStr.replace(/[,£]/g, '');

                    //MobileCRM.bridge.alert('ResStr 2: ' + ResStr);

                    if (ResStr != null && ResStr != "" && parseFloat(ResStr) < parseFloat($(event.target).attr("min"))) {
                        MobileCRM.bridge.alert("Minimum value should be greater than the " + $(event.target).attr("min"));
                        $("#" + event.target.id).focus();
                        removePanels();
                        return;
                    }

                    ShowOrHideIndicator("SavedDiv", "none");
                    ShowOrHideIndicator("UnSavedDiv", "");
                    showLoadingMessage_Process("Checking actions");
                    RouteQuestionRelatedAction(selectedAnswer, qControlId);
                    checkAction(qType, qControlId, selectedAnswer, null);
                } else {
                    ShowOrHideIndicator("SavedDiv", "none");
                    ShowOrHideIndicator("UnSavedDiv", "");
                    showLoadingMessage_Process("Checking actions");
                    RouteQuestionRelatedAction(null, qControlId);
                }
            }

            removePanels();
        }
        //This function will be called on changes done in answer on survey form to take appropriate actions for date attributes
       
        function CatchAnswer_Date(event) {
            //isAnswerFound = false;
            //MobileCRM.bridge.alert("Catch Answer 1 : " + event.target);
            ShowOrHideIndicator("SavedDiv", "none");
            ShowOrHideIndicator("UnSavedDiv", "");
            //MobileCRM.bridge.alert("Catch Answer 2 : " + event.isTrigger.toString());
            if (event != null && event.srElement == undefined && event.target != null && event.isTrigger != null && event.isTrigger.toString() == "true") {
                //MobileCRM.bridge.alert("Catch Answer 3 : " + event.target.attributes["customtype"].value);
                var qType = event.target.attributes["customtype"] != null ? event.target.attributes["customtype"].value : null;
                //MobileCRM.bridge.alert("Catch Answer 3 : " + qType);
                if (qType == "date") {
                    //MobileCRM.bridge.alert("DatePicker 1 : " + event.target.attributes["customid"].value);
                    var qControlId = event.target.attributes["customid"] != null ? event.target.attributes["customid"].value : null;
                    //MobileCRM.bridge.alert("DatePicker 2 : " + qControlId.toString().replace("datepicker", ""));
                    changeRelatedLookup(qControlId.toString().replace("datepicker", ""));
                    //MobileCRM.bridge.alert("DatePicker 3 : " + qControlId.toString().replace("datepicker", ""));
                    $("#" + qControlId).css('background-color', '');
                    var selectedAnswer = event.target.value;

                    //FilterLookupQuestion(qControlId, selectedAnswer);

                    if (selectedAnswer != "" && selectedAnswer != null) {
                        showLoadingMessage_Process("Checking actions");
                        RouteQuestionRelatedAction(selectedAnswer, qControlId);
                        checkAction(qType, qControlId, selectedAnswer, null);
                    } else {
                        showLoadingMessage_Process("Checking actions");
                        RouteQuestionRelatedAction(null, qControlId);
                    }
                }
                else {
                    removePanels();
                }
            }
            else {
                removePanels();
            }
        }

        //This function will be called on changes done in answer on survey form to take appropriate actions for rest of the attribute types
        function CatchAnswer(event) {
            //MobileCRM.bridge.alert("Catch Answer : " + event.srcElement.type);
            if ($(event.target).attr("pattern")) {
                var reg = new RegExp($(event.target).attr("pattern"));
                var currentValue = $(event.target).val();
                if (!reg.test(currentValue)) {
                    MobileCRM.bridge.alert("Invalid Input.Try Again.");
                    $(event.target).val("");
                    $("#" + event.target.id).focus();
                }
            }
            ShowOrHideIndicator("SavedDiv", "none");
            ShowOrHideIndicator("UnSavedDiv", "");

            if (event != undefined && event != null) {
                actionsCollection = null;
                //MobileCRM.bridge.alert("event.srcElement.type: " + event.srcElement.type);
                if (event.srcElement.type == "select-one") {
                    $("#" + event.srcElement.id).removeClass('RedColor');
                    if ($("#" + event.srcElement.id + " option:selected").length > 0) {
                        var answerId = $($("#" + event.srcElement.id + " option:selected")[0]).attr('answerid');
                        answerId = (answerId != "---Select---") ? answerId : null;
                        if (answerId != null) {
                            showLoadingMessage_Process("Checking actions");
                            RouteQuestionRelatedAction(answerId, event.srcElement.id);
                            //MobileCRM.bridge.alert("Select One >> AnswerId: " + answerId + " >> event.srcElement.id: " + event.srcElement.id);
                            checkAction(answerId, event.srcElement.id, null, null);
                        }
                        else {
                            //MobileCRM.bridge.alert("Select One >> event.srcElement.id: " + event.srcElement.id);
                            RouteQuestionRelatedAction(null, event.srcElement.id);
                        }

                        if (enableScoreTracking && $("#scoreTrackingSwitch") != null && $("#scoreTrackingSwitch").is(':checked')) {
                            ShowTabScore();
                        }
                    }

                }
                else if (event.srcElement.type == "radio") {
                    //MobileCRM.bridge.alert("Radio button ");
                    $("#" + event.srcElement.id).removeClass('RedColor');
                    var answerId = $("#" + event.srcElement.id).attr('answerid'); //$('input[name="radio"]:checked').attr('answerid');
                    var starAnsId = $("#" + $("#" + event.srcElement.id)[0].parentElement.id).attr("starAnsId");
                    var questionId = event.target.parentElement.parentElement.id;
                    //MobileCRM.bridge.alert("QID : " + questionId);
                    changeRelatedLookup(questionId.toString().replace("Answer", ""));

                    if (answerId != null) {

                        var selectedAnswer = $("#" + event.srcElement.id).attr('myLabel') != null ? $("#" + event.srcElement.id).attr('myLabel').toString() : "";
                        //MobileCRM.bridge.alert("Checkbox >> myLabel: " + $("#" + event.srcElement.id).attr('myLabel') != null ? $("#" + event.srcElement.id).attr('myLabel') : "");

                        //if (selectedAnswer != "" && selectedAnswer.toLowerCase() == "true") {
                        //    //MobileCRM.bridge.alert("True");
                        //    FilterLookupQuestion(event.target.parentElement.parentElement.id, "true");
                        //} else if (selectedAnswer != "" && selectedAnswer.toLowerCase() == "false") {
                        //    //MobileCRM.bridge.alert("False");
                        //    FilterLookupQuestion(event.target.parentElement.parentElement.id, "false");
                        //}

                        showLoadingMessage_Process("Checking actions");
                        RouteQuestionRelatedAction(answerId, questionId);
                        //MobileCRM.bridge.alert("Radio >> AnswerId: " + answerId + " >> event.target.parentElement.id: " + event.target.parentElement.parentElement.id);
                        checkAction(answerId, questionId, null, null);

                        if (enableScoreTracking && $("#scoreTrackingSwitch") != null && $("#scoreTrackingSwitch").is(':checked')) {

                            ShowTabScore();
                        }
                    }
                    else {
                        RouteQuestionRelatedAction(null, questionId);
                    }
                }
                else if (event.srcElement.type == "checkbox") {
                    $("#" + event.srcElement.id).removeClass('RedColor');
                    //var _className = $(event.srcElement).closest('td').prop("className");
                    var qType = $(event.srcElement).attr('customtype');
                    if (qType == "multicheckbox") {
                        var questionId = event.target.parentElement.parentElement.id;
                        changeRelatedLookup(questionId.toString().replace("MultipleAnswer", ""));

                        starAnsId = $("#" + $("#" + event.srcElement.id)[0].parentElement.id).attr("starAnsId");
                        if ($("#" + event.srcElement.id).prop('checked').toString() == "true") {
                            var answerId = $("#" + event.srcElement.id).attr('answerid');

                            if (answerId != null) {
                                //MobileCRM.bridge.alert("check box  >> AnswerId: " + answerId + " >> event.target.parentElement.id: " + event.target.parentElement.parentElement.id);
                                showLoadingMessage_Process("Checking actions");
                                RouteQuestionRelatedAction(answerId, questionId);
                                checkAction(answerId, questionId, null, null);
                            } else {
                                RouteQuestionRelatedAction(null, questionId);
                            }
                        } else {
                            //Check atleast one check box in multi check box is selected before invoke does not contains action
                            var mqId = questionId.toString().replace("MultipleAnswer", "");
                            var Result_Ans1 = $.grep(Result_Ans, function (arrayItem) {
                                return arrayItem.properties["ebecssvy_questionsid"].id == mqId;
                            });
                            var allEmpty = true;

                            for (var i = 0; i < Result_Ans1.length; i++) {
                                var checkboxId = Result_Ans1[i].id;
                                if (checkboxId != event.srcElement.id && $("#" + checkboxId).prop('checked').toString() == "true") {
                                    //MobileCRM.bridge.alert("Ticked Check Box found: Current Ans Id:" + event.srcElement.id + " checkboxId: " + checkboxId);
                                    allEmpty = false;
                                }
                            }
                            if (allEmpty) {
                                RouteQuestionRelatedAction(null, questionId);
                            }
                        }

                        if (enableScoreTracking && $("#scoreTrackingSwitch") != null && $("#scoreTrackingSwitch").is(':checked')) {
                            ShowTabScore();
                        }
                    }
                    else {
                        //MobileCRM.bridge.alert("event.srcElement.type: " + event.srcElement.type);
                        var selectedAnswer = $("#" + event.srcElement.id).prop('checked').toString();
                        var qControlId = event.srcElement.attributes["customid"] != null ? event.srcElement.attributes["customid"].value : null;
                        changeRelatedLookup(qControlId);
                        showLoadingMessage_Process("Checking actions");
                        //FilterLookupQuestion(qControlId, selectedAnswer);
                        RouteQuestionRelatedAction(selectedAnswer, qControlId);
                        checkAction(event.srcElement.type, qControlId, selectedAnswer, null);

                        if (enableScoreTracking && $("#scoreTrackingSwitch") != null && $("#scoreTrackingSwitch").is(':checked')) {
                            ShowTabScore();
                        }
                    }
                }
                else if (event.srcElement.type == "textarea") {
                    if (event.target.value.length < parseInt($(event.target).attr("min"))) {
                        MobileCRM.bridge.alert("Minimum character should be greater than the " + $(event.target).attr("min") + " characters");
                        $("#" + event.target.id).focus();
                        removePanels();
                        return;
                    }
                    $("#" + event.srcElement.id).removeClass('RedColor');
                    var qControlId = null;
                    qControlId = event.srcElement.id;
                    //MobileCRM.bridge.alert("QID : " + qControlId);

                    changeRelatedLookup(qControlId.toString().replace("list", ""));

                    //MobileCRM.bridge.alert("QID later : " + qControlId);
                    var selectedAnswer = event.srcElement.value;
                    if (selectedAnswer != "") {
                        showLoadingMessage_Process("Checking actions");
                        RouteQuestionRelatedAction(selectedAnswer, qControlId);
                        checkAction("text", qControlId, selectedAnswer, null);
                    } else {
                        showLoadingMessage_Process("Checking actions");
                        RouteQuestionRelatedAction(null, qControlId);
                    }
                }
                else if (event.srcElement.type == "text") {
                    $("#" + event.srcElement.id).removeClass('RedColor');
                    var qType = event.srcElement.attributes["customtype"] != null ? event.srcElement.attributes["customtype"].value : null;
                    var qControlId = null;
                    if (qType == "integer" || qType == "currency" || qType == "Decimal") {
                        qControlId = event.srcElement.attributes["customid"] != null ? event.srcElement.attributes["customid"].value : null;
                        if (qType == "integer") {
                            if (parseInt(event.target.value) < parseInt($(event.target).attr("min"))) {
                                MobileCRM.bridge.alert("Minimum value should be greater than the " + $(event.target).attr("min"));
                                $("#" + event.target.id).focus();
                                removePanels();
                                return;
                            }
                        }
                    }
                    else if (qType == "text") {
                        qControlId = event.srcElement.id;
                        //MobileCRM.bridge.alert("text qId : " + qControlId);
                        changeRelatedLookup(qControlId.toString().replace("TextAns", ""));
                        if (event.target.value.length < parseInt($(event.target).attr("min"))) {
                            MobileCRM.bridge.alert("Minimum character should be greater than the " + $(event.target).attr("min") + " characters");
                            $("#" + event.target.id).focus();
                            removePanels();
                            return;
                        }
                    }
                    else {
                        qControlId = event.srcElement.id;
                        //MobileCRM.bridge.alert("else qId : " + qControlId);
                        //changeRelatedLookup(qControlId);
                    }

                    var selectedAnswer = event.srcElement.value;
                    if (selectedAnswer != "" && selectedAnswer != "£" && selectedAnswer != "-£") {
                        showLoadingMessage_Process("Checking actions");
                        RouteQuestionRelatedAction(selectedAnswer, event.srcElement.id);
                        checkAction(qType, qControlId, selectedAnswer, null);
                    }
                }
            }

        }

        //following method route question related actions based on the answer and question
        function RouteQuestionRelatedAction(answer, controlId) {

            var qusRelatedAction = [];

            //MobileCRM.bridge.alert("Related Actions Length: " + QuestionRelatedActions.length + " answer: " + answer + " controlId: " + controlId);

            if (QuestionRelatedActions != null && QuestionRelatedActions.length > 0) {
                //Question related actions
                //Contains data
                //match question id
                var questionId = controlId.replace("MultipleAnswer", "").replace("Answer", "").replace("piclistctrl", "")
                    .replace("GraphicalList", "").replace("integer", "").replace("currency", "").replace("TextAns", "").replace("list", "").replace("Lookup", "").replace("datepicker", "").replace("Radio", "").replace("Decimal", "");

                if (answer != null && answer != "" && typeof answer != "undefined") {
                    //MobileCRM.bridge.alert("qId " + questionId + " : " + QuestionRelatedActions.length + " : " + QuestionRelatedActions[0].properties["ebecssvy_relatedquestion"].id + " : " + QuestionRelatedActions[0].properties["ebecssvy_actiontypesforquestion"] + " : " + QuestionRelatedActions[0].properties["ebecssvy_relatedentity"]);
                    try {
                        qusRelatedAction = $.grep(QuestionRelatedActions, function (arrayItem) {
                            return arrayItem.properties["ebecssvy_relatedquestion"].id == questionId && arrayItem.properties["ebecssvy_relatedentity"] == "213020000" && arrayItem.properties["ebecssvy_actiontypesforquestion"] == "213020000";
                        });

                        if (qusRelatedAction != null && typeof qusRelatedAction != "undeined" && qusRelatedAction.length > 0) {

                            //MobileCRM.bridge.alert("Question Related Actions found length: " + qusRelatedAction[0].properties["ebecssvy_actiontypesforquestion"]);

                            checkAction(null, controlId, answer, null, true);

                        } else {
                            removePanels();
                        }

                    } catch (error) {
                        MobileCRM.bridge.alert("Error occured: " + error);
                    }
                } else {

                    qusRelatedAction = $.grep(QuestionRelatedActions, function (arrayItem) {
                        return arrayItem.properties["ebecssvy_relatedquestion"].id == questionId && arrayItem.properties["ebecssvy_relatedentity"] == "213020000" && arrayItem.properties["ebecssvy_actiontypesforquestion"] == "213020001";
                    });

                    if (qusRelatedAction != null && typeof qusRelatedAction != "undeined" && qusRelatedAction.length > 0) {

                        //MobileCRM.bridge.alert("Question Related Actions found length: " + qusRelatedAction[0].properties["ebecssvy_actiontypesforquestion"]);

                        checkAction(null, controlId, null, null, true);

                    } else {
                        removePanels();
                    }
                }
            }
            else {
                removePanels();
            }
        }

        var showQuestionsList = null;
        var hideQuestionsList = null;
        var showTabList = null;
        var hideTabList = null;
        var makeRequiredList = null;
        var showSectionList = null;
        var hideSectionList = [];
        // Action will be action according to given answer

        function executeAction(_actionObject) {
            if (_actionObject != null) {
                showLoadingMessage_Process();
                var _actionType = _actionObject.actionType;
                var _controlId = _actionObject.ControlId;
                var _goToQuestionId = _actionObject.GoToQuestionId;
                var _goToQuestionName = _actionObject.GoToQuestionName;
                var _tabId = _actionObject.TabId;
                var _tabName = _actionObject.TabName;
                var _alertMessage = _actionObject.AlertMessage;
                var _customScript = _actionObject.CustomScript;
                var _CustomFilter = _actionObject.CustomFilter;
                var SectionId = _actionObject.Section;
                var goToQType = _actionObject.QType;
                var actionColor = _actionObject.actionColor != null && _actionObject.actionColor != "" && typeof _actionObject.actionColor != "undefined" ? _actionObject.actionColor : "red";
                
                //MobileCRM.bridge.alert('_actionObject.questionId: ' + _actionObject.questionId + '_actionType: ' + _actionType + " _controlId: " + _controlId);

                if (_actionType == 100000005) //Show Question X
                {
                    if (_goToQuestionId != null) {
                        if ($("#" + _goToQuestionId).length > 0) {
                            $($("#" + _goToQuestionId).parent()).css("display", "");
                        }
                        if (showQuestionsList.indexOf(_goToQuestionId) == -1)
                            showQuestionsList.push(_goToQuestionId);
                        if (hideQuestionsList.indexOf(_goToQuestionId) != -1)
                            hideQuestionsList.splice(hideQuestionsList.indexOf(_goToQuestionId), 1);
                    }
                    removePanels();
                }
                else if (_actionType == 100000004) //Hide Question Y
                {
                    if (_goToQuestionId != null) {
                        if ($("#" + _goToQuestionId).length > 0) {
                            $($("#" + _goToQuestionId).parent()).css("display", "none");
                        }
                        if (hideQuestionsList.indexOf(_goToQuestionId) == -1)
                            hideQuestionsList.push(_goToQuestionId);
                        if (showQuestionsList.indexOf(_goToQuestionId) != -1)
                            showQuestionsList.splice(showQuestionsList.indexOf(_goToQuestionId), 1);
                    }
                    removePanels();
                }
                else if (_actionType == 100000000) //Show Tab Y
                {
                    if (_tabId != undefined && _tabId != null) {
                        var tc = GetIndexofTabId(_tabId);
                        if (showTabList.indexOf(_tabId) == -1)
                            showTabList.push(_tabId);
                        if (hideTabList.indexOf(_tabId) != -1)
                            hideTabList.splice(hideTabList.indexOf(_tabId), 1);
                        //update the hidden tab to show
                        saveTraversedTabList(tc, 'true', 'false');
                    }
                }
                else if (_actionType == 100000001) //Hide Tab Y
                {
                    if (_tabId != undefined && _tabId != null) {
                        var tc = GetIndexofTabId(_tabId);
                        if (hideTabList.indexOf(_tabId) == -1)
                            hideTabList.push(_tabId);
                        if (showTabList.indexOf(_tabId) != -1)
                            showTabList.splice(showTabList.indexOf(_tabId), 1);
                        //save current tab as hidden, when next call on hidden tab
                        saveTraversedTabList(tc, 'false', 'false');
                        //MobileCRM.bridge.alert(' executeAction traversedTabList push: ' + tc);
                    }
                }
                else if (_actionType == 100000002) //Make Not Required Question X
                {
                    if (_goToQuestionId != null) {
                        if ($("#" + _goToQuestionId).length > 0) {
                            var questionTd = $("#" + _goToQuestionId + ".Question");
                            $(questionTd).attr("isRequired", false);
                            if ($(questionTd).children().length > 0)
                                $($(questionTd).children()[0]).removeClass('required');
                            if (makeRequiredList.indexOf(_goToQuestionId) != -1)
                                makeRequiredList.splice(makeRequiredList.indexOf(_goToQuestionId), 1);
                        }
                        else {
                            notRequiredQId = _goToQuestionId;
                            if (makeRequiredList.indexOf(_goToQuestionId) != -1)
                                makeRequiredList.splice(makeRequiredList.indexOf(_goToQuestionId), 1);
                        }
                    }
                    removePanels();
                }
                else if (_actionType == 213020001) //Make Required Question X
                {
                    if (_goToQuestionId != null) {
                        if ($("#" + _goToQuestionId).length > 0) {
                            var questionTd = $("#" + _goToQuestionId + ".Question");
                            $(questionTd).attr("isRequired", true);
                            if ($(questionTd).children().length > 0)
                                $($(questionTd).children()[0]).addClass('required');

                            makeRequiredList.push(_goToQuestionId);
                        }
                        else {
                            requredQId = _goToQuestionId;
                            makeRequiredList.push(_goToQuestionId);
                        }
                    }
                    removePanels();
                }
                else if (_actionType == 213020002) //Go To Question X
                {
                    if (_goToQuestionId != null) {
                        highlightQ = _goToQuestionId;
                        GoToQuestion(_goToQuestionId);
                    }
                }
                else if (_actionType == 213020003) //Stop Survey
                {
                    MobileCRM.UI.EntityForm.saveAndClose();
                    removePanels();
                }
                else if (_actionType == 100000006) //Set Answer Color red
                {
                    if (_controlId != null && _controlId != "" && typeof _controlId != "undefined") {
                        //MobileCRM.bridge.alert("_controlId red: " + _controlId);
                        if (_controlId.indexOf("Lookup") == 0 || _controlId.indexOf("GraphicalList") == 0) {
                            //MobileCRM.bridge.alert("Inside Kendo: ");
                            var combobox = $("#" + _controlId).data("kendoComboBox");
                            $($($(combobox.wrapper[0]).children())).css('background-color', actionColor);
                        }
                        else {
                            var inputControlId = GetAnswerInputIdByQuestionIdAttributeType(_actionObject.questionId);
                            //MobileCRM.bridge.alert('inputControlId : ' + inputControlId + " : " + _controlId);
                            if (inputControlId.indexOf("checkbox") != -1) {
                                //MobileCRM.bridge.alert('inputControlId : ' + $("#" + inputControlId).next().length + " : " + $("#" + inputControlId).length);
                                $("#" + inputControlId).parent().find('span').css('background-color', actionColor);
                            } else if ($("#" + _controlId).find('input') != undefined && $("#" + _controlId).find('input').attr('name') != undefined && $("#" + _controlId).find('input').attr('name').indexOf('radio') != -1) {
                                //MobileCRM.bridge.alert('inputControlId : ' + $("#" + inputControlId) + " : " + $("#" + inputControlId).length);
                                $("#" + _controlId).find('span').css('background-color', "rgb(255, 255, 255)");
                                var checkedAns = $("#" + inputControlId).find('input:checked');
                                //MobileCRM.bridge.alert('inputControlId : ' + $("#" + inputControlId) + " : " + $("#" + inputControlId).length);
                                checkedAns.next().css('background-color', actionColor);
                            } else {
                                //MobileCRM.bridge.alert('inputControlId : ' + inputControlId + " : " + _controlId);
                                $("#" + inputControlId).css('background-color', actionColor);
                            }
                        }
                    }
                    removePanels();
                }
                else if (_actionType == 213020012) //Set Answer Color black
                {
                    if (_controlId != null && _controlId != "" && typeof _controlId != "undefined") {
                        //MobileCRM.bridge.alert("_controlId black: " + _controlId);
                        //MobileCRM.bridge.alert("Inside If: ");
                        if (_controlId.indexOf("Lookup") == 0 || _controlId.indexOf("GraphicalList") == 0) {
                            //MobileCRM.bridge.alert("Inside Kendo: ");
                            var combobox = $("#" + _controlId).data("kendoComboBox");
                            $($($(combobox.wrapper[0]).children())).css('background-color', 'transparent');
                        }
                        else {

                            var inputControlId = GetAnswerInputIdByQuestionIdAttributeType(_actionObject.questionId);
                            //MobileCRM.bridge.alert('inputControlId black: ' + inputControlId);
                            if (_controlId.indexOf("checkbox") != -1) {
                                $("#" + inputControlId).removeClass('checkbox_red_border');
                            } else {
                                $("#" + inputControlId).css('background-color', 'transparent');
                                $("#" + inputControlId).removeClass('RedColor');
                            }
                        }
                    }
                    removePanels();
                }
                else if (_actionType == 100000003) //Alert
                {
                    MobileCRM.bridge.alert(_alertMessage);
                    removePanels();
                }
                else if (_actionType == 213020000) //Custom Script
                {
                    try {

                        var customScript = _customScript != null ? _customScript : null;

                        if (customScript != null) {
                            eval(customScript);
                        }
                    }
                    catch (ex) {
                        MobileCRM.bridge.alert("Error in executing custom script");
                    }
                    removePanels();
                }
                else if (_actionType == 213020004) //Custom Filter
                {
                    if (_CustomFilter != null) {
                        var oldCFIndex = findCustomFilterIndex(CustomFilterQuestionArray, _goToQuestionId);
                        if (oldCFIndex != -1) {
                            CustomFilterQuestionArray[oldCFIndex].cusotmFilter = _CustomFilter;
                        }
                        else {
                            var CustomFilterQObject = new Object();
                            CustomFilterQObject.cusotmFilter = _CustomFilter;
                            CustomFilterQObject.qId = _goToQuestionId;
                            CustomFilterQuestionArray.push(CustomFilterQObject);
                        }
                        ApplyCustomFilterAction(_goToQuestionId, _CustomFilter);
                    }
                }
                else if (_actionType == 213020005) //Hide Section
                {
                    //MobileCRM.bridge.alert("Hide sectionID : " + _actionObject.Section);
                    if (SectionId != null) {                        
                        if ($("#" + SectionId).length > 0) {
                            $("#" + SectionId).css("display", "none");
                            $("#" + SectionId).find('legend').css("display", "none");
                            //MobileCRM.bridge.alert("hideSectionList : " + hideSectionList.length);
                            var mainTrs = $("#" + SectionId).children();                            
                            $.each(mainTrs, function () {
                                $(this).css("display", "none");
                                if (this.firstElementChild != undefined && this.firstElementChild.id != undefined) {
                                    if (hideQuestionsList.indexOf(this.firstElementChild.id) == -1) {
                                        hideQuestionsList.push(this.firstElementChild.id);
                                        //MobileCRM.bridge.alert('hide section : ' + this.firstElementChild.id);
                                    }
                                    if (showQuestionsList.indexOf(this.firstElementChild.id) != -1)
                                        showQuestionsList.splice(showQuestionsList.indexOf(this.firstElementChild.id), 1);
                                }
                            });
                        } 

                        
                        var elementPos = hideSectionList.map(function (x) { return x.id; }).indexOf(SectionId);
                        if (elementPos == -1) {
                            //MobileCRM.bridge.alert("Hide sectionID : " + elementPos);
                            var sectionElement = new Object();
                            sectionElement.id = SectionId;
                            sectionElement.isClear = true;
                            hideSectionList.push(sectionElement);
                            //MobileCRM.bridge.alert('Section in to hide array : ' + SectionId);
                        }
                        if (showSectionList.indexOf(SectionId) != -1) {
                            showSectionList.splice(showSectionList.indexOf(SectionId), 1);
                            //MobileCRM.bridge.alert('Section out of show array : ' + SectionId);
                        }
                      
                    }
                    removePanels();
                }
                else if (_actionType == 213020006) //Show Section
                {
                    //MobileCRM.bridge.alert("show sectionID : " + _actionObject.Section);
                    if (SectionId != null) {                       
                        if ($("#" + SectionId).length > 0) {
                            $("#" + SectionId).css("display", "");
                            $("#" + SectionId).find('legend').css("display", "");
                            var mainTrs = $("#" + SectionId).children();                            

                            //MobileCRM.bridge.alert('show section 1 : ' + mainTrs.length);
                            $.each(mainTrs, function () {
                                
                                var showDefault = "";
                                //if ($(this).find('td') != null && $(this).find('td').length > 0 && $(this).find('td').length == 2 && $($(this).find('td')[0]).attr("isshowdefault") != null && $($(this).find('td')[0]).attr("isshowdefault") != undefined) {
                                //showDefault = $($(this).find('td')[0]).attr("isshowdefault");
                                //}
                                if (this.firstElementChild != undefined && this.firstElementChild != null && $(this.firstElementChild).attr("isshowdefault") != null && $(this.firstElementChild).attr("isshowdefault") != undefined) {
                                    showDefault = $(this.firstElementChild).attr("isshowdefault");
                                }
                                //need to adjust...................AAAA===========================================================================================================================================
                                //else if ($(this).find('table').length > 0 && $(this).find('table') != null && $($(this).find('table')).find('tr').length > 0 && $($(this).find('table')).find('tr') != null && $($($(this).find('table')).find('tr')[0]).find('td') != null && $($($(this).find('table')).find('tr')[0]).find('td').length > 0 && $($($($(this).find('table')).find('tr')[0]).find('td')[0]).attr("isshowdefault") != null && $($($($(this).find('table')).find('tr')[0]).find('td')[0]).attr("isshowdefault") != undefined)
                                //    showDefault = $($($($(this).find('table')).find('tr')[0]).find('td')[0]).attr("isshowdefault");
                                if (showDefault != "" && showDefault != "null" && showDefault == "true")
                                    $(this).css("display", "");

                                if (this.firstElementChild != undefined && this.firstElementChild.id != undefined) {
                                    //MobileCRM.bridge.alert('show section 2 : ' + this.firstElementChild + " : " + this.firstElementChild.id);
                                    if (showQuestionsList.indexOf(this.firstElementChild.id) == -1)
                                        showQuestionsList.push(this.firstElementChild.id);
                                    if (hideQuestionsList.indexOf(this.firstElementChild.id) != -1)
                                        hideQuestionsList.splice(hideQuestionsList.indexOf(this.firstElementChild.id), 1);
                                }

                            });                            
                        }
                        if (showSectionList.indexOf(SectionId) == -1) {
                            showSectionList.push(SectionId);
                            //MobileCRM.bridge.alert('Section in to show array : ' + SectionId);
                        }
                        var elementPos = hideSectionList.map(function (x) { return x.id; }).indexOf(SectionId);
                        if (elementPos != -1) {
                            //MobileCRM.bridge.alert("Hide sectionID show : " + elementPos);
                            hideSectionList.splice(elementPos, 1);
                            //MobileCRM.bridge.alert('Section in to hide array : ' + SectionId);
                        }
                        if (showQuestionsList.indexOf(SectionId) == -1)
                            showQuestionsList.push(SectionId);
                        if (hideQuestionsList.indexOf(SectionId) != -1)
                            hideQuestionsList.splice(hideQuestionsList.indexOf(SectionId), 1);
                    }
                    removePanels();
                }
                else if (_actionType == 213020007) //Make Section Mandatory
                {
                    if (SectionId != null) {
                        if ($("#" + SectionId).length > 0) {
                            var tableTrs = $($("#" + SectionId).children());
                            $.each(tableTrs, function () {
                                var questionTd = this.firstElementChild;
                                $(questionTd).attr("isRequired", true);
                                if ($(questionTd).children().length > 0)
                                    $($(questionTd).children()[0]).addClass('required');
                            });


                            makeRequiredList.push(SectionId);
                        }
                        else {
                            makeRequiredList.push(SectionId);
                        }
                    }
                    removePanels();
                }
                else if (_actionType == 213020008) //Make section not Mandatory
                {
                    if (SectionId != null) {
                        if ($("#" + SectionId).length > 0) {
                            var tableTrs = $($("#" + SectionId).children());
                            $.each(tableTrs, function () {
                                var questionTd = this.firstElementChild;
                                $(questionTd).attr("isRequired", false);
                                if ($(questionTd).children().length > 0)
                                    $($(questionTd).children()[0]).removeClass('required');
                                if (makeRequiredList.indexOf(SectionId) != -1)
                                    makeRequiredList.splice(makeRequiredList.indexOf(SectionId), 1);
                            });
                        }
                        else {
                            if (makeRequiredList.indexOf(SectionId) != -1)
                                makeRequiredList.splice(makeRequiredList.indexOf(SectionId), 1);
                        }
                    }
                    removePanels();
                }
                else if (_actionType == 213020010) {//clear and hide section
                    if (SectionId != null) {                        
                        
                        if ($("#" + SectionId).length > 0) {
                            $("#" + SectionId).css("display", "none");
                            $("#" + SectionId).find('legend').css("display", "none");
                            var mainTrs = $("#" + SectionId).children();
                            $.each(mainTrs, function () {
                                var _goToQuestionId = this.firstElementChild;
                                if ($(_goToQuestionId).children().length > 0) {
                                    clearQuestions(this.firstElementChild.id, goToQType, true);// last parameter will be sent as true for clear and hide section only
                                }
                                $(this).css("display", "none");
                                if (this.firstElementChild != undefined && this.firstElementChild.id != undefined) {
                                    if (hideQuestionsList.indexOf(this.firstElementChild.id) == -1)
                                        hideQuestionsList.push(this.firstElementChild.id);
                                    if (showQuestionsList.indexOf(this.firstElementChild.id) != -1)
                                        showQuestionsList.splice(showQuestionsList.indexOf(this.firstElementChild.id), 1);
                                }
                                //if (hideQuestionsList.indexOf($(this).find('td.Question')[0].id) == -1)
                                //    hideQuestionsList.push($(this).find('td.Question')[0].id);
                                //if (showQuestionsList.indexOf($(this).find('td.Question')[0].id) != -1)
                                //    showQuestionsList.splice(showQuestionsList.indexOf($(this).find('td.Question')[0].id), 1);
                            });
                        }
                        var elementPos = hideSectionList.map(function (x) { return x.id; }).indexOf(SectionId);
                        if (elementPos == -1) {
                            var sectionElement = new Object();
                            sectionElement.id = SectionId;
                            sectionElement.isClear = true;
                            hideSectionList.push(sectionElement);
                            //MobileCRM.bridge.alert('Section in to hide array : ' + SectionId);
                        }
                        if (showSectionList.indexOf(SectionId) != -1) {
                            showSectionList.splice(showSectionList.indexOf(SectionId), 1);
                            //MobileCRM.bridge.alert('Section out of show array : ' + SectionId);
                        }
                    }
                    // removePanels();
                }
                else if (_actionType == 213020009) //Clear and Hide Question
                {
                    if (_goToQuestionId != null) {
                        //Hiding question
                        if ($("#" + _goToQuestionId).length > 0) {
                            $($("#" + _goToQuestionId).parent()).css("display", "none");
                        }
                        if (hideQuestionsList.indexOf(_goToQuestionId) == -1)
                            hideQuestionsList.push(_goToQuestionId);
                        if (showQuestionsList.indexOf(_goToQuestionId) != -1)
                            showQuestionsList.splice(showQuestionsList.indexOf(_goToQuestionId), 1);
                    }
                    // Clearing data in controls
                    if (goToQType == QuestionTypes.GraphicalList || goToQType == QuestionTypes.Lookup) {

                        if (goToQType == QuestionTypes.Lookup) {
                            var combobox = $("#Lookup" + _goToQuestionId).data("kendoComboBox");
                            if (combobox != null) {
                                combobox.value("");
                                $($($(combobox.wrapper[0]).children("span"))).children("div#CBI").css("display", "none");
                                $($($(combobox.wrapper[0]).children("span"))).children("input").css({ "padding-right": "0px" });
                            }

                            clearLPAnswer(_goToQuestionId);
                        }
                        else if (goToQType == QuestionTypes.GraphicalList) {
                            var combobox = $("#GraphicalList" + _goToQuestionId).data("kendoComboBox");
                            if (combobox != null) {
                                combobox.value("");
                            }
                            clearGLAnswer("GraphicalList" + _goToQuestionId);
                        }
                    }
                    else if (goToQType == QuestionTypes.DateTime) {//Date/Time
                        var datetimepicker = $("#datepicker" + _goToQuestionId).data("kendoDateTimePicker");
                        datetimepicker.value(null);
                    }
                    else if (goToQType == QuestionTypes.List) {//Picklist
                        $("#piclistctrl" + _goToQuestionId).prop('selectedIndex', 0);
                    }
                    else if (goToQType == QuestionTypes.Text || goToQType == QuestionTypes.Integer || goToQType == QuestionTypes.MultiLineText || goToQType == QuestionTypes.Currency) {
                        if (goToQType == QuestionTypes.Text)//Text
                            $("#TextAns" + _goToQuestionId).val("");
                        else if (goToQType == QuestionTypes.Integer)//Whole Number
                            $("#integer" + _goToQuestionId).val("");
                        else if (goToQType == QuestionTypes.MultiLineText)//Multilinetext
                            $("#list" + _goToQuestionId).val("");
                        else if (goToQType == QuestionTypes.Currency)//Currency
                            $("#currency" + _goToQuestionId).val("");
                    }
                    else if (goToQType == QuestionTypes.CheckBox) {//Checkbox
                        $("#checkbox" + _goToQuestionId).prop('checked', false);
                    }
                    else if (goToQType == QuestionTypes.TrueFalse) {//Bool
                        $('[name=radio' + _goToQuestionId + ']').removeAttr("checked");
                    }
                    else if (goToQType == QuestionTypes.MultiCheckBox) {//MultiCheckBox
                        var inputControls = $("#MultipleAnswer" + _goToQuestionId).find("input:checked");
                        $.each(inputControls, function () {
                            $(this).prop('checked', false);

                        });
                    }
                    removePanels();
                    UpdateResponseForClearAction(_goToQuestionId, false);

                }
            }
            removePanels();
        }

        function GetAnswerInputIdByQuestionIdAttributeType(questionId) {
            var controlId = "";

            var currentQuestion = $.grep(QuestionsArray, function (item) {
                return item.properties["ebecssvy_questionsid"] == questionId;
            });

            if (currentQuestion != null && typeof currentQuestion != "undefined" && currentQuestion.length > 0) {

                var attributeType = currentQuestion[0].properties["ebecssvy_attributetype"];
                //MobileCRM.bridge.alert("attributeType: " + attributeType);

                if (attributeType != "" && attributeType != null && typeof attributeType != "undefined") {
                    switch (attributeType.toString()) {
                        case QuestionTypes.Text.toString():
                            controlId = "TextAns" + questionId;
                            break;
                        case QuestionTypes.Decimal.toString():
                            controlId = "Decimal" + questionId;
                            break;
                        case QuestionTypes.Integer.toString():
                            controlId = "integer" + questionId;
                            break;
                        case QuestionTypes.Currency.toString():
                            controlId = "currency" + questionId;
                            break;
                        case QuestionTypes.DateTime.toString():
                            controlId = "datepicker" + questionId;
                            break;
                        case QuestionTypes.TrueFalse.toString():
                            controlId = "Answer" + questionId;
                            break;
                        case QuestionTypes.List.toString():
                            controlId = "piclistctrl" + questionId;
                            break;
                        case QuestionTypes.CheckBox.toString():
                            controlId = "checkbox" + questionId;
                            break;
                    }
                }
            }
            return controlId;
        }

        function clearQuestions(_goToQuestionId, goToQType, isClearAndHideSection) {

            var fetchXml = "<fetch version='1.0' output-format='xml-platform' mapping='logical' distinct='false' resultformat='DynamicEntities'>" +
                "<entity name='ebecssvy_questions'>" +
                "<attribute name='ebecssvy_questionsid' />" +
                "<attribute name='ebecssvy_name' />" +
                "<attribute name='ebecssvy_attributetype' />" +
                "<order attribute='ebecssvy_name' descending='false' />" +
                "<filter type='and'>" +
                "<condition attribute='ebecssvy_questionsid' operator='eq' value='" + _goToQuestionId + "' />" +
                "</filter>" +
                "</entity>" +
                "</fetch>";
            MobileCRM.FetchXml.Fetch.executeFromXML(fetchXml, function (data) {
                if (data.length > 0) {
                    goToQType = data[0].properties["ebecssvy_attributetype"] != null ? data[0].properties["ebecssvy_attributetype"] : null;
                    if (goToQType != null) {

                        if (goToQType == QuestionTypes.GraphicalList || goToQType == QuestionTypes.Lookup) {

                            if (goToQType == QuestionTypes.Lookup) {
                                var combobox = $("#Lookup" + _goToQuestionId).data("kendoComboBox");
                                if (combobox != null) {
                                    combobox.value("");
                                    $($($(combobox.wrapper[0]).children("span"))).children("div#CBI").css("display", "none");
                                    $($($(combobox.wrapper[0]).children("span"))).children("input").css({ "padding-right": "0px" });
                                }

                                clearLPAnswer(_goToQuestionId);
                            }
                            else if (goToQType == QuestionTypes.GraphicalList) {
                                var combobox = $("#GraphicalList" + _goToQuestionId).data("kendoComboBox");
                                if (combobox != null) {
                                    combobox.value("");
                                }
                                clearGLAnswer("GraphicalList" + _goToQuestionId);
                            }
                        }
                        else if (goToQType == QuestionTypes.DateTime) {//Date/Time
                            var datetimepicker = $("#datepicker" + _goToQuestionId).data("kendoDateTimePicker");
                            datetimepicker.value(null);
                        }
                        else if (goToQType == QuestionTypes.List) {//Picklist
                            $("#piclistctrl" + _goToQuestionId).prop('selectedIndex', 0);
                        }
                        else if (goToQType == QuestionTypes.Text || goToQType == QuestionTypes.Integer || goToQType == QuestionTypes.MultiLineText || goToQType == QuestionTypes.Currency) {
                            if (goToQType == QuestionTypes.Text)//Text
                                $("#TextAns" + _goToQuestionId).val("");
                            else if (goToQType == QuestionTypes.Integer)//Whole Number
                                $("#integer" + _goToQuestionId).val("");
                            else if (goToQType == QuestionTypes.MultiLineText)//Multilinetext
                                $("#list" + _goToQuestionId).val("");
                            else if (goToQType == QuestionTypes.Currency)//Currency
                                $("#currency" + _goToQuestionId).val("");
                        }
                        else if (goToQType == QuestionTypes.CheckBox) {//Checkbox
                            $("#checkbox" + _goToQuestionId).prop('checked', false);
                        }
                        else if (goToQType == QuestionTypes.TrueFalse) {//Bool
                            $('[name=radio' + _goToQuestionId + ']').removeAttr("checked");
                        }
                        else if (goToQType == QuestionTypes.MultiCheckBox) {//MultiCheckBox
                            var inputControls = $("#MultipleAnswer" + _goToQuestionId).find("input:checked");
                            $.each(inputControls, function () {
                                $(this).prop('checked', false);

                            });

                        }
                        UpdateResponseForClearAction(_goToQuestionId, isClearAndHideSection);
                    }
                }

            }, function (error) {
                if (typeof alert != "undefined") {
                    MobileCRM.bridge.alert(" executeAction Error : " + error);
                    removePanels();
                }
            }, null);

        }

        function clearGLAnswer(questionID) {
            var found = "false";
            var _LookupDataIndex = findGLIndex(GLArray, questionID);
            if (_LookupDataIndex != -1) {
                GLArray[_LookupDataIndex].GLAnswer = "";
                GLArray[_LookupDataIndex].GLAnswerId = "";
                found = "true";
            }
            if (found == "false") {
                var GLObject = new Object();
                GLObject.Qid = questionID;

                GLObject.GLAnswer = "";
                GLObject.GLAnswerId = "";

                GLArray.push(GLObject);
            }
        }

        function clearLPAnswer(questionID) {
            var found = "false";
            var _LookupDataIndex = findLookupIndex(LookupArray, questionID);
            if (_LookupDataIndex != -1) {
                LookupArray[_LookupDataIndex].GLAnswer = "";
                LookupArray[_LookupDataIndex].GLAnswerId = "";
                found = "true";
            }
            if (found == "false") {
                var GLObject = new Object();
                GLObject.Qid = questionID;

                GLObject.GLAnswer = "";
                GLObject.GLAnswerId = "";

                LookupArray.push(GLObject);
            }
        }

        function removePanels() {
            if ($('#divLoadingPanel').length > 0)
                $('#divLoadingPanel').remove();
            if ($('#loadingImg').length > 0)
                $('#loadingImg').remove();
        }

        function findActionsIndex(arr, obj) {
            var elementPos = arr.map(function (x) { return x.properties["ebecssvy_answersid"]; }).indexOf(obj);
            return elementPos;
        }

        var globalIsSaved = "false";

        // Actions will be perform based on action type selected in the question
        function performActions() {
            _actions = actionsCollection;
            IsPerfromAction = "false";
            if (_actions != null && _actions.length > 0) {
                for (var Actionsindex in _actions) {
                    var _actionType = _actions[Actionsindex].actionType;

                    if (_actionType != 213020011) {
                        executeAction(_actions[Actionsindex]);
                    }
                }
            }
        }

        // Evalutes answers provided the user and if answers  found appropriate action will be loaded to an array object.
        function checkAction(_answerId, _controlId, answer, selectedRecordId, questionRelatedAction) {
            // MobileCRM.bridge.enableDebug();
            //debugger;
            //MobileCRM.bridge.alert('Check Action Parameters: _answerId: ' + _answerId + " _controlId: " + _controlId + " answer: " + answer + " selectedRecordId: " + selectedRecordId + " questionRelatedAction: " + questionRelatedAction);
            var individualAction = false;
            var isAnswerFound = false;// Using while retriving fetch to know whether records are found otherthan '*' answer or not
            IsPerfromAction = "false";
            var _saveResponses = "false";
            var _actionFetch = '<fetch version="1.0" output-format="xml-platform" mapping="logical" distinct="true" resultformat="DynamicEntities">' +
                '<entity name="ebecssvy_actions">' +
                '<attribute name="ebecssvy_actionsid" />' +
                '<attribute name="ebecssvy_name" />' +
                '<attribute name="createdon" />' +
                '<attribute name="ebecssvy_gotonextquestion" />' +
                '<attribute name="ebecssvy_tab" />' +
                '<attribute name="ebecssvy_actions" />' +
                '<attribute name="ebecssvy_customfiltercondition" />' +
                '<attribute name="ebecssvy_customscript" />' +
                '<attribute name="ebecssvy_surveysection" />' +
                '<attribute name="ebecssvy_alertmessage" />' +
                '<attribute name="ebecssvy_answercolor" />' +
                '<order attribute="ebecssvy_name" descending="false" />';

            if (questionRelatedAction != null && typeof questionRelatedAction != "undefined" && questionRelatedAction) {
                var controlID = "";
                controlID = _controlId.replace("MultipleAnswer", "").replace("Answer", "").replace("piclistctrl", "")
                    .replace("GraphicalList", "").replace("integer", "").replace("currency", "").replace("TextAns", "").replace("list", "").replace("Lookup", "")
                    .replace("datepicker", "").replace("Radio", "").replace("Decimal", "").replace("signature", "");

                if (answer != null && answer != "") {
                    _actionFetch += '<filter type="and">' +
                        '<condition attribute="ebecssvy_relatedquestion" operator="eq" uitype="ebecssvy_questions" value="' + controlID + '" />' +
                        '<condition attribute="ebecssvy_relatedentity" operator="eq" value="213020000" />' +
                        '<condition attribute="ebecssvy_actiontypesforquestion" operator="eq"  value="213020000" />' +
                        '</filter>';
                } else {
                    _actionFetch += '<filter type="and">' +
                        '<condition attribute="ebecssvy_relatedquestion" operator="eq" uitype="ebecssvy_questions" value="' + controlID + '" />' +
                        '<condition attribute="ebecssvy_relatedentity" operator="eq" value="213020000" />' +
                        '<condition attribute="ebecssvy_actiontypesforquestion" operator="eq" value="213020001" />' +
                        '</filter>';
                }
            }
            else if (_answerId != null && (_answerId == "text" || _answerId == "checkbox" || _answerId == "date" || _answerId == "lookup")) {
                var controlID = "";
                controlID = _controlId.replace("TextAns", "").replace("datepicker", "").replace("list", "").replace("Lookup", "");
                answer = answer.replace(/[&]/g, "&amp;");
                answer = answer.replace(/[<]/g, "&lt;");
                answer = answer.replace(/["]/g, "&quot;");
                if (_controlId != null || _controlId != "" && _controlId != undefined) {

                    _actionFetch += '<link-entity name="ebecssvy_answers" from="ebecssvy_answersid" to="ebecssvy_surveyanswerid" alias="Answers" >' +
                        '<attribute name="ebecssvy_name" />' +
                        '<filter type="and">' +
                        '<filter type="or">' +
                        '<filter type="and">' +
                        '<condition attribute="ebecssvy_questionsid" operator="eq"  uitype="ebecssvy_questions" value="' + controlID + '" />' +
                        '<condition attribute="ebecssvy_name" operator="eq" value="*" />' +
                        '</filter>' +
                        '<filter type="and">' +
                        '<condition attribute="ebecssvy_name" operator="eq" value= "' + answer + '"/>' +
                        '<condition attribute="ebecssvy_questionsid" operator="eq"  uitype="ebecssvy_questions" value="' + controlID + '" />' +
                        '</filter>' +
                        '</filter>' +
                        '</filter>' +
                        '<link-entity name="ebecssvy_questions" from="ebecssvy_questionsid" to="ebecssvy_questionsid" alias="AnsQues">' +
                        '<attribute name="ebecssvy_attributetype" />' +
                        '<filter type="and">' +
                        '<condition attribute="ebecssvy_tabsid" operator="eq" uitype="ebecssvy_tabs" value="' + Result_Tabs[j].id + '" />' +
                        '</filter>' +
                        '</link-entity>' +
                        '</link-entity>';

                }
                else {
                    _actionFetch += '<link-entity name="ebecssvy_answers" from="ebecssvy_answersid" to="ebecssvy_surveyanswerid" alias="Answers" >' +
                        '<attribute name="ebecssvy_name" />' +
                        '<filter type="or">' +
                        '<condition attribute="ebecssvy_name" operator="eq" value="' + answer + '" />' +
                        '<condition attribute="ebecssvy_name" operator="eq" value="*" />' +
                        '</filter>' +
                        '<link-entity name="ebecssvy_questions" from="ebecssvy_questionsid" to="ebecssvy_questionsid" alias="AnsQues">' +
                        '<attribute name="ebecssvy_attributetype" />' +
                        '<filter type="and">' +
                        '<condition attribute="ebecssvy_tabsid" operator="eq" uitype="ebecssvy_tabs" value="' + Result_Tabs[j].id + '" />' +
                        ' </filter>' +
                        '</link-entity>' +
                        '</link-entity>';
                }
            }
            else if (_answerId != null && (_answerId == "integer" || _answerId == "currency" || _answerId == "Decimal")) {
                var controlID = "";
                controlID = _controlId.replace("integer", "").replace("currency", "").replace("Decimal", "");

                _actionFetch += '<link-entity name="ebecssvy_answers" from="ebecssvy_answersid" to="ebecssvy_surveyanswerid" alias="Answers" >' +
                    '<attribute name="ebecssvy_min" />' +
                    '<attribute name="ebecssvy_max" />' +
                    '<attribute name="ebecssvy_name" />' +
                    '<filter type="and">' +
                    '<condition attribute="ebecssvy_questionsid" operator="eq"  uitype="ebecssvy_questions" value="' + controlID + '" />' +
                    '</filter>' +
                    '<link-entity name="ebecssvy_questions" from="ebecssvy_questionsid" to="ebecssvy_questionsid" alias="AnsQues">' +
                    '<attribute name="ebecssvy_attributetype" />' +
                    '<attribute name="ebecssvy_currency" />' +
                    '<filter type="and">' +
                    '<condition attribute="ebecssvy_tabsid" operator="eq" uitype="ebecssvy_tabs" value="' + Result_Tabs[j].id + '" />' +
                    '</filter>' +
                    '</link-entity>' +
                    '</link-entity>';
            }
            else {
                individualAction = true;

                if ((questionRelatedAction == null || typeof questionRelatedAction == "undefined" || !questionRelatedAction) && (_controlId != null || _controlId != "" && _controlId != undefined)) {

                    controlID = _controlId.replace("piclistctrl", "").replace("GraphicalList", "").replace("MultipleAnswer", "").replace("Answer", "");

                    _actionFetch += '<link-entity name="ebecssvy_answers" from="ebecssvy_answersid" to="ebecssvy_surveyanswerid" alias="Answers" >' +
                        '<attribute name="ebecssvy_name" />' +
                        '<filter type="and">' +
                        '<filter type="or">' +
                        '<filter type="and">' +
                        '<condition attribute="ebecssvy_questionsid" operator="eq"  uitype="ebecssvy_questions" value="' + controlID + '" />' +
                        '<condition attribute="ebecssvy_name" operator="eq" value="*" />' +
                        '</filter>' +
                        '<filter type="and">' +
                        '<condition attribute="ebecssvy_answersid" operator="eq" value="' + _answerId + '" />' +
                        '</filter>' +
                        '</filter>' +
                        '</filter>' +
                        '</link-entity>';

                }
                else {
                    _actionFetch += '<filter type="and">' +
                        '<condition attribute="ebecssvy_surveyanswerid" operator="eq" uitype="ebecssvy_answers" value="' + _answerId + '" />' +
                        '</filter>';
                }
            }

            _actionFetch += '<link-entity name="ebecssvy_questions" from="ebecssvy_questionsid" to="ebecssvy_gotonextquestion" alias="aa" visible="false" link-type="outer">' +
                '<attribute name="ebecssvy_attributetype" />' +
                '<link-entity name="ebecssvy_tabs" from="ebecssvy_tabsid" to="ebecssvy_tabsid" alias="ab" visible="false" link-type="outer">' +
                '<attribute name="ebecssvy_order" />' +
                '</link-entity>' +
                '</link-entity>' +
                '</entity>' +
                '</fetch>';

            if (_answerId == "integer" || _answerId == "currency" || _answerId == "checkbox") {
                _controlId = _answerId + _controlId;
            }

            //MobileCRM.bridge.alert('Fetch XML ' + _actionFetch);

            MobileCRM.FetchXml.Fetch.executeFromXML(_actionFetch, function (data) {
                //MobileCRM.bridge.alert('Fetch Data ' + data.length);
                isAnswerFound = false;
                if (data != null && data.length > 0) {

                    IsPerfromAction = "false";
                    var isStarActionFound = false;
                    var isCurrencyInRange = false;
                    actionsCollection = new Array();
                    for (var Actionsindex in data) {
                        var tempAnswer = "";
                        if (!isAnswerFound)// this is variable is used when question deos not contain * answer
                            isAnswerFound = data[Actionsindex].properties["Answers.ebecssvy_name"] != null && data[Actionsindex].properties["Answers.ebecssvy_name"] != undefined ? (data[Actionsindex].properties["Answers.ebecssvy_name"] != "*" ? true : false) : false;
                        isStarActionFound = data[Actionsindex].properties["Answers.ebecssvy_name"] != null && data[Actionsindex].properties["Answers.ebecssvy_name"] != undefined ? (data[Actionsindex].properties["Answers.ebecssvy_name"] == "*" ? true : false) : false;
                        var _actionType = data[Actionsindex].properties["ebecssvy_actions"];
                        var _goToQuestionId = data[Actionsindex].properties["ebecssvy_gotonextquestion"] != null ? data[Actionsindex].properties["ebecssvy_gotonextquestion"].id : null;
                        var _goToQuestionName = data[Actionsindex].properties["ebecssvy_gotonextquestion"] != null ? data[Actionsindex].properties["ebecssvy_gotonextquestion"].primaryName : null;
                        var _goToTabName = data[Actionsindex].properties["ebecssvy_tab"] != null ? data[Actionsindex].properties["ebecssvy_tab"].primaryName : null;
                        var _goToTabId = data[Actionsindex].properties["ebecssvy_tab"] != null ? data[Actionsindex].properties["ebecssvy_tab"].id : null;
                        var _alertMessage = data[Actionsindex].properties["ebecssvy_alertmessage"] != null ? data[Actionsindex].properties["ebecssvy_alertmessage"] : null;
                        var _customScript = data[Actionsindex].properties["ebecssvy_customscript"] != null ? data[Actionsindex].properties["ebecssvy_customscript"] : null;
                        var _customFilter = data[Actionsindex].properties["ebecssvy_customfiltercondition"] != null ? data[Actionsindex].properties["ebecssvy_customfiltercondition"] : null;
                        var _sectionId = data[Actionsindex].properties["ebecssvy_surveysection"] != null ? data[Actionsindex].properties["ebecssvy_surveysection"].id : null;
                        var _goToQType = data[Actionsindex].properties["aa.ebecssvy_attributetype"] != null ? data[Actionsindex].properties["aa.ebecssvy_attributetype"] : (data[Actionsindex].properties["AnsQues.ebecssvy_attributetype"] != null ? data[Actionsindex].properties["AnsQues.ebecssvy_attributetype"] : null);// data[Actionsindex].properties["aa.ebecssvy_attributetype"] != null ? data[Actionsindex].properties["aa.ebecssvy_attributetype"] : null;
                        var questionId = _controlId.replace(new RegExp("MultipleAnswer", 'g'), "").replace(new RegExp("Answer", 'g'), "").replace(new RegExp("piclistctrl", 'g'), "")
                            .replace(new RegExp("GraphicalList", 'g'), "").replace(new RegExp("integer", 'g'), "").replace(new RegExp("checkbox", 'g'), "")
                            .replace(new RegExp("currency", 'g'), "").replace(new RegExp("TextAns", 'g'), "").replace(new RegExp("list", 'g'), "")
                            .replace(new RegExp("Lookup", 'g'), "").replace(new RegExp("datepicker", 'g'), "").replace(new RegExp("Radio", 'g'), "").replace(new RegExp("Decimal", 'g'), "").replace(new RegExp("Signature", 'g'), "");
                        var actionColor = data[Actionsindex].properties["ebecssvy_answercolor"] != null ? data[Actionsindex].properties["ebecssvy_answercolor"] : null;

                        //MobileCRM.bridge.alert('actionId: ' + data[Actionsindex].properties["ebecssvy_actionsid"]);

                        var _actionObject = new Object();
                        var symbol = "";
                        _actionObject.actionType = _actionType;
                        _actionObject.GoToQuestionId = _goToQuestionId;
                        _actionObject.GoToQuestionName = _goToQuestionName;
                        _actionObject.ControlId = _controlId;
                        _actionObject.TabId = _goToTabId;
                        _actionObject.TabName = _goToTabName;
                        _actionObject.AlertMessage = _alertMessage;
                        _actionObject.CustomScript = _customScript;
                        _actionObject.CustomFilter = _customFilter;
                        _actionObject.Section = _sectionId;
                        _actionObject.QType = _goToQType;
                        _actionObject.selectedRecordId = selectedRecordId;
                        _actionObject.recordName = answer;
                        _actionObject.questionId = questionId;
                        _actionObject.actionColor = actionColor;
                        tempAnswer = answer;
                        // we can remove this condition by using crm filters ge and le
                        if (_answerId != null && (_answerId == "integer" || _answerId == "currency" || _answerId == "Decimal")) {
                            var _min = data[Actionsindex].properties["Answers.ebecssvy_min"] != null ? data[Actionsindex].properties["Answers.ebecssvy_min"] : null;
                            var _max = data[Actionsindex].properties["Answers.ebecssvy_max"] != null ? data[Actionsindex].properties["Answers.ebecssvy_max"] : null;
                            tempAnswer = tempAnswer.replace("£", "");

                            while (tempAnswer.indexOf(ThousandSeperator) > 0) {
                                tempAnswer = tempAnswer.replace(ThousandSeperator, "");
                            }

                            if (_min != null && _min != "") {
                                while (_min.toString().indexOf(ThousandSeperator) > 0) {
                                    _min = _min.toString().replace(ThousandSeperator, "");
                                }
                            }

                            if (_max != null && _max != "") {
                                while (_max.toString().indexOf(ThousandSeperator) > 0) {
                                    _max = _max.toString().replace(ThousandSeperator, "");
                                }
                            }

                            if (DecimalSeperator != ".") {
                                tempAnswer = tempAnswer.replace(DecimalSeperator, ".");
                                if (_min != null && _min != "") {
                                    _min = _min.toString().replace(DecimalSeperator, ".");
                                }
                                if (_max != null && _max != "") {
                                    _max = _max.toString().replace(DecimalSeperator, ".");
                                }
                            }

                            if (_answerId == "currency") {
                                symbol = data[Actionsindex].properties["AnsQues.ebecssvy_currency"] != null ? data[Actionsindex].properties["AnsQues.ebecssvy_currency"] : null; //replace symbol with currency
                            }

                            if (symbol != null && symbol != "" && typeof symbol != "undefined") {
                                symbol = symbol.substring(symbol.lastIndexOf("(") + 1, symbol.lastIndexOf(")"));
                                tempAnswer = tempAnswer.replace(symbol, "");
                            }

                            var _isMinSatisfy = "false";
                            var _isMaxSatisfy = "false";
                            if (_min != null) {
                                if (!isNaN(_min)) {
                                    if (Number(tempAnswer) >= Number(_min)) {
                                        _isMinSatisfy = "true";
                                    }
                                }
                            }
                            else {
                                _isMinSatisfy = "true";
                            }
                            if (_max != null) {
                                if (!isNaN(_max)) {
                                    if (Number(tempAnswer) <= Number(_max)) {
                                        _isMaxSatisfy = "true";
                                    }
                                }
                            }
                            else {
                                _isMaxSatisfy = "true";
                            }

                            //MobileCRM.bridge.alert('answer: ' + tempAnswer + " min:" + _min + " max: " + _max + " _isMinSatisfy: " + _isMinSatisfy + " _isMaxSatisfy" + _isMaxSatisfy);
                            if ((_min != null || _max != null) && (_isMinSatisfy == "true" && _isMaxSatisfy == "true")) {
                                IsPerfromAction = "true";
                                if (!isCurrencyInRange) isCurrencyInRange = true;
                                actionsCollection.push(_actionObject);
                            }
                            if (isStarActionFound) {
                                IsPerfromAction = "true";
                                actionsCollection.push(_actionObject);
                            }
                        }
                        else {
                            IsPerfromAction = "true";
                            actionsCollection.push(_actionObject);
                        }

                        if (_actionType == 213020002) {//Go To Question X
                            var _tabOrder = data[Actionsindex].properties["ab.ebecssvy_order"] != null ? data[Actionsindex].properties["ab.ebecssvy_order"] : null;
                            if (_tabOrder > 0)
                                _tabOrder = _tabOrder - 1;
                            if (_tabOrder == j)
                                _saveResponses = "false";
                            else
                                _saveResponses = "true";
                        }
                        else if (_actionType == 213020003) {//Stop Survey
                            _saveResponses = "true";
                        }
                    }
                    if (_answerId != null && _answerId != "undefined" && (((_answerId == "integer" || _answerId == "currency" || _answerId == "Decimal") && IsPerfromAction == "true") || (_answerId != "integer" && _answerId != "currency" && _answerId != "Decimal"))) {
                        if (_saveResponses == "true") {
                            CheckResponse_Save(SurveyId, false);
                        }
                        else {
                            if ((_answerId == "currency" || _answerId == "integer" || _answerId == "Decimal") && isCurrencyInRange) {
                                //MobileCRM.bridge.alert("action path 2: " + questionId);
                                performActions();
                            }
                            else if (_answerId != "currency" && _answerId != "integer" && _answerId != "Decimal" && isAnswerFound) {
                                //MobileCRM.bridge.alert("action path 3: " + questionId);
                                performActions();
                            }
                            else if (individualAction) {
                                //MobileCRM.bridge.alert("action path 4: " + questionId);
                                performActions();

                            }
                        }
                    }
                    else if (questionRelatedAction != null && questionRelatedAction != "undefined" && questionRelatedAction) {
                        performActions();
                    }

                    removePanels();
                }
                else {
                    removePanels();
                }
            }, function (error) {
                if (typeof alert != "undefined") {
                    MobileCRM.bridge.alert(" executeAction Error : " + error);
                    removePanels();
                }
            }, null);
        }

        // set cursor point to the specified tab
        function GoToTab(_tabId) {
            showLoadingMessage_Process();
            var _goToTabFetch = "<fetch version='1.0' resultformat='DynamicEntities' output-format='xml-platform' mapping='logical' distinct='true'>" +
                "<entity name='ebecssvy_tabs'>" +
                "<attribute name='ebecssvy_tabsid' />" +
                "<attribute name='ebecssvy_name' />" +
                "<attribute name='createdon' />" +
                "<attribute name='ebecssvy_order' />" +
                "<order attribute='ebecssvy_name' descending='false' />" +
                "<filter type='and'>" +
                "<condition attribute='ebecssvy_tabsid' operator='eq' uitype='ebecssvy_tabs' value='" + _tabId + "' />" +
                "</filter>" +
                "</entity>" +
                "</fetch>";


            MobileCRM.FetchXml.Fetch.executeFromXML(_goToTabFetch, function (data) {
                if (data != null && data.length > 0) {
                    var _tabIndex = data[0].properties["ebecssvy_order"];
                    if (_tabIndex > 0)
                        _tabIndex = _tabIndex - 1;
                    if (_tabIndex > j) {//Move Forward
                        $("#QAConatiner").empty();
                        $("#imgServey").css("display", "none");
                        HideorShowTab(false, "Image Survey");
                        document.getElementById('nextid').disabled = false;
                        document.getElementById('Save').disabled = false;

                        ButtonType = "next";
                        j = _tabIndex;
                        $("#Questionid").empty();
                        $("#Answerid").empty();
                        if (j >= 0) {
                            CheckResponse_Next(Answer, SurveyId);

                        }
                        if (j == Result_Tabs.length - 1) {
                            $("#nextid").hide();
                            $('#Save').show();
                        }
                        Answer = null;
                    }
                    else if (_tabIndex < j) {//Move Backward
                        $("#QAConatiner").empty();
                        $("#imgServey").css("display", "none");
                        HideorShowTab(false, "Image Survey");
                        document.getElementById('nextid').disabled = false;
                        document.getElementById('Save').disabled = false;
                        ButtonType = "prev";
                        j = _tabIndex;
                        $("#Questionid").empty();
                        $("#Answerid").empty();
                        if (j >= 0) {
                            GetQuestions(Result_Tabs[j]);
                        }
                        $('#Finish').hide();
                        $("#nextid").show();
                        //$('#Save').hide();
                        Answer = null;
                    }

                }
                removePanels();
            }, function (error) {
                if (typeof alert != "undefined") {
                    MobileCRM.bridge.alert("GoToTab Error : " + error);
                    removePanels();
                }
            }, null);
        }

        // Cursor will be placed on specified question
        function GoToQuestion(_qqId) {
            var _goToQuestionFetch = "<fetch version='1.0' output-format='xml-platform' mapping='logical' distinct='true' resultformat='DynamicEntities'>" +
                "<entity name='ebecssvy_questions'>" +
                "<attribute name='ebecssvy_questionsid' />" +
                "<attribute name='ebecssvy_name' />" +
                "<attribute name='createdon' />" +
                "<order attribute='ebecssvy_name' descending='false' />" +
                "<filter type='and'>" +
                "<condition attribute='ebecssvy_questionsid' operator='eq'  uitype='ebecssvy_questions' value='" + _qqId + "' />" +
                "</filter>" +
                "<link-entity name='ebecssvy_tabs' from='ebecssvy_tabsid' to='ebecssvy_tabsid' alias='ai' visible='false' link-type='outer'>" +
                "<attribute name='ebecssvy_order' />" +
                "</link-entity>" +
                "</entity>" +
                "</fetch>";


            MobileCRM.FetchXml.Fetch.executeFromXML(_goToQuestionFetch, function (data) {
                if (data != null && data.length > 0) {
                    var _tabIndex = data[0].properties["ai.ebecssvy_order"] != null ? Number(data[0].properties["ai.ebecssvy_order"]) : -1;
                    var qName = data[0].properties["ebecssvy_name"];
                    if (_tabIndex > 0)
                        _tabIndex = _tabIndex - 1;
                    if (_tabIndex > j) {//Move Forward
                        Next(_tabIndex);
                    }
                    else if (_tabIndex < j) {//Move Backward
                        Previous(_tabIndex);
                    }
                    else if (_tabIndex == j) {
                        if (highlightQ != null) {
                            if ($("#" + highlightQ).length > 0) {
                                var higlightedQuestions = $(".GoToQuestionStyle");;
                                if (higlightedQuestions != null && higlightedQuestions.length > 0) {
                                    $.each(higlightedQuestions, function () {
                                        $(this).removeClass("GoToQuestionStyle");
                                    });
                                }
                                //$("#" + highlightQ).css("background-color", "#57C4FA")
                                var isQuestionHidden = "false";
                                isQuestionHidden = $("#" + highlightQ).parent().css("display") == "none" ? "true" : "false";
                                if (isQuestionHidden == "true")
                                    MobileCRM.bridge.alert("Question with name (" + qName + ") is hidden");
                                else
                                    $("#" + highlightQ).addClass('GoToQuestionStyle');

                                highlightQ = null;
                            }

                        }
                    }
                }

            }, function (error) {
                if (typeof alert != "undefined") {
                    MobileCRM.bridge.alert("GoToQuestion Error : " + error);
                    removePanels();
                }
            }, null);
        }

        function showFinish() {
            if (j == Result_Tabs.length - 1) {
                $("#nextid").hide();
                $('#Finish').show();
                ShowFinalSurveyScoreButton();
            }


            if (j == Result_Tabs.length - 2) {
                var _nextTabid = Result_Tabs[j].id;
                if (hideTabList.length > 0 && hideTabList.indexOf(_nextTabid) != -1) {
                    $("#nextid").hide();
                    $('#Finish').show();
                    ShowFinalSurveyScoreButton();
                }
            }
        }

        // Checks the previuos response
        function CheckResponse_Prev(_qid, _surveyId, AttributeType, controlId, QRAnswers, lookupEntries, IsRemovePanels) {
            //MobileCRM.bridge.enableDebug();
            //debugger;
            //MobileCRM.bridge.alert("CheckResponse_Prev : " + AttributeType);
            if (responsesRelatedToQuestion.length > 0) {
                var currentReponseId = null;
                $.each(responsesRelatedToQuestion, function () {
                    if (this.questionid == _qid)
                        currentReponseId = this.responseid;
                });
                if (currentReponseId != null) {
                    var _responseFetch = "<fetch version='1.0' output-format='xml-platform' mapping='logical' distinct='true' resultformat='DynamicEntities'>" +
                        "<entity name='ebecssvy_responses'>" +
                        "<attribute name='ebecssvy_responsesid' />" +
                        "<attribute name='ebecssvy_name' />" +
                        "<attribute name='createdon' />" +
                        "<attribute name='ebecssvy_surveyanswer' />" +
                        "<attribute name='ebecssvy_xmlresponse' />" +
                        "<attribute name='ebecssvy_surveyanswerandid' />" +
                        "<order attribute='createdon' descending='false' />" +
                        "<filter type='and'>" +
                        "<condition attribute='ebecssvy_responsesid' operator='eq' value='" + currentReponseId + "' />" +
                        "</filter>" +
                        "</entity>" +
                        "</fetch>";

                    MobileCRM.FetchXml.Fetch.executeFromXML(_responseFetch, function (data) {
                        if (data != null && data.length > 0) {
                            //debugger;
                            var _xml = data[0].properties["ebecssvy_xmlresponse"];
                            var dom = $(_xml);
                            var ans = $(dom).find("SurveyAnswer")[0].textContent;
                            var _ansId = data[0].properties["ebecssvy_surveyanswerandid"] != null ? data[0].properties["ebecssvy_surveyanswerandid"] : null;
                            if (ans != undefined && ans != null) {
                                IsAnswered = true;
                                if (j == Result_Tabs.length - 1) {
                                    $("#nextid").hide();
                                    $('#Finish').show();
                                    ShowFinalSurveyScoreButton();
                                }

                                if (j == Result_Tabs.length - 2) {
                                    var _nextTabid = Result_Tabs[j].id;
                                    if (hideTabList.length > 0 && hideTabList.indexOf(_nextTabid) != -1) {
                                        $("#nextid").hide();
                                        $('#Finish').show();
                                        ShowFinalSurveyScoreButton();
                                    }
                                }
                                if (tabIsShowDesigner == "true") {
                                    $("#imgServey").css("display", "");
                                    HideorShowTab(true, "Image Survey");
                                }
                                if (Result_Tabs.length > 1)
                                    document.getElementById('nextid').disabled = false;

                                //Note - If regression going on then change if else to switch case and use QuestionTypes obj to match attribute types
                                if (AttributeType == QuestionTypes.List) {//picklist
                                    $("#" + controlId).val(ans);
                                }
                                else if (AttributeType == QuestionTypes.Text) {//TextBox
                                    $("#" + controlId).val(ans);
                                }
                                else if (AttributeType == QuestionTypes.MultiLineText) {//List
                                    $("#" + controlId).val(ans);
                                }
                                else if (AttributeType == QuestionTypes.Integer) {//Whole Number
                                    $("#" + controlId).val(ans);
                                }
                                else if (AttributeType == QuestionTypes.DateTime) {//Date
                                    var datetimepicker = $("#" + controlId).data("kendoDateTimePicker");
                                    datetimepicker.value(new Date(ans));
                                }
                                else if (AttributeType == QuestionTypes.CheckBox) {//Checkbox
                                    if (ans == "true")
                                        $("#" + controlId).prop('checked', true);
                                }
                                else if (AttributeType == QuestionTypes.Currency) {//Currency
                                    $("#" + controlId).val(ans);
                                }
                                else if (AttributeType == QuestionTypes.Decimal) {//Decimal
                                    $("#" + controlId).val(ans);
                                }
                                else if (AttributeType == QuestionTypes.TrueFalse) {//Bool
                                    var ansData = ans != null ? ans.replace(/ /g, '').replace(/[^a-zA-Z ]/g, "") : null;
                                    $('input[type=radio]', '#Answer' + _qid).val([ansData]);
                                }
                                else if (AttributeType == QuestionTypes.MultiCheckBox) {//MultiCheckBox
                                    if (ans != undefined && ans != null) {
                                        var multiAns = ans.toString().split(',');
                                        //MobileCRM.bridge.alert("Inside Multi check box");
                                        $.each(QRAnswers, function () {
                                            var AName = this.properties["ebecssvy_name"];
                                            //MobileCRM.bridge.alert("AName: " + AName + " ans: " + ans);
                                            if (multiAns.indexOf(AName) != -1) {
                                                $("#" + this.id).prop('checked', true);
                                            }
                                        });

                                    }
                                }
                                else if (AttributeType == QuestionTypes.GraphicalList) {//Graphical List)

                                    var _name = "";
                                    var recordIndex = -1;
                                    var combobox = $("#" + controlId).data("kendoComboBox");
                                    if (_ansId != null) {

                                        var comboItems = combobox.dataItems();
                                        if (comboItems != null && comboItems.length > 0) {
                                            $.each(comboItems, function (index, element) {
                                                if (_ansId.toLowerCase() == this.AId.toLowerCase()) {
                                                    _name = this.RecordName;
                                                    recordIndex = index;
                                                }
                                            });
                                        }
                                    }
                                    var GLObject = new Object();
                                    GLObject.Qid = controlId;
                                    GLObject.GLAnswer = _name;
                                    GLObject.GLAnswerId = _ansId;
                                    GLArray.push(GLObject);
                                    combobox.select(recordIndex);
                                }
                                else if (AttributeType == QuestionTypes.Lookup) {//Lookup)
                                    var _name = "";
                                    var recordIndex = -1;
                                    var combobox = $("#" + controlId).data("kendoComboBox");
                                    //MobileCRM.bridge.alert(" controlId : " + controlId);
                                    if (_ansId != null) {

                                        var comboItems = combobox.dataItems();
                                        if (comboItems != null && comboItems.length > 0) {
                                            $.each(comboItems, function (index, element) {
                                                //MobileCRM.bridge.alert(" _ansId : " + _ansId + " >> RId: " + this.RId);
                                                if (_ansId.toLowerCase() == this.RId.toLowerCase()) {
                                                    _name = this.RecordName;
                                                    recordIndex = index;
                                                }
                                            });
                                        }
                                        else {
                                            var resName = data[0].properties["ebecssvy_name"] != null ? data[0].properties["ebecssvy_name"] : null;
                                            _name = resName;
                                            recordIndex = 0;
                                           // var imgElement = resName;//"data: image/jpeg;base64," + data;
                                            
                                            var recPrimayName = resName != null ? resName : "(No Name)";
                                            
                                            var currentQuestion = $.grep(QuestionsArray, function (item) {
                                                return item.properties["ebecssvy_questionsid"] == _qid;
                                            });
                                            //MobileCRM.bridge.alert(" _ansId : " + _ansId + " : " + _qid + " : " + currentQuestion.length + " : " +
                                              //  currentQuestion[0].properties["ebecssvy_lookupentityname"]);
                                            var entityName = currentQuestion[0].properties["ebecssvy_lookupentityname"]; 
                                            //MobileCRM.bridge.alert(" _ansId : " + entityName + " >> RId: " + controlId.toString().replace("Lookup", ""));
                                            attachImagesToLookup(_ansId, controlId.toString().replace("Lookup", ""), recPrimayName, _ansId, entityName, 0, data, QuestionTypes.Lookup, "onLoad");
                                        }
                                    }
                                    var GLObject = new Object();
                                    GLObject.Qid = controlId.toString().replace("Lookup", "");
                                    GLObject.GLAnswer = _name;
                                    GLObject.GLAnswerId = _ansId;
                                    LookupArray.push(GLObject);
                                    combobox.select(recordIndex);
                                    //MobileCRM.bridge.alert("combobox.value() : " + combobox.value());
                                    if (recordIndex != -1) {
                                        var _url = combobox.value();
                                        $($($(combobox.wrapper[0]).children("span"))).children("div#CBI").css("background-image", "url(" + _url + ")");
                                        $($($(combobox.wrapper[0]).children("span"))).children("div#CBI").css("display", "block");
                                        $($($(combobox.wrapper[0]).children("span"))).children("input").css({ "padding-right": "30px" });
                                    }

                                }
                                else if (AttributeType == QuestionTypes.Calculated) {//Calculated
                                    //MobileCRM.bridge.alert("Ans Val: " + ans);
                                    $("#" + controlId).val(ans);
                                }
                                else if (AttributeType == QuestionTypes.Signature)
                                {
                                    //MobileCRM.bridge.alert("Inside Signature");
                                    var qusIndex = findCrmEntityArrayIndex(QuestionsArray, _qid);
                                    //MobileCRM.bridge.alert("Inside Signature qusIndex:" + qusIndex);
                                    ManipulateSignatureAnnotations(currentReponseId, qusIndex, true, false, _qid);
                                }
                                if (IsRemovePanels == "true")
                                    removePanels();
                            }
                            else {
                                if (AttributeType == QuestionTypes.DisplayImage || AttributeType == QuestionTypes.Label || AttributeType == QuestionTypes.ImageCapture) {//DisplayImage, CaptureImage, Label
                                    if (Result_Tabs.length > 1)
                                        document.getElementById('nextid').disabled = false;
                                }
                            }
                        }
                        else {
                            //document.getElementById('nextid').disabled = true;
                            if (j == Result_Tabs.length - 1) {
                                $("#nextid").hide();
                                $('#Finish').show();
                                ShowFinalSurveyScoreButton();
                            }
                            if (IsRemovePanels == "true")
                                removePanels();
                        }
                    }, function (error) {
                        if (typeof alert != "undefined") {
                            MobileCRM.bridge.alert(" CheckResponse_Prev Error : " + error);
                            removePanels();
                        }
                    }, null);
                }
                else {
                    if (IsRemovePanels == "true")
                        removePanels();
                }
            }
            else {
                if (IsRemovePanels == "true")
                    removePanels();
            }
        }

        //Following method use to populate answers from target entity
        //Following method use to populate answers from target entity
        function GetTargetEntityValuesByQuestion(questionId) {

            var currentQuestion = $.grep(QuestionsArray, function (item) {
                return item.properties["ebecssvy_questionsid"] == questionId;
            });

            var attributeType = currentQuestion[0].properties["ebecssvy_attributetype"].toString();
            var Result_Answers = $.grep(Result_Ans, function (arrayItem) {
                return arrayItem != null && typeof arrayItem != null && arrayItem.properties["ebecssvy_questionsid"].id === QuestionsArray[questionIndex].id
            });

            if (currentQuestion[0].properties["ebecssvy_targetrelatedattribute"] != null && currentQuestion[0].properties["ebecssvy_targetrelatedattribute"] != ""
                && currentQuestion[0].properties["ebecssvy_attributename"] != null && currentQuestion[0].properties["ebecssvy_attributename"] != ""
                && currentQuestion[0].properties["ebecssvy_entityname"] != null && currentQuestion[0].properties["ebecssvy_entityname"] != "") {

                var targetRelatedAttribute = currentQuestion[0].properties["ebecssvy_targetrelatedattribute"];
                var attributeName = currentQuestion[0].properties["ebecssvy_attributename"];
                var entityName = currentQuestion[0].properties["ebecssvy_entityname"];
                var fromAttribute = entityName + "id";
                var isReadOnly = currentQuestion[0].properties["ebecssvy_readonlyquestion"] != null ? currentQuestion[0].properties["ebecssvy_readonlyquestion"] : false;
                var currencySymbol = "";
                var numberOfDecimalPlaces = currentQuestion[0].properties["ebecssvy_numberofdecimalplaces"] != null && currentQuestion[0].properties["ebecssvy_numberofdecimalplaces"] != "" ? currentQuestion[0].properties["ebecssvy_numberofdecimalplaces"] : 2;

                currencySymbol = currentQuestion[0].properties["ebecssvy_currency"];

                if (currencySymbol != "" && currencySymbol != null && typeof currencySymbol != "undefined" && currencySymbol.indexOf('(') != -1 && currencySymbol.indexOf(')') != -1) {
                    currencySymbol = currencySymbol.substring(currencySymbol.lastIndexOf("(") + 1, currencySymbol.lastIndexOf(")"));
                } else if (currencySymbol == "" || currencySymbol == null || typeof currencySymbol == "undefined") {
                    currencySymbol = "£";
                }

                var currentReponseId = null;
                $.each(responsesRelatedToQuestion, function () {
                    if (this.questionid == questionId) {
                        currentReponseId = this.responseid;
                    }
                });
                //MobileCRM.bridge.alert("ebecssvy_attributetype: " + currentQuestion[0].properties["ebecssvy_attributetype"]);
                var FetchXml_Qes = "<fetch resultformat='DynamicEntities' version='1.0' output-format='xml-platform' mapping='logical' distinct='false'>" +
                    "<entity name='ebecssvy_conductedsurvey'>" +
                    "<attribute name='ebecssvy_conductedsurveyid' />" +
                    "<filter type='and'>" +
                    "<condition attribute='ebecssvy_conductedsurveyid' operator='eq' value='" + _CConductedSurveyId + "' />" +
                    "</filter>" +
                    "<link-entity name='" + entityName + "' from='" + fromAttribute + "' to='" + targetRelatedAttribute + "' alias='target' visible='false' link-type='inner'>" +
                    "<attribute name='" + attributeName + "' />" +
                    "</link-entity>" +
                    "</entity>" +
                    "</fetch>";

                try {
                    //MobileCRM.bridge.alert("FetchXml_Qes: " + FetchXml_Qes);
                    MobileCRM.FetchXml.Fetch.executeFromXML(FetchXml_Qes,
                        function (data) {
                            //MobileCRM.bridge.alert("Data: " + data + " Length: " + data.length + " attributeName: " + attributeName);
                            if (data != null && data.length > 0) {

                                if (data[0].properties["target." + attributeName] != null) {
                                    var answer = data[0].properties["target." + attributeName];                                    
                                        QAObject = new Object();
                                        QAObject.qid = questionId;
                                        QAObject.qname = currentQuestion[0].properties["ebecssvy_name"];

                                        //MobileCRM.bridge.alert("GetTargetEntityValuesByQuestion : " + attributeType + " : "  + answer + " : " + currentReponseId + " : " + questionId + " : " + QAObject.qname);
                                        if (attributeType == QuestionTypes.CheckBox) {
                                            //MobileCRM.bridge.alert("options: " + answer);
                                            QAObject.answer = answer;
                                            QAObject.lookupId = "";
                                            QAObject.responseScore = CalculateIndividualAnswerScore(questionId, answer);
                                            var responseXml = GenerateXmlStringForResponse(QAObject);

                                            if (currentReponseId != null) {
                                                CreateOrUpdateSurveyResponseArray(QAObject, SurveyId, currentReponseId, responseXml);
                                                UpdateResponse(QAObject, SurveyId, currentReponseId, responseXml);
                                            } else {
                                                CreateOrUpdateSurveyResponseArray(QAObject, SurveyId, currentReponseId, responseXml);
                                                checkConductedSurvey(QAObject, SurveyId);
                                            }

                                            if (answer) {
                                                $("#checkbox" + questionId).prop('checked', true);
                                            } else {
                                                $("#checkbox" + questionId).prop('checked', false);
                                            }

                                            //if (isReadOnly) {
                                            //    $("#checkbox" + questionId).prop("disabled", true);
                                            //}

                                            CheckResponse_Prev(questionId, SurveyId, attributeType, "checkbox" + questionId);
                                        }
                                        else if (attributeType == QuestionTypes.MultiCheckBox || attributeType == QuestionTypes.List) {
                                            //MobileCRM.bridge.alert("options: " + answer);
                                            var options = answer.toString().split(";");
                                            var responseAnswer = "";
                                            var responseScore = 0;

                                            if (options != null && options.length > 0) {
                                                var optionsetValue = 0;
                                                for (var i = 0; i < options.length; i++) {
                                                    optionsetValue = options[i];
                                                    var questionAnswer = GetAnswerByAnswerTextOrCrmAnswerValue(questionId, "", optionsetValue);

                                                    if (questionAnswer != null && questionAnswer != "" && typeof questionAnswer != "undefined") {

                                                        $("#" + questionAnswer.properties["ebecssvy_answersid"]).prop("checked", true);

                                                        if (responseAnswer == "") {
                                                            responseAnswer = questionAnswer.properties["ebecssvy_name"];
                                                            responseScore = CalculateIndividualAnswerScore(questionId, responseAnswer);
                                                        } else {
                                                            responseAnswer += "," + questionAnswer.properties["ebecssvy_name"];
                                                            responseScore += CalculateIndividualAnswerScore(questionId, questionAnswer.properties["ebecssvy_name"]);
                                                        }
                                                    }
                                                }
                                                //MobileCRM.bridge.alert("responseAnswer: " + responseAnswer);
                                                QAObject.answer = responseAnswer;
                                                QAObject.lookupId = "";
                                                QAObject.responseScore = responseScore;
                                                var responseXml = GenerateXmlStringForResponse(QAObject);

                                                //MobileCRM.bridge.alert("currentReponseId: " + currentReponseId);
                                                if (currentReponseId != null) {
                                                    CreateOrUpdateSurveyResponseArray(QAObject, SurveyId, currentReponseId, responseXml);
                                                    UpdateResponse(QAObject, SurveyId, currentReponseId, responseXml);
                                                } else {
                                                    CreateOrUpdateSurveyResponseArray(QAObject, SurveyId, currentReponseId, responseXml);
                                                    checkConductedSurvey(QAObject, SurveyId);
                                                }
                                                //MobileCRM.bridge.alert("piclistctrl: " + $("#piclistctrl" + questionId).val());
                                                if (attributeType == QuestionTypes.List) {
                                                    $("#piclistctrl" + questionId).val(responseAnswer);
                                                }
                                                if (isReadOnly) {
                                                    if (attributeType == QuestionTypes.List) {
                                                        //Need to implement
                                                    }
                                                    //$.each(Result_Answers, function () {
                                                    //    $("#" + this.properties["ebecssvy_answersid"]).prop("disabled", true);
                                                    //});
                                                }
                                            }
                                        }
                                        else if (attributeType == QuestionTypes.Integer || attributeType == QuestionTypes.Decimal) {
                                            //MobileCRM.bridge.alert("Integer, Decimal, Calculated  answer: " + answer);
                                            QAObject.answer = answer;
                                            QAObject.lookupId = "";
                                            QAObject.responseScore = CalculateIndividualAnswerScore(questionId, answer);

                                            if (attributeType == QuestionTypes.Integer) {

                                                QAObject.answer = FormatNumber(answer, "", 0, false);
                                                var responseXml = GenerateXmlStringForResponse(QAObject);

                                                if (currentReponseId != null) {
                                                    CreateOrUpdateSurveyResponseArray(QAObject, SurveyId, currentReponseId, responseXml);
                                                    UpdateResponse(QAObject, SurveyId, currentReponseId, responseXml);
                                                } else {
                                                    CreateOrUpdateSurveyResponseArray(QAObject, SurveyId, currentReponseId, responseXml);
                                                    checkConductedSurvey(QAObject, SurveyId);
                                                }

                                                CheckResponse_Prev(questionId, SurveyId, attributeType, "integer" + questionId);

                                                //if (isReadOnly) {
                                                //    $("#integer" + questionId).prop("disabled", true);
                                                //}

                                                $("#integer" + questionId + "").val();
                                                CheckCalculatedQuestions(questionId);
                                            }
                                            else if (attributeType == QuestionTypes.Decimal) {

                                                QAObject.answer = FormatNumber(answer, "", numberOfDecimalPlaces, true);
                                                var responseXml = GenerateXmlStringForResponse(QAObject);

                                                if (currentReponseId != null) {
                                                    CreateOrUpdateSurveyResponseArray(QAObject, SurveyId, currentReponseId, responseXml);
                                                    UpdateResponse(QAObject, SurveyId, currentReponseId, responseXml);
                                                } else {
                                                    CreateOrUpdateSurveyResponseArray(QAObject, SurveyId, currentReponseId, responseXml);
                                                    checkConductedSurvey(QAObject, SurveyId);
                                                }

                                                CheckResponse_Prev(questionId, SurveyId, attributeType, "Decimal" + questionId);

                                                if (isReadOnly) {
                                                    $("#Decimal" + questionId).prop("disabled", true);
                                                }

                                                //MobileCRM.bridge.alert("Decimal Number After Formatted: " + FormatNumber(answer, "", numberOfDecimalPlaces, true));
                                                $("#Decimal" + questionId + "").val(FormatNumber(answer, "", numberOfDecimalPlaces, true));
                                                CheckCalculatedQuestions(questionId);
                                            }
                                        }
                                        else if (attributeType == QuestionTypes.Currency) {
                                            //MobileCRM.bridge.alert("Currency answer: " + answer);
                                            if (currencySymbol != "" && currencySymbol != null && typeof currencySymbol != "undefined" && currencySymbol.indexOf('(') != -1 && currencySymbol.indexOf(')') != -1) {
                                                currencySymbol = currencySymbol.substring(currencySymbol.lastIndexOf("(") + 1, currencySymbol.lastIndexOf(")"));
                                            } else if (currencySymbol == "" || currencySymbol == null || typeof currencySymbol == "undefined") {
                                                currencySymbol = "£";
                                            }

                                            var currencyAnswer = FormatNumber(answer, currencySymbol, numberOfDecimalPlaces, true);
                                            QAObject.answer = currencyAnswer;
                                            QAObject.lookupId = "";
                                            QAObject.responseScore = CalculateIndividualAnswerScore(questionId, answer);
                                            var responseXml = GenerateXmlStringForResponse(QAObject);

                                            if (currentReponseId != null) {
                                                CreateOrUpdateSurveyResponseArray(QAObject, SurveyId, currentReponseId, responseXml);
                                                UpdateResponse(QAObject, SurveyId, currentReponseId, responseXml);
                                            } else {
                                                CreateOrUpdateSurveyResponseArray(QAObject, SurveyId, currentReponseId, responseXml);
                                                checkConductedSurvey(QAObject, SurveyId);
                                            }

                                            CheckResponse_Prev(questionId, SurveyId, attributeType, "currency" + questionId);

                                            //if (isReadOnly) {
                                            //    $("#currency" + questionId).prop("disabled", true);
                                            //}

                                            //MobileCRM.bridge.alert("Currency After Formatted: " + currencyAnswer);

                                            $("#currency" + questionId + "").val(currencyAnswer);
                                            CheckCalculatedQuestions(questionId);
                                        }
                                        else if (attributeType == QuestionTypes.Text || attributeType == QuestionTypes.MultiLineText) {
                                            QAObject.answer = answer;
                                            QAObject.lookupId = "";
                                            QAObject.responseScore = "";
                                            var responseXml = GenerateXmlStringForResponse(QAObject);

                                            var controlId = "";

                                            if (attributeType == QuestionTypes.Text) {
                                                controlId = "TextAns" + questionId;
                                            }
                                            else {
                                                controlId = "list" + questionId;
                                            }

                                            $("#" + controlId).val(answer);
                                        }
                                        else if (attributeType == QuestionTypes.TrueFalse) {
                                            var locAnswer = answer != null ? answer.toString().replace(/ /g, '').replace(/[^a-zA-Z ]/g, "") : null;
                                            QAObject.answer = locAnswer;
                                            QAObject.lookupId = "";
                                            QAObject.responseScore = CalculateIndividualAnswerScore(questionId, answer);
                                            var responseXml = GenerateXmlStringForResponse(QAObject);                                            

                                            locAnswer = locAnswer.toUpperCase();
                                                                                      
                                            if (Result_Answers != null && Result_Answers != 'undefined' && Result_Answers.length > 0) {
                                                var ansOne = Result_Answers[0].properties["ebecssvy_name"];
                                                var ansTwo = Result_Answers[1].properties["ebecssvy_name"];
                                                //MobileCRM.bridge.alert("locAnswer true/false : " + locAnswer + ", " + ansOne + ", " + ansTwo);

                                                if (locAnswer != null && locAnswer == "TRUE" && (ansOne.toLowerCase() == 'yes' || ansOne.toLowerCase() == 'true' || ansOne.toLowerCase() == 'ja')) {
                                                    $('input[type=radio]', '#Answer' + questionId).val([ansOne]);
                                                    QAObject.answer = ansOne;
                                                } else if (locAnswer != null && locAnswer == "FALSE" && (ansOne.toLowerCase() == 'no' || ansOne.toLowerCase() == 'false' || ansOne.toLowerCase() == 'nej')) {
                                                    $('input[type=radio]', '#Answer' + questionId).val([ansOne]);
                                                    QAObject.answer = ansOne;
                                                } else if (locAnswer != null && locAnswer == "TRUE" && (ansTwo.toLowerCase() == 'yes' || ansTwo.toLowerCase() == 'true' || ansTwo.toLowerCase() == 'ja')) {
                                                    $('input[type=radio]', '#Answer' + questionId).val([ansTwo]);
                                                    QAObject.answer = ansTwo;
                                                } else if (locAnswer != null && locAnswer == "FALSE" && (ansTwo.toLowerCase() == 'no' || ansTwo.toLowerCase() == 'false' || ansTwo.toLowerCase() == 'nej')) {
                                                    $('input[type=radio]', '#Answer' + questionId).val([ansTwo]);
                                                    QAObject.answer = ansTwo;
                                                }
                                                //MobileCRM.bridge.alert(QAObject.answer);
                                            }
                                            if (currentReponseId != null) {
                                                //MobileCRM.bridge.alert("CR null:" + QAObject.answer);
                                                CreateOrUpdateSurveyResponseArray(QAObject, SurveyId, currentReponseId, responseXml);
                                                UpdateResponse(QAObject, SurveyId, currentReponseId, responseXml);
                                            } else {
                                                //MobileCRM.bridge.alert("CR:" + QAObject.answer);
                                                CreateOrUpdateSurveyResponseArray(QAObject, SurveyId, currentReponseId, responseXml);
                                                checkConductedSurvey(QAObject, SurveyId);
                                            }
                                            if (isReadOnly) {
                                                $('input[type=radio]', '#Answer' + questionId).prop("disabled", true);
                                            }
                                        }
                                        LoadActionsOnLoad(questionId);
                                    }
                            } else {
                                if (attributeType == QuestionTypes.Decimal) {
                                    CheckResponse_Prev(questionId, SurveyId, attributeType, "Decimal" + questionId);
                                } else if (attributeType == QuestionTypes.Integer) {
                                    CheckResponse_Prev(questionId, SurveyId, attributeType, "integer" + questionId);
                                } else if (attributeType == QuestionTypes.Currency) {
                                    CheckResponse_Prev(questionId, SurveyId, attributeType, "currency" + questionId);
                                } else if (attributeType == QuestionTypes.CheckBox) {
                                    CheckResponse_Prev(questionId, SurveyId, attributeType, "checkbox" + questionId);
                                } else if (attributeType == QuestionTypes.MultiCheckBox) {
                                    CheckResponse_Prev(questionId, SurveyId, attributeType, "checkbox", Result_Answers);
                                } else if (attributeType == QuestionTypes.Text) {
                                    CheckResponse_Prev(questionId, SurveyId, attributeType, "TextAns" + questionId);
                                } else if (attributeType == QuestionTypes.MultiLineText) {
                                    CheckResponse_Prev(questionId, SurveyId, attributeType, "list" + questionId);
                                } else if (attributeType == QuestionTypes.TrueFalse) {
                                    CheckResponse_Prev(questionId, SurveyId, attributeType, "Radio");
                                } else if (attributeType == QuestionTypes.List) {
                                    CheckResponse_Prev(questionId, SurveyId, attributeType, "piclistctrl" + questionId);
                                }
                            }
                        },
                        function (error) {
                            QuesErrorCallBack(error)
                        }, null);

                } catch (error) {

                }
            } else {

                if (attributeType == QuestionTypes.Decimal) {
                    CheckResponse_Prev(questionId, SurveyId, attributeType, "Decimal" + questionId);
                } else if (attributeType == QuestionTypes.Integer) {
                    CheckResponse_Prev(questionId, SurveyId, attributeType, "integer" + questionId);
                } else if (attributeType == QuestionTypes.Currency) {
                    CheckResponse_Prev(questionId, SurveyId, attributeType, "currency" + questionId);
                } else if (attributeType == QuestionTypes.CheckBox) {
                    //MobileCRM.bridge.alert("checkbox : " + questionId);
                    CheckResponse_Prev(questionId, SurveyId, attributeType, "checkbox" + questionId);
                } else if (attributeType == QuestionTypes.MultiCheckBox) {
                    CheckResponse_Prev(questionId, SurveyId, attributeType, "checkbox", Result_Answers);
                } else if (attributeType == QuestionTypes.Text) {
                    CheckResponse_Prev(questionId, SurveyId, attributeType, "TextAns" + questionId);
                } else if (attributeType == QuestionTypes.MultiLineText) {
                    CheckResponse_Prev(questionId, SurveyId, attributeType, "list" + questionId);
                } else if (attributeType == QuestionTypes.TrueFalse) {
                    CheckResponse_Prev(questionId, SurveyId, attributeType, "Radio");
                } else if (attributeType == QuestionTypes.List) {
                    CheckResponse_Prev(questionId, SurveyId, attributeType, "piclistctrl" + questionId);
                }
            }
        }

        //Create of Update Global Array of the survey based on the response creation
        //This fix the async creation issue in action triggering
        function CreateOrUpdateSurveyResponseArray(_QAObj, _surveyId, _responseId, _xmlResponse) {
            var _cAnswer = _QAObj.answer;
            if (_cAnswer == "(No Name)")
                _cAnswer = "";

            //MobileCRM.bridge.alert("Updating Answer " + (_cAnswer != undefined) + " : " + (_cAnswer != null) + " : " + (_cAnswer != ""));

            if (_cAnswer != undefined && _cAnswer != null && _cAnswer != "") {

                //MobileCRM.bridge.alert("_QAObj.qid " + _QAObj.qid);
                var _question = _QAObj.qname;
                var QuestionLookup = _QAObj.qid ? new MobileCRM.Reference("ebecssvy_questions", _QAObj.qid, _QAObj.qname) : null;
                var SurveyLookup = SurveyId ? new MobileCRM.Reference("ebecssvy_survey", SurveyId) : null;
                var ConductedSurveyLookUp = new MobileCRM.Reference("ebecssvy_conductedsurvey", _CConductedSurveyId);

                if (_responseId == "" || _responseId == null) {
                    _responseId = "00000000-0000-0000-0000-000000000000";
                }

                var _responseRec = new MobileCRM.DynamicEntity("ebecssvy_responses", _responseId);
                var props = new Object();
                props.ebecssvy_surveyanswer = _cAnswer;
                //Processing response XML
                var _xml = _xmlResponse;
                var dom = $(_xml);
                $(dom).find("SurveyAnswer")[0].textContent = _cAnswer;
                var xmlString = null;
                xmlString = $(dom)[0].outerHTML;
                props.ebecssvy_xmlresponse = xmlString;

                var sResponseAnswer = _cAnswer;
                if (sResponseAnswer != undefined && sResponseAnswer.length > 450) {
                    sResponseAnswer = sResponseAnswer.slice(0, 447) + "...";
                }
                //MobileCRM.bridge.alert("sResponseAnswer " + sResponseAnswer);
                props.ebecssvy_name = sResponseAnswer
                props.ebecssvy_conductedsurveyid = ConductedSurveyLookUp;
                props.ebecssvy_questionid = QuestionLookup;
                props.ebecssvy_surveyid = SurveyLookup;
                props.ebecssvy_surveyquestion = _question;
                props.ebecssvy_surveyanswerandid = _QAObj.lookupId;
                props.ebecssvy_responsescore = _QAObj.responseScore;
                _responseRec.properties = props;

                //MobileCRM.bridge.alert("props.ebecssvy_questionid : " + props.ebecssvy_name + " : " + props.ebecssvy_questionid);
                SurveyResponses = $.grep(SurveyResponses, function (e) {
                    return e.properties["ebecssvy_responsesid"] != _responseId && e.properties["ebecssvy_questionid"] != _QAObj.qid;
                });

                SurveyResponses.push(_responseRec);

                //var reponseObject = new Object();
                //reponseObject.questionid = _QAObj.qid;
                //reponseObject.responseid = _responseId;
                //reponseObject.responsescore = _QAObj.responseScore;

                //responsesRelatedToQuestion = $.grep(responsesRelatedToQuestion, function (e) {
                //    return e.questionid != _QAObj.qid && e.responseid != _responseId;
                //});

                //responsesRelatedToQuestion.push(reponseObject);

            }
        }

        //Get Answer Ids by Answer Text
        function GetAnswerByAnswerTextOrCrmAnswerValue(questionId, answer, crmAnswerValue) {
            if (Result_Ans != null && Result_Ans.length > 0) {

                var questionRelatedAnswers = $.grep(Result_Ans, function (arrayItem) {
                    return arrayItem.properties["ebecssvy_questionsid"].id == questionId;
                });

                //MobileCRM.bridge.alert("crmAnswerValue: " + crmAnswerValue + " questionRelatedAnswers: " + questionRelatedAnswers.length);

                var answers = [];

                if (answer != null && answer != "") {
                    answers = $.grep(questionRelatedAnswers, function (item) {
                        return item.properties["ebecssvy_name"] == answer;
                    });
                }

                if (crmAnswerValue != null && crmAnswerValue != "") {
                    answers = $.grep(questionRelatedAnswers, function (item) {
                        //MobileCRM.bridge.alert("ebecssvy_answercrmvalue: " + item.properties["ebecssvy_answercrmvalue"] + " >> crmAnswerValue: " + crmAnswerValue);
                        return item.properties["ebecssvy_answercrmvalue"] == crmAnswerValue;
                    });
                }
                //MobileCRM.bridge.alert("answers " + answers.length);
                if (answers != null && answers.length > 0) {
                    //MobileCRM.bridge.alert("answers[0] :" + answers[0]);
                    return answers[0];
                }
            }

            return null;
        }

        //Generate response xml by question data
        function GenerateXmlStringForResponse(_qaObject) {
            var _xml = "<SurveyResponse></SurveyResponse>";
            var dom = $(_xml);
            var xmlString = null;
            var _xmlQuestionId = $('<SurveyQuestionId>' + _qaObject.qid + '</SurveyQuestionId>');
            $(dom).append($(_xmlQuestionId)[0]);
            var _xmlQuestionName = $('<SurveyQuestionName>' + _qaObject.qname + '</SurveyQuestionName>');
            $(dom).append($(_xmlQuestionName)[0])
            var _xmlAnswer = $('<SurveyAnswer>' + _qaObject.answer + '</SurveyAnswer>');
            $(dom).append($(_xmlAnswer)[0])
            var _xmlSurveyId = $('<SurveyId>' + SurveyId + '</SurveyId>');
            $(dom).append($(_xmlSurveyId)[0])
            var _xmlSurveyName = $('<SurveyName>' + _surveyName + '</SurveyName>');
            $(dom).append($(_xmlSurveyName)[0])
            xmlString = $(dom)[0].outerHTML;

            return xmlString;
        }

        function findlookupEntryIndex(arr, obj) {
            var elementPos = arr.map(function (x) { return x.id; }).indexOf(obj);
            return elementPos;
        }

        function CheckResponse_Next(_answer, _surveyId) {
            GetQuestions(Result_Tabs[j]);
        }

        // Updates response for clear action performed by the user
        function UpdateResponseForClearAction(_qid, isClearAndHideSection) {
            // alert("Enterd update");
            // SaveLast(true);// true is sent to know whether this function is called form here or on save button click
            if (!isClearAndHideSection)
                showLoadingMessage_Process();
            var currentReponseId = null;
            $.each(responsesRelatedToQuestion, function () {
                if (this.questionid == _qid)
                    currentReponseId = this.responseid;
            });
            if (currentReponseId != null) {

                var _responseFetch = "<fetch version='1.0' output-format='xml-platform' mapping='logical' distinct='true' resultformat='DynamicEntities'>" +
                    "<entity name='ebecssvy_responses'>" +
                    "<attribute name='ebecssvy_responsesid' />" +
                    "<attribute name='createdon' />" +
                    "<attribute name='ebecssvy_surveyanswer' />" +
                    "<attribute name='ebecssvy_xmlresponse' />" +
                    "<attribute name='ebecssvy_surveyanswerandid' />" +
                    "<order attribute='createdon' descending='false' />" +
                    "<filter type='and'>" +
                    "<condition attribute='ebecssvy_responsesid' operator='eq' value='" + currentReponseId + "' />" +
                    "</filter>" +
                    "</entity>" +
                    "</fetch>";
                MobileCRM.FetchXml.Fetch.executeFromXML(_responseFetch, function (data) {
                    // alert("Enterd update data len : " + data.length);
                    if (data != null && data.length > 0) {
                        var _xmlResponse = data[0].properties["ebecssvy_xmlresponse"];
                        var _responseId = data[0].properties["ebecssvy_responsesid"];
                        var _responseRec = new MobileCRM.DynamicEntity("ebecssvy_responses", _responseId);
                        var props = _responseRec.properties;
                        props.ebecssvy_surveyanswer = null;
                        //Processing response XML
                        var _xml = _xmlResponse;
                        var dom = $(_xml);
                        $(dom).find("SurveyAnswer")[0].textContent = "";
                        var xmlString = null;
                        xmlString = $(dom)[0].outerHTML;
                        props.ebecssvy_xmlresponse = xmlString;
                        props.ebecssvy_name = null
                        props.ebecssvy_surveyanswerandid = null;

                        // ...
                        _responseRec.save(
                            function (error) {
                                if (error) {
                                    MobileCRM.bridge.alert("An error occurred: " + error);
                                    removePanels();
                                }
                                else {
                                    // callback is called in scope of newly created MobileCRM.DynamicEntity object; thus we can access the data using "this" keyword
                                    //ShowOrHideIndicator("UnSavedDiv", "none");
                                    //ShowOrHideIndicator("SavedDiv", "table-cell");
                                    //  removePanels();
                                    // alert("Save Success");
                                    // actionsCollection = new Array();

                                }
                            }
                        );

                    }
                }, function (error) {
                    if (typeof alert != "undefined") {
                        MobileCRM.bridge.alert("Response Error : " + error);
                        removePanels();
                    }
                }, null);
            }
        }

        // Changes done to answers on survey form will be updated
        function UpdateResponse(_QAObj, _surveyId, _responseId, _xmlResponse) {
            var _cAnswer = _QAObj.answer;
            if (_cAnswer == "(No Name)")
                _cAnswer = "";

            //MobileCRM.bridge.alert("Updating Answer " + _cAnswer);

            if (_QAObj.qtype == "signature") {

                if (_QAObj.imagedata != "") {
                    //MobileCRM.bridge.alert("imagedata: " + _QAObj.imagedata);
                    ManipulateSignatureAnnotations(_responseId, 0, false, true, "", _QAObj.imagedata, true);
                    //CreateSignatureImageAnnotation(_responseId, _QAObj.imagedata);
                } else {
                    //Need to delete all annotations before response record
                    ManipulateSignatureAnnotations(_responseId, 0, false, true);
                    //Delete existing responses if answer is empty or null
                    MobileCRM.DynamicEntity.deleteById(
                        "ebecssvy_responses",
                        _responseId,
                        function () {
                            //MobileCRM.bridge.alert("_responseId: " + _responseId);
                            responsesRelatedToQuestion = $.grep(responsesRelatedToQuestion, function (e) {
                                return e.responseid != _responseId;
                            });

                            SurveyResponses = $.grep(SurveyResponses, function (e) {
                                return e.properties["ebecssvy_responsesid"] != _responseId;
                            });
                        },
                        function (error) {
                            MobileCRM.bridge.alert("An error occurred: " + error);
                        }
                    );
                }
            }else if (_cAnswer != undefined && _cAnswer != null && _cAnswer != "") {
                var _responseRec = new MobileCRM.DynamicEntity("ebecssvy_responses", _responseId);
                var props = _responseRec.properties;
                props.ebecssvy_surveyanswer = _cAnswer;
                //Processing response XML
                var _xml = _xmlResponse;
                var dom = $(_xml);
                $(dom).find("SurveyAnswer")[0].textContent = _cAnswer;
                var xmlString = null;
                xmlString = $(dom)[0].outerHTML;
                props.ebecssvy_xmlresponse = xmlString;

                var sResponseAnswer = _cAnswer;
                if (sResponseAnswer != undefined && sResponseAnswer.length > 450) {
                    sResponseAnswer = sResponseAnswer.slice(0, 447) + "...";
                }

                props.ebecssvy_name = sResponseAnswer
                props.ebecssvy_surveyanswerandid = _QAObj.lookupId;
                props.ebecssvy_responsescore = _QAObj.responseScore;
                //MobileCRM.bridge.alert("UpdateResponse sResponseAnswer: " + sResponseAnswer + " _QAObj.answer: " + _QAObj.answer + " _responseId: " + _responseId);
                _responseRec.save(
                    function (error) {
                        if (error) {
                            document.getElementById('Save').disabled = false;
                            MobileCRM.bridge.alert("An error occurred: " + error);
                            removePanels();
                        }
                        else {
                            // callback is called in scope of newly created MobileCRM.DynamicEntity object; thus we can access the data using "this" keyword
                            document.getElementById('Save').disabled = false;
                            var newId = this.id;
                            var allProps = this.properties;
                            GetResponseId(newId);

                            SurveyResponses = $.grep(SurveyResponses, function (e) {
                                return e.properties["ebecssvy_responsesid"] != newId;
                            });

                            SurveyResponses.push(this);
                        }
                    });
            } else {
                //Delete existing responses if answer is empty or null
                MobileCRM.DynamicEntity.deleteById(
                    "ebecssvy_responses",
                    _responseId,
                    function () {
                        //MobileCRM.bridge.alert("_responseId: " + _responseId);
                        responsesRelatedToQuestion = $.grep(responsesRelatedToQuestion, function (e) {
                            return e.responseid != _responseId;
                        });

                        SurveyResponses = $.grep(SurveyResponses, function (e) {
                            return e.properties["ebecssvy_responsesid"] != _responseId;
                        });
                    },
                    function (error) {
                        MobileCRM.bridge.alert("An error occurred: " + error);
                    }
                );
            }

            removePanels();
        }

        /**************************************************************************
        * CreateSignatureImageAnnotation *
        * This method is used for Create signature image attachment for responses *
        ***************************************************************************/
        function CreateSignatureImageAnnotation(responseId, dataUrl) {
            //MobileCRM.bridge.alert("Create Annotation: " + responseId);
            var today = new Date();
            var _responseRec = MobileCRM.DynamicEntity.createNew("annotation");
            var props = new Object();
            var trimmedImageDate = dataUrl.replace("data:image/png;base64,", "");
            props.documentbody = trimmedImageDate;
            props.subject = "Signature" + "_" + today.getTime();
            props.filename = "Signature" + "_" + today.getTime() + ".png";
            props.objectid = new MobileCRM.Reference("ebecssvy_responses", responseId)
            _responseRec.properties = props;
            _responseRec.save(
                function (error) {
                    if (error) {
                        document.getElementById('Save').disabled = false;
                        MobileCRM.bridge.alert("Note error occurred: " + error);
                        removePanels();
                    }
                });
        }

        /**************************************************************************
        * ManipulateSignatureAnnotations *
        * This method is used for Create signature image attachment for responses *
        ***************************************************************************/
        function ManipulateSignatureAnnotations(objectId, questionIndex, loadSignature, deleteannotations, questionId, dataUrl, createSignature) {

            var _annotationFetch = "<fetch version='1.0' output-format='xml-platform' mapping='logical' distinct='true' resultformat='DynamicEntities'>" +
                                    "<entity name='annotation'>" +
                                        "<attribute name='filename' />" +
                                        "<attribute name='subject' />" +
                                        "<attribute name='objectid' />" +
                                        "<attribute name='documentbody' />" +
                                        "<attribute name='annotationid' />" +
                                        "<attribute name='notetext' />" +
                                        "<filter>" +
                                            "<condition attribute='objectid' operator='eq' value='" + objectId + "'/>" +
                                        "</filter>" +
                                    "</entity>" +
                                  "</fetch>";
            MobileCRM.FetchXml.Fetch.executeFromXML(_annotationFetch, function (data) {

                if (data != null && data.length > 0) {
                    if (deleteannotations) {
                        //MobileCRM.bridge.alert("Delete Annotation: ");
                        for (var i = 0; i < data.length; i++) {
                            //Delete existing responses if answer is empty or null
                            //MobileCRM.bridge.alert("Delete Annotation: " + data[i].properties["annotationid"]);
                            MobileCRM.DynamicEntity.deleteById(
                                "annotation",
                                data[i].properties["annotationid"],
                                function () {
                                    //Do Nothing
                                },
                                function (error) {
                                    MobileCRM.bridge.alert("An error occurred: " + error);
                                }
                            );
                        }
                    }
                    else if (loadSignature) {

                        var annotationId = "";
                        var ticks = 0;

                        for (var i = 0; i < data.length; i++) {
                            if (ticks < data[i].properties["subject"].split('_')[1]) {
                                annotationId = data[i].properties["annotationid"];
                                ticks = data[i].properties["subject"].split('_')[1];
                            }                            
                        }

                        MobileCRM.DynamicEntity.loadDocumentBody("annotation", annotationId,
                            function (result) {
                                SignaturePadObjectArray[questionIndex].fromDataURL(result);
                                if (loadSignature) {
                                    LoadActionsOnLoad(questionId, false);
                                }
                            },
                            function (error) {
                                MobileCRM.bridge.alert("An error occurred: " + error);
                            }
                        );
                    }

                    if (createSignature) {
                        CreateSignatureImageAnnotation(objectId, dataUrl);
                    }
                } else {
                    if (createSignature) {
                        CreateSignatureImageAnnotation(objectId, dataUrl);
                    }
                    if (loadSignature) {
                        LoadActionsOnLoad(questionId, false);
                    }
                }
            });
        }

        //Returns formated date
        function formatDate(_date) {
            var formattedDate = "";
            if (_date != undefined && _date != null && _date != "") {
                var formattedDate = (_date.getMonth() + 1) + "/" + _date.getDate() + "/" + _date.getFullYear();

            }
            return formattedDate;
        }

        //Returns formated date and time
        function formatDateTime(_date) {
            var formattedDate = "";
            if (_date != undefined && _date != null && _date != "") {
                var formattedDate = (_date.getMonth() + 1) + "/" + _date.getDate() + "/" + _date.getFullYear() + " " + formatAMPM(_date);    // (_date.getMonth() + 1) + "/" + _date.getDate() + "/" + _date.getFullYear();

            }
            return formattedDate;
        }

        ///Returns formated date AM or PM
        function formatAMPM(date) {
            var hours = date.getHours();
            var minutes = date.getMinutes();
            var ampm = hours >= 12 ? 'PM' : 'AM';
            hours = hours % 12;
            hours = hours ? hours : 12; // the hour '0' should be '12'
            minutes = minutes < 10 ? '0' + minutes : minutes;
            var strTime = hours + ':' + minutes + ' ' + ampm;
            return strTime;
        }

        /*
       Description : Survey can taken from Conducted Survey enttiy or Account entity or Contact  or Lead.
       Behaviour when survey took from Account or Contact ot Lead
       ------------------------------------------------------------
       When user clicks on take survey button.
         Survey through Account or Contact or Lead
         -----------------------------------------
         Step 1:  Checks whether any conducted survey created on today and creator is same user and survey templateid wih same template and status code is not eq to 213020001 with respetive to contact or account or lead.
         Step 2 : If conducted survey is found then survey is going take on it otherwise new conducted survey will be created and it will be used.
         Survey through Conducted Survey
         -------------------------------
         Step 1 : Checks whether any conducted survey created on today and creator is same user and survey templateid wih same template and status code is not eq to 213020001
         Step 2 : If conducted survey is found then it will use same survey otherwise new conducted survey record will be created.

          Information : Checks Whether conducted survey exists or not. If not new conducted survey will be created
       */
        function checkConductedSurveyOnLoad() {
            var _CSXml = "<fetch version='1.0' resultformat='DynamicEntities' output-format='xml-platform' mapping='logical' distinct='true'>" +
                "<entity name='ebecssvy_conductedsurvey'>" +
                "<attribute name='ebecssvy_conductedsurveyid' />" +
                "<attribute name='ebecssvy_name' />" +
                "<attribute name='createdon' />" +
                "<attribute name='statuscode' />" +
                "<order attribute='createdon' descending='false' />" +
                "<filter type='and'>" +
                //     "<condition attribute='ebecssvy_conductedsurveyid' operator='eq' uitype='ebecssvy_conductedsurvey' value='{D63809FC-B65C-41EA-8564-0479DDFE395B}' />" +
                "<condition attribute='ebecssvy_creator' operator='eq' value='{" + _CurrentUserId + "}' />" +
                "<condition attribute='createdon' operator='today' />" +
                "<condition attribute='ebecssvy_surveytemplateid' operator='eq' uitype='ebecssvy_survey' value='{" + SurveyId + "}' />" +
                //"<condition attribute='ebecssvy_" + sourceEntityName + "id' operator='eq' uitype='" + sourceEntityName + "' value='{" + sourceEntityId + "}' />" +
                "<condition attribute='statuscode' value='213020001' operator='ne'/>" +
                "</filter>" +
                "</entity>" +
                "</fetch>";
            MobileCRM.FetchXml.Fetch.executeFromXML(_CSXml, function (data) {
                if (data != null && data.length > 0) {
                    var _conductedSurvey = data[0].id;
                    _CConductedSurveyId = _conductedSurvey
                }
                else {
                    var _today = new Date();
                    _today = formatDate(_today);
                    var _conductedsurveyRec = MobileCRM.DynamicEntity.createNew("ebecssvy_conductedsurvey");
                    var props = new Object();
                    var SurveyLookup = SurveyId ? new MobileCRM.Reference("ebecssvy_survey", SurveyId) : null;
                    props.ebecssvy_name = _CurrentUserName + " - " + _today + " - " + _surveyName;

                    props.ebecssvy_surveytemplateid = SurveyLookup;
                    //props.ebecssvy_date = new Date(_today);
                    props.ebecssvy_creator = _CurrentUserId ? new MobileCRM.Reference("systemuser", _CurrentUserId) : null;
                    _conductedsurveyRec.properties = props;
                    // ...
                    _conductedsurveyRec.save(
                        function (error) {
                            if (error) {
                                MobileCRM.bridge.alert("An error occurred: " + error);
                                removePanels();
                                //document.getElementById('Save').disabled = false;
                            }
                            else {
                                //document.getElementById('Save').disabled = false;
                                var newId = this.id;
                                var allProps = this.properties;
                                _conductedSurvey = newId;
                                _CConductedSurveyId = newId
                                // CreateResponse(_qAObj, _surveyId, _conductedSurvey);
                            }
                        });
                }
            }, function (error) {
                if (typeof alert != "undefined") {
                    MobileCRM.bridge.alert("ConductedSurvey Error : " + error);
                    removePanels();
                }
            }, null);
        }

        //To fix response double creation issue on target write answers
        function checkConductedSurvey(_qAObj, _surveyId) {
            if (_CConductedSurveyId != null) {
                CreateResponse(_qAObj, _surveyId, _CConductedSurveyId);
            }
        }        

        var CSStatusUpdationFlag = false;
        var questionInstance = null;

        //Response will be updated to conducted survey in an xml format to ebecssvy_xmlresponse field in current conducted survey
        function CreateResponse(_qaObject, _surveyId, _conductedSurveyId) {
            var _question = _qaObject.qname;
            var QuestionLookup = _qaObject.qid ? new MobileCRM.Reference("ebecssvy_questions", _qaObject.qid, _qaObject.qname) : null;
            var SurveyLookup = SurveyId ? new MobileCRM.Reference("ebecssvy_survey", SurveyId) : null;

            var _responseRec = MobileCRM.DynamicEntity.createNew("ebecssvy_responses");
            var props = new Object();
            var _Canswer = _qaObject.answer;
            if (_Canswer == "(No Name)")
                _Canswer = "";

            //MobileCRM.bridge.alert("Creating Answer : " + _qaObject.qid + " : _qaObject.qname" + _qaObject.qname + " : " + QuestionLookup);

            if (_Canswer != null && _Canswer != "" && typeof _Canswer != "undefined") {

                try {
                    var sResponseAnswer = _Canswer;
                    if (sResponseAnswer != undefined && sResponseAnswer.length > 450) {
                        sResponseAnswer = sResponseAnswer.slice(0, 447) + "...";
                    }
                    props.ebecssvy_name = sResponseAnswer;
                    var ConductedSurveyLookUp = new MobileCRM.Reference("ebecssvy_conductedsurvey", _conductedSurveyId);
                    props.ebecssvy_conductedsurveyid = ConductedSurveyLookUp;

                    props.ebecssvy_questionid = QuestionLookup;
                    props.ebecssvy_surveyid = SurveyLookup;
                    props.ebecssvy_surveyquestion = _question;
                    props.ebecssvy_surveyanswer = _Canswer;
                    props.ebecssvy_surveyanswerandid = _qaObject.lookupId; //(_qaObject.lookupId != "" && _qaObject.answer != "") ? (_qaObject.answer + "$" + _qaObject.lookupId) : _qaObject.answer;
                    //props.ebecssvy_lookuptype = _Canswer;
                    if (_qaObject.responseScore != null && _qaObject.responseScore != "") {
                        props.ebecssvy_responsescore = _qaObject.responseScore;
                    }
                    //Processing response XML
                    var _xml = "<SurveyResponse></SurveyResponse>";
                    var dom = $(_xml);
                    var xmlString = null;
                    var _xmlQuestionId = $('<SurveyQuestionId>' + _qaObject.qid + '</SurveyQuestionId>');
                    $(dom).append($(_xmlQuestionId)[0]);
                    var _xmlQuestionName = $('<SurveyQuestionName>' + _qaObject.qname + '</SurveyQuestionName>');
                    $(dom).append($(_xmlQuestionName)[0])
                    var _xmlAnswer = $('<SurveyAnswer>' + _Canswer + '</SurveyAnswer>');
                    $(dom).append($(_xmlAnswer)[0])
                    var _xmlSurveyId = $('<SurveyId>' + SurveyId + '</SurveyId>');
                    $(dom).append($(_xmlSurveyId)[0])
                    var _xmlSurveyName = $('<SurveyName>' + _surveyName + '</SurveyName>');
                    $(dom).append($(_xmlSurveyName)[0])
                    xmlString = $(dom)[0].outerHTML;

                    props.ebecssvy_xmlresponse = xmlString;
                    // ...
                    _responseRec.properties = props;
                    _responseRec.save(
                        function (error) {
                            if (error) {
                                document.getElementById('Save').disabled = false;
                                MobileCRM.bridge.alert("An error occurred: " + error);
                                removePanels();
                            }
                            else {
                                // callback is called in scope of newly created MobileCRM.DynamicEntity object; thus we can access the data using "this" keyword
                                document.getElementById('Save').disabled = false;
                                var newId = this.id;
                                var allProps = this.properties;
                                var reponseObject = new Object();
                                reponseObject.questionid = _qaObject.qid;
                                reponseObject.responseid = newId;
                                reponseObject.responsescore = _qaObject.responseScore;
                                responsesRelatedToQuestion.push(reponseObject);
                                SurveyResponses.push(_responseRec);
                                //changes
                                GetResponseId(newId);
                                //update Status to inprogress
                                //MobileCRM.bridge.alert("CreateResponse : " + reponseObject.responseid + " : reponseObject.questionid: " + reponseObject.questionid + " : " + responsesRelatedToQuestion.length);
                                if (!CSStatusUpdationFlag && statusChangeCaptured != 213020003) {//Update of Conducted Survey Status with "in Progress"
                                    updateConductedSurveyStatus(213020003);
                                    CSStatusUpdationFlag = true;
                                }

                                if (_qaObject.qtype == "signature") {
                                    ManipulateSignatureAnnotations(this.id, 0, false, true, "", _qaObject.imagedata, true);
                                }
                            }
                        });
                } catch (error) {
                    MobileCRM.bridge.alert("An error occurred: " + error);
                }
            }

            removePanels();
        }

        // Image survey view will be opened
        function OpenDataDesigner() {

            if (AppVersion != null && parseFloat(AppVersion) < 8) {
                HideorShowTab(true, "Image Survey");
                MobileCRM.bridge.alert("Tap on Image Survey");

            }
            else {
                MobileCRM.UI.EntityForm.prototype.selectTab("Image Survey", function (data) {
                    //alert("Test please igno")
                }, null);
            }
        }

        function GetResponseId(guid) {
            globalIsSaved = "true";
            IsOnload = false;
            if (guid != null) {
                removePanels();
                ShowOrHideIndicator("UnSavedDiv", "none");
                ShowOrHideIndicator("SavedDiv", "");
                if (tabIsShowDesigner == "true") {
                    $("#imgServey").css("display", "");
                    HideorShowTab(true, "Image Survey");
                }

                if (IsPerfromAction == "true") {
                    IsPerfromAction = "false";
                    performActions();
                }

            }

            if (j == Result_Tabs.length - 1) {
                document.getElementById('nextid').disabled = true;
            }
            else {
                document.getElementById('nextid').disabled = false;
            }
        }

        // Displays loading panel
        function showLoadingMessage_Process(LoadingMessage) {
            if (isFinished == true) {
            }
            else {
                var loadingPanel = "<div id='divLoadingPanel' style='background-color:#F2F2F2;  filter: alpha(opacity=70); width: 100%; height: 100%; text-align: center; display: block; position: absolute; top:0px; z-index:9999;'>" +
                    "</div><div id='loadingImg' style='position:absolute; top:47%; left:45%; z-index:9999; width: auto; text-align: center; padding: 0px;' ><img src='progress.gif' position='absolute' top:'0' bottom='0' margin='auto'>" + //background: #fff
                    "<br /><label id='errorPostingLoadingPanelText' Text='Error in Processing...' style='font-size:12px; font-weight: bold;padding: 15px;'>Processing...</label></div>";

                $(loadingPanel).prependTo("body");
            }
        }

        function ShowOrHideIndicator(_iId, _isShow) {
            if ($("#" + _iId).length > 0)
                $("#" + _iId).css("display", _isShow);
        }
        /*
         Description : Conducted survey can also perform child survey. A conducted survey can be predictes as child if its ebecssvy_parentconductedsurvey attribute contains parent conducted survey information
         */
        function retrieveChildSurveyData(questionIndex) {

            var gridName = "mainChildSurveyGrid" + questionIndex;

            $("#" + gridName).empty();

            var dynamicChildRecodsGrid = null;
            var childSurveyData = new Array();
            MobileCRM.UI.EntityForm.requestObject(function (entityForm) {
                var childSurveyFetchXml = "<fetch version='1.0' output-format='xml-platform' mapping='logical' distinct='false'  resultformat='DynamicEntities'>" +
                    "<entity name='ebecssvy_conductedsurvey'>" +
                    "<attribute name='ebecssvy_conductedsurveyid' />" +
                    "<attribute name='ebecssvy_name' />" +
                    "<attribute name='ebecssvy_surveytemplateid' />" +
                    "<attribute name='ebecssvy_parentconductedsurvey' />" +
                    "<attribute name='createdon' />" +
                    "<attribute name='ebecssvy_creator' />" +
                    "<attribute name='ebecssvy_order' />" +
                    "<attribute name='statuscode' />" +
                    "<order attribute='ebecssvy_order' descending='false' />" +
                    "<filter type='and'>" +
                    "<condition attribute='ebecssvy_parentconductedsurvey' operator='eq'  value='{" + entityForm.entity.id + "}' />" +
                    //"<condition attribute='ebecssvy_surveytemplateid'  operator='eq'  value='{" + surveyTempalteId + "}' />" +//ebecssvy_surveytemplateid
                    "</filter>" +
                    "</entity>" +
                    "</fetch>";

                MobileCRM.FetchXml.Fetch.executeFromXML(childSurveyFetchXml, function (data) {
                    if (data != null && data.length > 0) {
                        //Assigining value to chils survey count after refresh the grid
                        //This will maintain the order
                        childSurveyCount = data.length;
                        //showLoadingMessage_Process("Child survey are loading");
                        //var index = childSurveyData.length;
                        for (var i = 0; i < data.length; i++) {
                            var recordData = new Array();
                            recordData = { index: i, parentRecordId: "", csId: "", csName: "", csTemplateName: "", csTemplateId: "", createdBy: "" };//data[Actionsindex].properties["ebecssvy_gotonextquestion"].id primaryName
                            recordData.parentRecordId = data[i].properties["ebecssvy_parentconductedsurvey"] != null ? data[i].properties["ebecssvy_parentconductedsurvey"].id : null;
                            recordData.csId = data[i].properties["ebecssvy_conductedsurveyid"] != null ? data[i].properties["ebecssvy_conductedsurveyid"] : null;
                            recordData.csName = data[i].properties["ebecssvy_name"] != null ? data[i].properties["ebecssvy_name"] : null;
                            recordData.csTemplateId = data[i].properties["ebecssvy_surveytemplateid"] != null ? data[i].properties["ebecssvy_surveytemplateid"].id : null;
                            recordData.csTemplateName = data[i].properties["ebecssvy_surveytemplateid"] != null ? data[i].properties["ebecssvy_surveytemplateid"].primaryName : null;
                            recordData.createdBy = data[i].properties["ebecssvy_creator"] != null ? data[i].properties["ebecssvy_creator"].primaryName : null;
                            recordData.order = data[i].properties["ebecssvy_order"] != null ? data[i].properties["ebecssvy_order"] : 1;
                            recordData.statuscode = data[i].properties["statuscode"] != null ? data[i].properties["statuscode"] : null;
                            childSurveyData.push(recordData);

                        }

                        dynamicChildRecodsGrid =

                            " <div id='childSurveyDataDivId' style='width:100%; height: 300px; overflow: auto;'>" +
                            "   <table class='survey_tbl' id='CSDataTableId' style='width: 100%;' cellpadding='3' cellspacing='0'> <tr>" +
                            "<th>Order</th> <th> Name </th> <th> Status </th>  <th>  <button style='margin-right: 15px; float:right;' gridName='" + questionIndex + "' id='" + questionIndex + "' value='Refresh' onclick='Click(this)'>  Refresh</button></th>" +

                            " </tr>";


                        if (childSurveyData.length > 0) {
                            childSurveyData.sort(function (a, b) {
                                return parseInt(a.order) - parseInt(b.order);
                            });
                            for (var count = 0; count < childSurveyData.length; count++) {
                                var statusObj = $.grep(SurveyStatus, function (obj) { return obj.value == childSurveyData[count].statuscode });
                                dynamicChildRecodsGrid = dynamicChildRecodsGrid + "<tr><td> <label>" + childSurveyData[count].order + "</label></td><td><div class='text_overflow'><label id='" + childSurveyData[count].csId + "'  class='Cust_Row' style=' color: black;cursor:pointer;'  onclick='openRecord(this)'>" + childSurveyData[count].csName + "</label> </div></td><td> <label>" + statusObj[0].DisplayName + "</label></td> </tr>";
                            }
                            dynamicChildRecodsGrid = dynamicChildRecodsGrid + " </table>" +
                                "  </div>";
                        }
                        else {
                            dynamicChildRecodsGrid = dynamicChildRecodsGrid + " <tr><td> No Reocrds..</td></tr>" +
                                " </table>" +
                                "  </div>";
                        }
                        $("#" + gridName).append(dynamicChildRecodsGrid);

                    }
                    else {

                        dynamicChildRecodsGrid =

                            " <div id='childSurveyDataDivId' style='width: 100%; height: 300px; overflow: auto;'>" +
                            "   <table class='survey_tbl' id='CSDataTableId' style='width: 100%;' cellpadding='3' cellspacing='0'> <tr>" +
                            "<th>Order</th> <th> Name </th> <th> Status </th>  <th>  <button style='margin-right: 15px; float:right;' gridName='" + questionIndex + "' id='" + questionIndex + "' value='Refresh' onclick='Click(this)'>  Refresh</button></th>" +

                            " </tr>" +
                            "<tr><td>No Records Found.</td></tr>" +
                            " </table>" +
                            "  </div>";
                        $("#" + gridName).append(dynamicChildRecodsGrid);
                        removePanels();
                    }

                }, function (error) {
                    if (typeof alert != "undefined") {
                        MobileCRM.bridge.alert(" executeAction Error : " + error);
                        removePanels();
                    }
                }, null);

                //mainChildSurveyGrid

            }, function (err) {
                MobileCRM.bridge.alert('An error occurred: ' + err);
                removePanels();
            }, null);

        }

        // Used to refresh child survey grid
        function Click(context) {
            if (context.id != "") {
                retrieveChildSurveyData(context.id);
            }
        }

        // Used to open child survey records when user clicks on appropriate child survey on grid.
        function openRecord(event) {
            var conductedSurvey = new MobileCRM.FetchXml.Entity("ebecssvy_conductedsurvey");
            conductedSurvey.addAttribute("ebecssvy_conductedsurveyid");
            conductedSurvey.filter = new MobileCRM.FetchXml.Filter();
            conductedSurvey.filter.where("ebecssvy_conductedsurveyid", "eq", event.id);
            var fetch = new MobileCRM.FetchXml.Fetch(conductedSurvey, 1);
            fetch.execute(
                "Array",  // Take the results as an array of arrays with field values
                function (res) {
                    MobileCRM.UI.FormManager.showEditDialog("ebecssvy_conductedsurvey", res[0][0], null);
                },
                MobileCRM.bridge.alert
            );
        }

        //While on save of the record
        function onSave() {
            MobileCRM.UI.EntityForm.onSave(
                function (entityForm) {
                    var statusCode = null;
                    if (entityForm !== null && typeof entityForm !== "undefined" && entityForm.entity !== null && typeof entityForm.entity !== "undefined" && entityForm.entity.properties["statuscode"] !== null && typeof entityForm.entity.properties["statuscode"] !== "undefined") {
                        statusCode = entityForm.entity.properties["statuscode"];
                    }
                    if (statusCode !== null) {
                        if (statusCode == 213020003 || statusCode == 213020002 || statusCode == 213020000) //in pr NOT ST schedu
                            HideorShowTab(true, "Take Survey");
                        if (entityForm.entity.isNew) {
                            showLoadingMessage_Process();
                            //if (entityForm.entity.isOnline)
                            //    validateLicenseOnline();
                            //else
                            //    validateLicenseOffline();
                        }
                    }
                    else {
                        HideorShowTab(false, "Take Survey");
                    }
                    // Return false to ignore all changes
                    return true;
                },
                true,
                null
            );
        }

        /****************************************************************************
        * CalculateIndividualAnswerScore *
        * This function used to calculate the individual score of the each question *
        *****************************************************************************/
        function CalculateIndividualAnswerScore(questionId, answer) {

            var score = 0;
            var question = null;
            var weight = 0;
            if (questionId != null && typeof questionId != "undefined" && answer != "" && answer != null && typeof answer != "undefined" && QuestionsArray != null && QuestionsArray.length > 0) {

                for (var i = 0; i < QuestionsArray.length; i++) {
                    if (QuestionsArray[i].properties["ebecssvy_questionsid"] == questionId) {
                        question = QuestionsArray[i];
                        break;
                    }
                }

                if (question != null && question != "undefined" && question.properties["ebecssvy_scoring"] != null && question.properties["ebecssvy_scoring"]
                    && question.properties["ebecssvy_attributetype"] != null && typeof question.properties["ebecssvy_attributetype"] != "undefined"
                    && (question.properties["ebecssvy_attributetype"] == QuestionTypes.CheckBox || question.properties["ebecssvy_attributetype"] == QuestionTypes.GraphicalList
                        || question.properties["ebecssvy_attributetype"] == QuestionTypes.Integer || question.properties["ebecssvy_attributetype"] == QuestionTypes.List
                        || question.properties["ebecssvy_attributetype"] == QuestionTypes.MultiCheckBox || question.properties["ebecssvy_attributetype"] == QuestionTypes.TrueFalse || question.properties["ebecssvy_attributetype"] == QuestionTypes.Decimal)) {

                    weight = question.properties["ebecssvy_weight"];

                    if (Result_Ans != null && Result_Ans.length > 0) {

                        var answerItem = null;
                        for (var i = 0; i < Result_Ans.length; i++) {
                            //MobileCRM.bridge.alert("QUS: " + Result_Ans[i].properties["ebecssvy_name"].toString().replace(symbol, "").toUpperCase() + " Given Answer: " + answer.toString().replace(symbol, "").toUpperCase());
                            if (Result_Ans[i].properties["ebecssvy_questionsid"].id == questionId && Result_Ans[i].properties["ebecssvy_name"].toString().toUpperCase() == answer.toString().toUpperCase()) {
                                //MobileCRM.bridge.alert("Answer: " + answer + " Answer From Answers: " + Result_Ans[i].properties["ebecssvy_name"]);
                                answerItem = Result_Ans[i];
                                break;
                            }
                        }

                        if (answerItem != null && typeof answerItem != "undefined" && answerItem.properties["ebecssvy_scorevalue"] != null
                            && typeof answerItem.properties["ebecssvy_scorevalue"] != "undefined" && answerItem.properties["ebecssvy_scorevalue"] != 0) {

                            score = weight * answerItem.properties["ebecssvy_scorevalue"];

                            //MobileCRM.bridge.alert("Answer: " + answer + " Individual Score: " + score + " Weight: " + weight + " Score Value: " + answerItem.properties["ebecssvy_scorevalue"]);
                        }
                    }
                }
            }

            return score;
        }

        /*******************************************************************************
        * CreateCaptureScoreResponse *
        * This function used to create survey response for the capture score questions *
        ********************************************************************************/
        function CreateCaptureScoreResponse() {
            var tab = null;
            var createResponse = false;
            var updatedResponse = null;

            if (Result_Tabs !== null && typeof Result_Tabs !== "undefined" && QuestionsArray != null && typeof QuestionsArray != "undefined" && _CConductedSurveyId != null) {

                tab = Result_Tabs[j];

                var question = null;
                question = $.grep(QuestionsArray, function (e) { return e.properties["ebecssvy_attributetype"] == QuestionTypes.CaptureScore && e.properties["ebecssvy_tabsid"].id == tab.properties["ebecssvy_tabsid"] });

                if (question != null && typeof question != "undefined" && question.length > 0 && question[0].properties["ebecssvy_questionsid"] != null) {

                    if (responsesRelatedToQuestion != null && responsesRelatedToQuestion.length > 0) {
                        var existingResonse = $.grep(responsesRelatedToQuestion, function (e) { return e.questionid == question[0].properties["ebecssvy_questionsid"] });

                        //$.each(responsesRelatedToQuestion, function () { MobileCRM.bridge.alert("responseid: " + this.responseid + " Question Id: " + this.questionid + " Question: " + question[0].properties["ebecssvy_questionsid"]); })

                        if (existingResonse != null && typeof existingResonse != "undefined" && existingResonse.length > 0) {
                            createResponse = false;
                            updatedResponse = existingResonse[0];
                        } else {
                            createResponse = true;
                        }
                    } else {
                        createResponse = true;
                    }

                    var score = GenerateTabTotalScoreByRule();
                    var QuestionLookup = question[0].properties["ebecssvy_questionsid"] ? new MobileCRM.Reference("ebecssvy_questions", question[0].properties["ebecssvy_questionsid"], question[0].properties["ebecssvy_name"]) : null;
                    var SurveyLookup = SurveyId ? new MobileCRM.Reference("ebecssvy_survey", SurveyId) : null;
                    var ConductedSurveyLookUp = new MobileCRM.Reference("ebecssvy_conductedsurvey", _CConductedSurveyId);
                    var props = new Object();

                    props.ebecssvy_conductedsurveyid = ConductedSurveyLookUp;
                    props.ebecssvy_questionid = QuestionLookup;
                    props.ebecssvy_surveyid = SurveyLookup;
                    props.ebecssvy_surveyquestion = question[0].properties["ebecssvy_name"];
                    props.ebecssvy_surveyanswer = score;
                    props.ebecssvy_name = score + "";

                    var _xml = "<SurveyResponse></SurveyResponse>";
                    var dom = $(_xml);
                    var xmlString = null;
                    var _xmlQuestionId = $('<SurveyQuestionId>' + question[0].properties["ebecssvy_questionsid"] + '</SurveyQuestionId>');
                    $(dom).append($(_xmlQuestionId)[0]);
                    var _xmlQuestionName = $('<SurveyQuestionName>' + question[0].properties["ebecssvy_name"] + '</SurveyQuestionName>');
                    $(dom).append($(_xmlQuestionName)[0])
                    var _xmlAnswer = $('<SurveyAnswer>' + score + '</SurveyAnswer>');
                    $(dom).append($(_xmlAnswer)[0])
                    var _xmlSurveyId = $('<SurveyId>' + SurveyId + '</SurveyId>');
                    $(dom).append($(_xmlSurveyId)[0])
                    var _xmlSurveyName = $('<SurveyName>' + _surveyName + '</SurveyName>');
                    $(dom).append($(_xmlSurveyName)[0])
                    xmlString = $(dom)[0].outerHTML;
                    props.ebecssvy_xmlresponse = xmlString;

                    if (createResponse) {
                        var _responseRec = MobileCRM.DynamicEntity.createNew("ebecssvy_responses");
                        _responseRec.properties = props;
                        _responseRec.save(
                            function (error) {
                                if (error) {
                                    document.getElementById('Save').disabled = false;
                                    MobileCRM.bridge.alert("An error occurred: " + error);
                                }
                                else {
                                    // callback is called in scope of newly created MobileCRM.DynamicEntity object; thus we can access the data using "this" keyword
                                    document.getElementById('Save').disabled = false;
                                    var newId = this.id;
                                    var allProps = this.properties;
                                    var reponseObject = new Object();
                                    reponseObject.questionid = question[0].properties["ebecssvy_questionsid"];
                                    reponseObject.responseid = newId;
                                    reponseObject.responsescore = 0;
                                    responsesRelatedToQuestion.push(reponseObject);
                                }
                            });
                    } else {
                        var _responseRec = new MobileCRM.DynamicEntity("ebecssvy_responses", updatedResponse.responseid);
                        _responseRec.properties = props;
                        _responseRec.save(
                            function (error) {
                                if (error) {
                                    document.getElementById('Save').disabled = false;
                                    MobileCRM.bridge.alert("An error occurred: " + error);
                                }
                                else {
                                    // callback is called in scope of newly created MobileCRM.DynamicEntity object; thus we can access the data using "this" keyword
                                    document.getElementById('Save').disabled = false;
                                    var newId = this.id;
                                    var allProps = this.properties;
                                }
                            });
                    }
                }
            }
        }

        /*******************************************************
        * ShowFinalSurveyScoreButton *
        * This function determine show final score button or not *
        ********************************************************/
        function ShowFinalSurveyScoreButton() {

            //If survey not retrieved early then retrieve it again
            if (surveyTemplate == null || typeof surveyTemplate == "undefined" || surveyTemplate.properties == null) {
                surveyTemplate = getSurveyTemplate(SurveyId);
            }

            if (surveyTemplate != null && typeof surveyTemplate != "undefined" && surveyTemplate.properties["ebecssvy_scoring"] != null
                && surveyTemplate.properties["ebecssvy_scoringrule"] != null && surveyTemplate.properties["ebecssvy_scoring"] && (Result_Tabs.length - 1) == j) {

                if ($("#showfinalscoreid") != null) {
                    $("#showfinalscoreid").show();
                }
            } else {

                if ($("#showfinalscoreid") != null) {
                    $("#showfinalscoreid").hide();
                }
            }
        }

       /*******************************************************************
        * CalculateCurrentTabScore *
        * This method used to calculate score value of individual question *
        ********************************************************************/
        function CalculateCurrentTabScore() {
            var score = 0;
            var Answer = "";
            var scoreValue = 0;
            var totalNumberQuestionsHasScoring = 0;
            var scoringQuestion = false;
            var weight = 0;
            var attributeTypeVal = 0;

            var scoreQuestions = $.grep(QuestionsArray, function (e) {
                return e.properties["ebecssvy_scoring"] != null && (e.properties["ebecssvy_attributetype"] == QuestionTypes.List || e.properties["ebecssvy_attributetype"] == QuestionTypes.GraphicalList
                    || e.properties["ebecssvy_attributetype"] == QuestionTypes.Integer || e.properties["ebecssvy_attributetype"] == QuestionTypes.CheckBox
                    || e.properties["ebecssvy_attributetype"] == QuestionTypes.MultiCheckBox || e.properties["ebecssvy_attributetype"] == QuestionTypes.TrueFalse || e.properties["ebecssvy_attributetype"] == QuestionTypes.Decimal)
            });

            $.each(scoreQuestions, function () {
                Answer = "";
                scoreValue = 0;
                var question = this;
                //If question has scoring enabled then calculate it for scoring
                ++totalNumberQuestionsHasScoring;

                if (question.properties["ebecssvy_weight"] != null && question.properties["ebecssvy_weight"] != 0) {

                    weight = question.properties["ebecssvy_weight"];
                    attributeTypeVal = question.properties["ebecssvy_attributetype"];

                    switch (attributeTypeVal) {
                        case QuestionTypes.Decimal:
                            var item = $("#QAConatiner div[id='" + question.id + "']");
                            if (item.length > 0) {
                                var childElement = item.find('input');
                                Answer = childElement.val();
                                Answer = Answer.toString().replace(ThousandSeperator, "").replace(DecimalSeperator, ".");
                            }
                            break;
                        case QuestionTypes.Integer:
                            var item = $("#QAConatiner div[id='" + question.id + "']");
                            if (item.length > 0) {
                                var childElement = item.find('input');
                                Answer = childElement.val();
                                Answer = Answer.toString().replace(ThousandSeperator, "");
                            }
                            break;
                        case QuestionTypes.List:
                            var item = $("#QAConatiner div[id='" + question.id + "']");
                            Answer = item.find("select option:selected").text();
                            Answer = (Answer == "---Select---") ? "" : Answer;
                            break;
                        case QuestionTypes.GraphicalList:
                            if (GLArray.length > 0) {
                                var QidIndex = findGLIndex(GLArray, "GraphicalList" + question.id);
                                if (QidIndex != -1) {
                                    Answer = GLArray[QidIndex].GLAnswer;
                                }
                            }
                            break;
                        case QuestionTypes.CheckBox:
                            var item = $("#QAConatiner div[id='" + question.id + "']");
                            var childElement = item.find('input');
                            Answer = childElement.prop('checked').toString();
                            break;
                        case QuestionTypes.MultiCheckBox:
                            var item = $("#QAConatiner div[id='" + question.id + "']");
                            var inputControls = item.next().find("input:checked").parent();
                            $.each(inputControls, function () {
                                var _label = $(this).find('label')[0].textContent;
                                var answerItem = null;
                                var resultLength = Result_Ans.length;
                                for (var i = 0; i < resultLength; i++) {
                                    if (Result_Ans[i].properties["ebecssvy_questionsid"].id == question.id && Result_Ans[i].properties["ebecssvy_name"] == _label) {
                                        answerItem = Result_Ans[i];
                                        break;
                                    }
                                }

                                if (answerItem != null && typeof answerItem != "undefined" && answerItem.properties["ebecssvy_scorevalue"] != null
                                    && typeof answerItem.properties["ebecssvy_scorevalue"] != "undefined" && answerItem.properties["ebecssvy_scorevalue"] != 0) {

                                    scoreValue = answerItem.properties["ebecssvy_scorevalue"];
                                    score = score + (weight * scoreValue);
                                }
                            });
                            break;
                        case QuestionTypes.TrueFalse:
                            var item = $("#QAConatiner div[id='" + question.id + "']");
                            if (item.next().find("input:checked").length > 0) {
                                Answer = item.next().find("input:checked").val();
                            }
                            else {
                                Answer = "";
                            }
                            break;
                        default: break;
                    }
                    if ((Answer != "" && attributeTypeVal != QuestionTypes.MultiCheckBox)) {
                        if (Result_Ans != null && Result_Ans.length > 0) {
                            var answerItem = null;
                            var resultLength = Result_Ans.length;
                            if (attributeTypeVal == QuestionTypes.Decimal) {
                                for (var i = 0; i < resultLength; i++) {
                                    if (Result_Ans[i].properties["ebecssvy_questionsid"].id == question.id && parseFloat(Result_Ans[i].properties["ebecssvy_name"]) == parseFloat(Answer)) {
                                        answerItem = Result_Ans[i];
                                        break;
                                    }
                                }
                            }
                            else {
                                for (var i = 0; i < resultLength; i++) {
                                    if (Result_Ans[i].properties["ebecssvy_questionsid"].id == question.id && Result_Ans[i].properties["ebecssvy_name"].toUpperCase() === Answer.toString().toUpperCase()) {
                                        answerItem = Result_Ans[i];
                                        break;
                                    }
                                }
                            }
                            if (answerItem != null && typeof answerItem != "undefined" && answerItem.properties["ebecssvy_scorevalue"] != null
                                && typeof answerItem.properties["ebecssvy_scorevalue"] != "undefined" && answerItem.properties["ebecssvy_scorevalue"] != 0) {
                                scoreValue = answerItem.properties["ebecssvy_scorevalue"];
                            }
                        }

                        score = score + (weight * scoreValue);
                        //Reset Answer and score value to avoid calculate same score for multiple times
                        Answer = "";
                        scoreValue = 0;
                    }
                }

            });

            var obj = new Object();

            obj.score = score;
            obj.totalNumberQuestionsHasScoring = totalNumberQuestionsHasScoring;

            return obj;
        }

        /*********************************************************
        * GenerateTabTotalScoreByRule *
        * Generate Tab Total Score By Configured Rule in the Tab *
        **********************************************************/
        function GenerateTabTotalScoreByRule() {
            var allAnswerScore = 0;
            var totalNumberQuestionsHasScoring = 0;
            var tab = null;
            var tabScoringRule = 0;
            var surveyScore = 0;

            if (Result_Tabs !== null && typeof Result_Tabs !== "undefined") {

                tab = Result_Tabs[j];

                //MobileCRM.bridge.alert("Inside Calculation");

                //if tab scoring rule = 'no scoring (tab.ebecssvy_scoringrule.Value != 213020002)' no on-the-fly calculation
                if (tab != null && typeof tab != "undefined" && tab.properties["ebecssvy_scoring"] != null && typeof tab.properties["ebecssvy_scoring"] != "undefined"
                    && tab.properties["ebecssvy_scoring"] && tab.properties["ebecssvy_scoringrule"] != null && typeof tab.properties["ebecssvy_scoringrule"] != "undefined"
                    && tab.properties["ebecssvy_scoringrule"] != 213020002) {

                    tabScoringRule = tab.properties["ebecssvy_scoringrule"];
                    var result = CalculateCurrentTabScore();

                    if (result != null) {
                        allAnswerScore = result.score;
                        totalNumberQuestionsHasScoring = result.totalNumberQuestionsHasScoring;
                    }
                }
            }

            //MobileCRM.bridge.alert("allAnswerScore: " + allAnswerScore + "totalNumberQuestionsHasScoring: " + totalNumberQuestionsHasScoring);

            //Sum of all answer values
            if (tabScoringRule == 213020000) {
                surveyScore = allAnswerScore.toFixed(2);
            }
            //Sum of all values
            else if (tabScoringRule == 213020001 && totalNumberQuestionsHasScoring != 0) {
                surveyScore = (allAnswerScore / totalNumberQuestionsHasScoring).toFixed(2);
            }
            else if (tabScoringRule == 213020002) {
                surveyScore = "Scoring disable for this tab";
            }
            else {
                surveyScore = 0;
            }

            return surveyScore;
        }

        /*******************************************************
        * CalculateTotalScore *
        * Calculate total survey score value based on confguration and rules *
        ********************************************************/
        function CalculateTotalScore() {
            var allAnswerScore = 0;
            var totalNumberQuestionsHasScoring = 0;

            scoreValues = [];

            if (Result_Tabs !== null && typeof Result_Tabs !== "undefined") {

                for (var tabIndex = 0; tabIndex < Result_Tabs.length; tabIndex++) {

                    var tab = Result_Tabs[tabIndex];

                    if (tab.properties["ebecssvy_scoring"] != null && typeof tab.properties["ebecssvy_scoring"] != "undefined" && tab.properties["ebecssvy_scoring"]) {

                        //Current tab
                        if (tabIndex == j) {
                            var currentTabScore = CalculateCurrentTabScore();

                            if (currentTabScore != null && typeof currentTabScore != "undefined") {

                                var scoreObject = new Object();
                                scoreObject.TabId = tab.properties["ebecssvy_tabsid"];
                                scoreObject.NumberofQuestions = currentTabScore.totalNumberQuestionsHasScoring;
                                scoreObject.QuestionScore = currentTabScore.score;

                                scoreValues.push(scoreObject);
                            }

                            //MobileCRM.bridge.alert("currentTabScore : " + currentTabScore);

                            continue;
                        }

                        var questions = $.grep(tabQuestions, function (e) { return e.tabid == tab.properties["ebecssvy_tabsid"]; });

                        //reset total number of questions and all answer score
                        totalNumberQuestionsHasScoring = 0;
                        allAnswerScore = 0;

                        if (questions !== null && typeof questions !== "undefined" && questions.length > 0) {

                            for (var questionIndex = 0; questionIndex < questions.length; questionIndex++) {

                                var question = questions[questionIndex];

                                if (question != null && typeof question != "undefined" && question.scoring) {

                                    //If question has scoring enabled then calculate it for scoring
                                    ++totalNumberQuestionsHasScoring;

                                    var responses = $.grep(responsesRelatedToQuestion, function (e) { return e.questionid == question.questionid });

                                    if (responses != null && typeof responses != "undefined" && responses.length > 0 && responses[0].responsescore != null && responses[0].responsescore != "" && typeof responses[0].responsescore != "undefined") {
                                        allAnswerScore += responses[0].responsescore;
                                        //MobileCRM.bridge.alert(" Response Score: " + responses[0].responsescore);
                                    }
                                }
                            }
                        }

                        //MobileCRM.bridge.alert("Tab: " + tab.properties["ebecssvy_name"] + " >> NumberofQuestions: " + totalNumberQuestionsHasScoring + " >> QuestionScore: " + allAnswerScore);

                        var obj = new Object();

                        obj.TabId = tab.properties["ebecssvy_tabsid"];
                        obj.NumberofQuestions = totalNumberQuestionsHasScoring;
                        obj.QuestionScore = allAnswerScore;

                        scoreValues.push(obj);
                    }
                }
            }
        }

        /********************************************************************
        * GenerateSurveyTotalScoreByRule *
        * Generate Final Score Value based on rule configured in the survey *
        *********************************************************************/
        function GenerateSurveyTotalScoreByRule(isSave) {

            var surveyScore = 0;

            CalculateTotalScore();

            if (scoreValues != null && scoreValues.length > 0) {

                var numberOfQuestions = 0;
                var numberOfTabs = 0;
                var sumOfAllAnswers = 0;

                //$.each(scoreValues, function () { MobileCRM.bridge.alert("Tab Id: " + this.TabId + " Number Of Questions: " + this.NumberofQuestions + " Question Score: " + this.QuestionScore); })

                $.each(scoreValues, function () {
                    ++numberOfTabs;

                    if (this.NumberofQuestions != null) {
                        numberOfQuestions += this.NumberofQuestions;
                    }

                    if (this.QuestionScore != null) {
                        sumOfAllAnswers += this.QuestionScore;
                    }
                });

                //Sum of all answer values
                //Sum of all answer values (considering weight)
                if (surveyTemplate.properties["ebecssvy_scoringrule"] == 213020000) {
                    surveyScore = sumOfAllAnswers;
                }
                //Sum of tab values
                //Sum of tab values (considering weight) divided by number of tabs
                else if (surveyTemplate.properties["ebecssvy_scoringrule"] == 213020001) {
                    if (numberOfTabs != 0) {
                        surveyScore = (sumOfAllAnswers / numberOfTabs).toFixed(2);
                        //MobileCRM.bridge.alert("Sum Of Answers: " + sumOfAllAnswers + " Number of Tabs: " + numberOfTabs);
                    }
                }
                //Sum of all tabs
                //Sum of all tabs (considering weight) divided by a specified integer
                else if (surveyTemplate.properties["ebecssvy_scoringrule"] == 213020002) {

                    if (surveyTemplate.properties["ebecssvy_scoredivisor"] != null && typeof surveyTemplate.properties["ebecssvy_scoredivisor"] != "undefined") {
                        var devisor = parseInt(surveyTemplate.properties["ebecssvy_scoredivisor"], 10);

                        //need to implement
                    }
                }
                //Sum of questions
                //Sum of questions (considering weight) divided by the number of questions.
                else if (surveyTemplate.properties["ebecssvy_scoringrule"] == 213020003) {
                    if (numberOfQuestions != 0) {
                        surveyScore = (sumOfAllAnswers / numberOfQuestions).toFixed(2);
                    }
                }
                //Sum of all questions
                //Sum of all questions (considering weight) divided by a specified integer
                else if (surveyTemplate.ebecssvy_scoringrule.Value == 213020004) {

                    if (surveyTemplate.properties["ebecssvy_scoredivisor"] != null && typeof surveyTemplate.properties["ebecssvy_scoredivisor"] != "undefined") {

                        var devisor = parseInt(surveyTemplate.properties["ebecssvy_scoredivisor"], 10);

                        if (devisor != 0) {
                            surveyScore = (sumOfAllAnswers / devisor).toFixed(2);
                        }
                    }
                }
            }

            if (isSave) {
                var CCSurvey = new MobileCRM.DynamicEntity("ebecssvy_conductedsurvey", _CConductedSurveyId);
                var props = CCSurvey.properties;
                //MobileCRM.bridge.alert("Final Score: " + parseFloat(surveyScore).toFixed(2));
                props.ebecssvy_finalscore = parseFloat(surveyScore).toFixed(2);
                CCSurvey.save(
                    function (error) {
                        if (error) {
                            MobileCRM.bridge.alert("An error occurred: " + error);
                        }
                    });

            } else {
                MobileCRM.bridge.alert("Your Final Score is: " + surveyScore);
            }
        }

        /*******************************************************
        * ShowTabScore *
        * Show tab score in web resource based on the configuration *
        ********************************************************/
        function ShowTabScore() {

            $('#lblScoring').hide();
            $('#lblScoringValue').hide();

            if (Result_Tabs != null && Result_Tabs.length > 0 && Result_Tabs[j] != null && typeof Result_Tabs[j] != "undefined") {

                var tab = Result_Tabs[j];

                if (tab.properties["ebecssvy_showtabscore"] && tab.properties["ebecssvy_scoring"]) {

                    //MobileCRM.bridge.alert("Inside if 2");

                    var score = GenerateTabTotalScoreByRule();

                    //MobileCRM.bridge.alert("Score: " + score);

                    $("#lblScoringValue").empty();
                    $("#lblScoringValue").append(score);


                    $('#lblScoring').show();
                    $('#lblScoringValue').show();

                    $('#divScoring').show();
                }
            }
        }

        /*******************************************************
        * ShowFinalSurveyScore *
        * Show final score as an alert *
        ********************************************************/
        function ShowFinalSurveyScore(isSave) {

            if (SurveyId != null && SurveyId != "") {

                //If survey not retrieved early then retrieve it again
                if (surveyTemplate == null || typeof surveyTemplate == "undefined" || surveyTemplate.properties == null) {
                    surveyTemplate = getSurveyTemplate(SurveyId);
                }

                //Proceed only if enable scoring in survey level and set scoring rule
                if (surveyTemplate != null && typeof surveyTemplate != "undefined" && surveyTemplate.properties["ebecssvy_scoring"] != null
                    && surveyTemplate.properties["ebecssvy_scoringrule"] != null && surveyTemplate.properties["ebecssvy_scoring"]) {

                    if (Result_Tabs !== null && typeof Result_Tabs !== "undefined") {

                        var tabsNotLoaded = [];

                        //According to current implementation it retrieve current tab related questions only
                        //to calculate final score need to retrieve all questions related to the all tabs
                        for (var tabIndex = 0; tabIndex < Result_Tabs.length; tabIndex++) {

                            var tab = Result_Tabs[tabIndex];

                            if (tab.properties["ebecssvy_scoring"] != null && typeof tab.properties["ebecssvy_scoring"] != "undefined" && tab.properties["ebecssvy_scoring"]) {
                                var questions = $.grep(tabQuestions, function (e) { return e.tabid == tab.properties["ebecssvy_tabsid"]; });

                                if (questions == null || questions.length == 0) {
                                    tabsNotLoaded.push(tab);
                                }
                            }
                        }

                        if (tabsNotLoaded != null && tabsNotLoaded.length != 0) {
                            //MobileCRM.bridge.alert("Not Loaded Tabs");
                            GetQuestionsForSurveyScore(tabsNotLoaded, isSave);
                        } else {
                            //MobileCRM.bridge.alert("All Tabs Loaded");
                            GenerateSurveyTotalScoreByRule(isSave);
                        }
                    }
                }
            }
        }

        /*******************************************************
        * ShowFinalSurveyScoreOnClick *
        * Show final score as an alert *
        ********************************************************/
        function ShowFinalSurveyScoreOnClick() {
            MobileCRM.bridge.alert("Warning: Calculate final score will take some time.");
            ShowFinalSurveyScore(false);
        }

        /*******************************************************
        * ScoreTracking *
        * Show Tab Score based on the selection of ScoreTracking button *
        ********************************************************/
        function ScoreTracking() {
            if ($("#scoreTrackingSwitch") != null && $("#scoreTrackingSwitch").is(':checked')) {
                ShowTabScore();
            } else {
                $('#lblScoring').hide();
                $('#lblScoringValue').hide();
            }
        }

        /*******************************************************
        * ScoreTracking *
        * Show Tab Score after get user confirmation  *
        ********************************************************/
        function ScoreTrackingOnChange() {

            if ($("#scoreTrackingSwitch") != null && $("#scoreTrackingSwitch").is(':checked')) {
                MobileCRM.bridge.alert("Warning: Enabling Score Tracking will be reduce the performance");
                $("#scoreTrackingSwitch").prop('checked', true);
            }

            ScoreTracking();
        }

    </script>
</head>
<body onload="OnLoad()">
    <div class="container">       
        <div class="row header-mn">
            <div id="SurveyName" class="col-11  title "></div>
           <!--<div style="display: none;" id="SavedDiv">
                <img src="GreenIndicator.png" style="max-width: 25px; vertical-align: middle;" />
            </div>
            <div style="display: none;" id="UnSavedDiv">
                <img src="RedIndicator.gif" style="max-width: 25px; vertical-align: middle;" />
            </div>-->
        </div>                                                                                                   
        <div class="row" id="tdSurveyTracking">
            <div class="col-sm-12 pt-3 text-right">
                <label class="switch" for="scoreTrackingSwitch">
                    <input type="checkbox" name="scoreTrackingSwitch" id="scoreTrackingSwitch" onchange="ScoreTrackingOnChange()">
                    <span class="slider round"></span>
                </label>
            </div>                        
        </div>
        <div class='col-sm-6' id="imgServey">
            <button style="margin-right: 20px; min-width: 120px;" value="Next" onclick="OpenDataDesigner()">
                Load Design
            </button>
        </div>
        <div style="clear: both;"></div>
        <br class="mb-lg-5" />
        <div class="sas-progressbar-wrapper"></div>
        <div style="clear: both;"></div>                                                                   
        <div>
            <br class="mb-lg-5">
            <div id="QAConatiner"></div>            
        </div>                                   
           <br class="mb-lg-5">
           <br class="mb-lg-5">
           <br class="mb-lg-5">
           <footer class="fixed-bottom">
               <div class="scorevalue" id="divScoring">
                   <label id="lblScoring" style="font-weight:bold; display:none;">Tab Score:</label>
                   <label id="lblScoringValue" for="ScoringValue" style="display:none;"></label>
               </div>
               <div>
                   <button title="Previous" class="btn btn-secondary" id="previousid" onclick="Previous()" align="left" value="Previous">Back</button>
                   <button title="Finish" class="btn btn-secondary float-right" style="display: none;" id="Finish" onclick="Finish()" align="right" value="Finish">Finish</button>
                   <button title="Next" class="btn btn-secondary float-right" id="nextid" onclick="Next()" align="right" value="Next">Save & Next</button>
                   <button title="Save" id="Save" class="btn btn-primary float-right" onclick="SaveLast()" align="right" style="text-align: center; right: 0px; margin-right: 10px;" value="Save">Save</button>
                   <img id="SavedDiv" src="GreenIndicator.png" style="max-width: 20px; margin-top:4px; margin-right: 10px;" align="right" />
                   <img id="UnSavedDiv" src="RedIndicator.gif" style="max-width: 20px; margin-top:4px; margin-right: 10px;" align="right" />
                   <button title="Show Final Score" class="btn btn-primary float-right" id="showfinalscoreid" style="margin-right: 10px; display:none;" align="right" value="Survey Score" onclick="ShowFinalSurveyScoreOnClick()">Final Score</button>                                      
               </div>
           </footer>
    </div>
</body>
</html>
